[
["index.html", "Mapping INBO color ring data to SOVON format 1 Intro", " Mapping INBO color ring data to SOVON format Damiano Oldoni 2019-03-11 1 Intro This document contains and describes all the steps in mapping INBO color ring data to SOVON format. By running this document in R, it will create all the necessary data files. Settings to access INBO database are necessary. Load libraries: library(DBI) # To connect to database library(odbc) # To connect to database library(stringr) # To perform string operations library(stringi) # To perform string operations library(readr) # To read and write txt files library(dplyr) # To transform data library(tidyr) # To transform data library(purrr) # To transform data via functions library(tidyselect) # To select columns smartly library(measurements) # To convert measurement units library(here) # To find files library(lubridate) # To ease working with dates The output of the data processing consists of three dataframes saved as tab separated files (tsv) in folder data/processed/: crbirding_users: user data crbirding_birds: ring data crbirding_observations: observation data "],
["1_preprocessing.html", "2 Extract data from INBO kleurring database 2.1 Connection to INBO database 2.2 Import data 3 Pre-processing 3.1 Preview raw data 3.2 Check spaces in birds 3.3 Check duplicates WaarnemingNummer-AktieCode 3.4 Merge observations and actions 3.5 Check spaces in obs_and_acts 3.6 Check presence action code 3.7 Remove data labelled as FOUT 3.8 Check color rings: uppercase 3.9 Check keys KleurringNummer (obs) - Nummer (birds) 3.10 Check duplicates in date of applying rings 3.11 Check age while applying rings 3.12 Check bird sex inconsistencies 3.13 Handle information about metal ring number 3.14 Solve GPS tracker IDs 3.15 Check inconsistencies between users and observers 3.16 Remove data of common shelduck 3.17 Save preprocessed data", " 2 Extract data from INBO kleurring database 2.1 Connection to INBO database Get connection settings from config.yml (not included to the reposiory) and connect to database: meeuwen &lt;- config::get(&quot;meeuwen&quot;) conn &lt;- dbConnect(odbc::odbc(), driver = meeuwen$driver, server = meeuwen$server, database = meeuwen$database, port = meeuwen$port, trusted_connection = meeuwen$trusted_connection ) 2.2 Import data 2.2.1 Extract user data First, we extract data about users from INBO kleurring database: users &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.tblWaarnemer&quot;) %&gt;% as_tibble() 2.2.2 Extract color ring data birds &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.tblKleurring&quot;) %&gt;% as_tibble() 2.2.3 Extract observation data INBOâ€™s observation data contain a text type field: Opmerking. Text type is deprecated and an error will be returned if we perform the standard SQL query &quot;SELECT * FROM dbo.tblWaarneming&quot;. So, we need an ad-hoc query: obs &lt;- dbGetQuery(conn, &quot;SELECT Nummer, Datum, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, MetaalringNummer, MetaalringPlaats, PlaatsGemeente, PlaatsToponym, PlaatsToponymDetail, Convert(nvarchar(4000),Opmerking) as Opmerking, WaarnemerNummer, PlaatsLengtegraadGraden, PlaatsLengtegraadMinuten, PlaatsLengtegraadSeconden, PlaatsBreedtegraadGraden, PlaatsBreedtegraadMinuten, PlaatsBreedtegraadSeconden, PlaatsLengtegraadRichtingCode, PlaatsBreedtegraadRichtingCode, PlaatsLandCode, MetaalringLandCode, BevestigingDatum, PlaatsProvincie, AanmaakDatum, WijzigDatum FROM dbo.tblWaarneming&quot;) %&gt;% as_tibble() Table tblWaarnemingAktie is also important because contains informations about the actions taken at each observation: obs_actions &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.tblWaarnemingAktie&quot;) The action codes are described in table dbo.cdeAktie: actions_meaning &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.cdeAktie&quot;) actions_meaning Close connection to server: dbDisconnect(conn) 2.2.4 Import control data From UVABIT repository, we copied a text file containing the mapping of GPS ids: map_gps_path &lt;- here::here(&quot;data&quot;, &quot;external&quot;, &quot;map_gps_id_to_color_ring.tsv&quot;) map_gps &lt;- read_tsv(map_gps_path) %&gt;% mutate(sovon_bird_notes = &quot;uvabits_gps_tag.&quot;) map_gps %&gt;% head() This file will be used later in this same document. 3 Pre-processing 3.1 Preview raw data For privcay reasons users data cannot be shown. Users data refer to the following fields: colnames(users) ## [1] &quot;Nummer&quot; &quot;Familienaam&quot; &quot;Voornaam&quot; &quot;Adres&quot; ## [5] &quot;Postcode&quot; &quot;Gemeente&quot; &quot;Email&quot; &quot;Telefoon&quot; ## [9] &quot;Wachtwoord&quot; &quot;Gebruikersnaam&quot; &quot;LandCode&quot; &quot;TelefoonMobiel&quot; ## [13] &quot;TelefoonWerk&quot; Preview birds data: birds %&gt;% head() Preview observations data: obs %&gt;% head() Preview observation actions data: obs_actions %&gt;% head() 3.2 Check spaces in birds No spaces should be present in any column of birds: map_dfr(birds, ~ mutate(birds, space_detect = str_detect(., pattern = &quot; &quot;))) %&gt;% filter(space_detect == TRUE) Remove all spaces: birds &lt;- birds %&gt;% mutate_all(funs(str_replace(., &quot; &quot;, &quot;&quot;))) 3.3 Check duplicates WaarnemingNummer-AktieCode The action acronym is contained in column AktieCode. Observations and their actions are linked via columns WaarnemingNummer (in actions) and Nummer (in obs). No duplicates WaarnemingNummer-AktieCode should exist: obs_actions %&gt;% filter(WaarnemingNummer %in% (obs_actions %&gt;% group_by(WaarnemingNummer, AktieCode) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% pull(WaarnemingNummer)) ) Otherwise they should be removed: obs_actions &lt;- obs_actions %&gt;% distinct(WaarnemingNummer, AktieCode, .keep_all = TRUE) 3.4 Merge observations and actions In order to ease the mapping of birds and observations, we first remove columns will be never used: obs_actions &lt;- obs_actions %&gt;% select(-c(Nummer, AanmaakDatum, WijzigDatum) ) Then we spread action codes to columns: obs_actions &lt;- obs_actions %&gt;% spread(AktieCode, AktieCode) The following combinations occurr: combinations_actions &lt;- obs_actions %&gt;% select(-WaarnemingNummer) %&gt;% distinct() combinations_actions The following actions are at least once present in database: acts &lt;- names(combinations_actions) Actions described in actions_meaning never used: actions_meaning %&gt;% filter(!Code %in% acts) We add action code columns to observations in order to have a unique dataframe: obs_and_acts &lt;- obs %&gt;% left_join(obs_actions, by = c(&quot;Nummer&quot; = &quot;WaarnemingNummer&quot;)) Preview: head(obs_and_acts, n = 100) 3.5 Check spaces in obs_and_acts No spaces should be present in character columns of obs_and_acts except for columns related to place description (Plaats*), datums (*Datum) and notes (Opmerking): map_dfr(obs_and_acts %&gt;% select_if(is.character) %&gt;% select(-c(starts_with(&quot;Plaats&quot;), Opmerking, ends_with(&quot;Datum&quot;))), ~ mutate(obs_and_acts, space_detect = str_detect(., pattern = &quot; &quot;))) %&gt;% filter(space_detect == TRUE) %&gt;% arrange(Nummer) Remove spaces: obs_and_acts &lt;- obs_and_acts %&gt;% mutate_at(vars(-c(starts_with(&quot;Plaats&quot;), ends_with(&quot;Datum&quot;), one_of(&quot;Opmerking&quot;, &quot;Nummer&quot;, &quot;WaarnemerNummer&quot;))), funs(str_replace(., &quot; &quot;, &quot;&quot;)) ) 3.6 Check presence action code All observations should also have an action code: no_actions &lt;- obs_and_acts %&gt;% filter_at(vars_select(names(obs_and_acts), one_of(acts)), all_vars(is.na(.))) no_actions Observation without it will be removed: obs_and_acts &lt;- obs_and_acts %&gt;% filter(!Nummer %in% no_actions$Nummer) 3.7 Remove data labelled as FOUT There are observations judged as error. They are marked byKleurringNummmer equal to FOUT: obs_and_acts %&gt;% filter(KleurringNummer == &quot;FOUT&quot;) %&gt;% head(n = 10) The value FOUT is also present in birds: birds %&gt;% filter(Nummer == &quot;FOUT&quot;) These data are related to observations judged not correct (FOUT: error) by the INBO experts and administrator of the database. Thus, at the moment, we remove these data (discussion about this issue here) from observations: obs_and_acts &lt;- obs_and_acts %&gt;% filter(KleurringNummer != &quot;FOUT&quot;) and from birds: birds &lt;- birds %&gt;% filter(Nummer != &quot;FOUT&quot;) 3.8 Check color rings: uppercase Bird color rings codes are uppercase. Exceptions: birds %&gt;% filter(Nummer != toupper(Nummer) | NummerNieuw != toupper(NummerNieuw)) are converted to uppercase: birds &lt;- birds %&gt;% mutate(Nummer = toupper(Nummer), NummerNieuw = toupper(NummerNieuw), NummerDesc = toupper(NummerDesc)) The same holds true for KleurringNummer in obs_and_acts. Exceptions: obs_and_acts %&gt;% filter(KleurringNummer != toupper(KleurringNummer)) %&gt;% distinct(KleurringNummer) are transformed to uppercase: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(KleurringNummer = toupper(KleurringNummer)) 3.9 Check keys KleurringNummer (obs) - Nummer (birds) All values in KleurringNummer should be present in birds$Nummer. Exceptions: obs_and_acts %&gt;% filter(!KleurringNummer %in% birds$Nummer) %&gt;% distinct(KleurringNummer) We remove them: KleurringNummer_remove &lt;- obs_and_acts %&gt;% filter(!KleurringNummer %in% birds$Nummer) %&gt;% distinct(KleurringNummer) %&gt;% pull() obs_and_acts &lt;- obs_and_acts %&gt;% filter(!KleurringNummer %in% KleurringNummer_remove) Finally, we search for birds (Nummer in birds) not linked to any observation (KleurringNummer in obs_and_acts): birds %&gt;% filter(!Nummer %in% obs_and_acts$KleurringNummer) We remove them: birds &lt;- birds %&gt;% filter(Nummer %in% obs_and_acts$KleurringNummer) 3.10 Check duplicates in date of applying rings Detect duplicates in date of applying (the very first) color ring (action code rngkl): duplicates_ringing_rngkl &lt;- obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% distinct(KleurringNummer, Datum, rngkl) %&gt;% group_by(KleurringNummer, Datum, rngkl) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% select(-n) %&gt;% left_join(obs_and_acts, by = c(&quot;KleurringNummer&quot;, &quot;Datum&quot;, &quot;rngkl&quot;)) %&gt;% select(Nummer, everything()) duplicates_ringing_rngkl and metal ring (action code rngme): duplicates_ringing_rngme &lt;- obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% distinct(KleurringNummer, Datum, rngme) %&gt;% group_by(KleurringNummer, Datum, rngme) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% select(-n) %&gt;% left_join(obs_and_acts, by = c(&quot;KleurringNummer&quot;, &quot;Datum&quot;, &quot;rngme&quot;)) %&gt;% select(Nummer, everything()) duplicates_ringing_rngme 3.11 Check age while applying rings For each bird, observations with same date should refer to same bird age. Exceptions: obs_and_acts %&gt;% filter(!is.na(LeeftijdCode)) %&gt;% filter(!is.na(rngkl) | !is.na(rngme)) %&gt;% distinct(KleurringNummer, Datum, LeeftijdCode) %&gt;% group_by(KleurringNummer, Datum) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(LeeftijdCode)) %&gt;% select(Nummer, KleurringNummer, Datum, LeeftijdCode, rngkl, rngme)) %&gt;% select(-n) %&gt;% select(Nummer, KleurringNummer, Datum, LeeftijdCode, rngkl, rngme ) 3.12 Check bird sex inconsistencies All birds should have a sex, which could be one of M (mannetje), V (vrouwtje), O (onbekend): distinct(birds, GeslachtCode) Exceptions: birds %&gt;% filter(is.na(GeslachtCode)) %&gt;% distinct(Nummer, NummerNieuw, NummerDesc, GeslachtCode) For all birds a one-to-one relation bird - sex should hold true: birds %&gt;% distinct(Nummer, GeslachtCode) %&gt;% nrow() == nrow(birds) ## [1] TRUE 3.13 Handle information about metal ring number There are columns containing metal ring related information in birds: names(birds)[which(str_detect(names(birds), &quot;Metaalring&quot;))] ## [1] &quot;MetaalringNummer&quot; &quot;MetaalringPlaats&quot; &quot;MetaalringLandCode&quot; and obs_and_acts: names(obs_and_acts)[which(str_detect(names(obs_and_acts), &quot;Metaalring&quot;))] ## [1] &quot;MetaalringNummer&quot; &quot;MetaalringPlaats&quot; &quot;MetaalringLandCode&quot; This is not only redundant: inconsistencies are detected. Some examples: birds %&gt;% filter(Nummer %in% c(&quot;AAAA&quot;, &quot;AAAR&quot;, &quot;AAAT&quot;, &quot;AAAW&quot;)) %&gt;% rename(&quot;metal_ring_from_birds&quot; = &quot;MetaalringNummer&quot;) %&gt;% left_join(obs_and_acts %&gt;% rename(&quot;metal_ring_from_obs&quot; = &quot;MetaalringNummer&quot;), by = c(&quot;Nummer&quot; = &quot;KleurringNummer&quot;)) %&gt;% distinct(Nummer, metal_ring_from_birds, metal_ring_from_obs) Based on expertsâ€™ knowledge only the metal ring information in birds is correct. We rename the columns related to metal ring information from obs_and_acts by adding suffix _obs: obs_and_acts &lt;- obs_and_acts %&gt;% rename_at(vars(starts_with(&quot;Metaalring&quot;)), ~ paste0(., &quot;_obs&quot;)) 3.14 Solve GPS tracker IDs Some birds have a suspect Nummer which is formed by letters GPS or GP followed by some numbers. These are a kind of GPS IDs which should not be in columns related to color rings: birds %&gt;% filter(str_detect(Nummer, pattern = &quot;(^(GP)\\\\d+)|(^(GPS)\\\\d+)&quot;)) %&gt;% select(Nummer) The right mapping of them is saved in map_gps: map_gps %&gt;% head() We import the color rings in new column first_Nummer. For all other rings will be first_nummer = Nummer as they are the very first rings: birds &lt;- birds %&gt;% # create column first_Nummer with right color rings for the GPS or GP** risngs left_join(map_gps, by = c(&quot;Nummer&quot; = &quot;gps_id&quot;)) %&gt;% # set first_Numer equal to Nummer in all other cases mutate(first_Nummer = ifelse(is.na(color_ring), Nummer, color_ring)) %&gt;% select(Nummer, first_Nummer, everything()) Check whether not corrected rings (GP*** or GPS***) are still present: birds %&gt;% filter(str_detect(first_Nummer, pattern = &quot;(^(GP)\\\\d+)|(^(GPS)\\\\d+)&quot;)) %&gt;% select(first_Nummer) Mapping example: the bird with Nummer equal to GP130 is mapped as follows: birds %&gt;% filter(Nummer == &quot;GP130&quot;) %&gt;% select(Nummer, first_Nummer, sovon_bird_notes) Column first_Nummer should contain unique elements. Check for exceptions: birds %&gt;% group_by(first_Nummer) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% left_join(birds) %&gt;% select(-n) Exceptions are due to double entry, one with the original color ring, a second one with GPS tracker ID. Such exceptions, if present, should be handled separately while mapping bird_shorthand in document 3_birds.Rmd. 3.15 Check inconsistencies between users and observers We have to be sure that all observations have a valid observator reference, i.e. an ID contained in column Nummer of users. Observations without an observator reference: obs_and_acts %&gt;% filter(is.na(WaarnemerNummer)) All observator references in obs_and_acts should be present in users: observers_ids &lt;- unique( obs_and_acts %&gt;% filter(!is.na(WaarnemerNummer)) %&gt;% distinct(WaarnemerNummer) %&gt;% pull()) all(observers_ids %in% users$Nummer) ## [1] TRUE 3.16 Remove data of common shelduck Data related to common shelduck, Tadorna tadorna, are not updated: INOB experts suggest to remove them from the mapping. More details here. Euring scheme: 01730. We retrieve the values of field Nummer from birds related to this species: common_shellduck_nummer &lt;- birds %&gt;% filter(EuringCode == &quot;01730&quot;) %&gt;% pull(Nummer) Number of birds to remove: length(common_shellduck_nummer) ## [1] 80 We remove data from birds: birds &lt;- birds %&gt;% filter(EuringCode != &quot;01730&quot;) and from obs_and_acts: obs_and_acts &lt;- obs_and_acts %&gt;% filter(!KleurringNummer %in% common_shellduck_nummer) 3.17 Save preprocessed data After data cleaning we save the data as TSVs in .data/interim: write_tsv(users, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;users.tsv&quot;), na = &quot;&quot;) write_tsv(birds, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;birds.tsv&quot;), na = &quot;&quot;) write_tsv( obs_and_acts, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), na = &quot;&quot;) We save the table containing action codes and relative meaning in ./data/input as it could be useful in following mapping steps: write_tsv( actions_meaning, path = here::here(&quot;data&quot;, &quot;input&quot;, &quot;actions_meaning.tsv&quot;), na = &quot;&quot; ) "],
["2_users.html", "4 Map user data 4.1 Read temporary user data 4.2 Map user data 4.3 Save user data", " 4 Map user data 4.1 Read temporary user data We start from the user temporary data saved in TSV file users.tsv in folder data\\interim: users &lt;- read_tsv(here::here(&quot;data&quot;, &quot;interim&quot;, &quot;users.tsv&quot;)) Number of users: nrow(users) ## [1] 1852 4.2 Map user data We map the original fields to SOVON fields denoted by prefix sovon_. 4.2.1 E-mail users &lt;- users %&gt;% mutate(sovon_user_email = Email) 4.2.2 First name users &lt;- users %&gt;% mutate(sovon_user_first_name = Voornaam) 4.2.3 Last name users &lt;- users %&gt;% mutate(sovon_user_last_name = Familienaam) 4.2.4 Address users &lt;- users %&gt;% mutate(sovon_user_address = Adres) 4.2.5 Place users &lt;- users %&gt;% mutate(sovon_user_place = Gemeente) 4.2.6 Postal code users &lt;- users %&gt;% mutate(sovon_user_postal_code = Postcode) 4.2.7 Country users &lt;- users %&gt;% mutate(sovon_user_country = LandCode) 4.2.8 User ID User identifiers are provided by SOVON. NA is given. users &lt;- users %&gt;% mutate(sovon_user_id = NA) 4.2.9 User reference We use the unique ID in Nummer: users &lt;- users %&gt;% mutate(sovon_user_reference = Nummer) 4.2.10 User language This field is not present in users. However, all accounts have been made by INBO in Dutch: users &lt;- users %&gt;% mutate(sovon_user_language = &quot;Dutch&quot;) 4.3 Save user data Export the SOVON fields to crbirding_users: crbirding_users &lt;- users %&gt;% select(starts_with(&quot;sovon_&quot;)) Remove prefix sovon_: names(crbirding_users) &lt;- str_remove( names(crbirding_users), pattern = &quot;sovon_&quot; ) The desired order of columns in crbirding_users: cr_users_cols &lt;- c( &quot;user_id&quot;, &quot;user_reference&quot;, &quot;user_email&quot;, &quot;user_first_name&quot;, &quot;user_last_name&quot;, &quot;user_address&quot;, &quot;user_postal_code&quot;, &quot;user_place&quot;, &quot;user_country&quot;, &quot;user_language&quot;, &quot;user_role&quot; ) Fields still not mapped: cr_users_cols[which(!cr_users_cols%in% names(crbirding_users))] ## [1] &quot;user_role&quot; The field user_role cannot be filled at the moment: it will be mapped at the end of next chapter. Set column order: crbirding_users &lt;- crbirding_users %&gt;% select(cr_users_cols[cr_users_cols != &quot;user_role&quot;]) Preview data (e-mail, first and last names removed for privacy reasons): crbirding_users %&gt;% select(-c(user_email, user_first_name, user_last_name)) %&gt;% head(n = 10) Save to TSV file crbirding_users.tsv in ./data/processed/: crbirding_users %&gt;% write_tsv( path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.tsv&quot;), na = &quot;&quot; ) "],
["3_birds.html", "5 Map ring data 5.1 Read temporary ring data 5.2 Map color ring data 5.3 Finalize user data 5.4 Save modified temporary observation data 5.5 Save final user data 5.6 Save final ring data", " 5 Map ring data 5.1 Read temporary ring data Import temporary bird data from birds.tsv: birds &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;birds.tsv&quot;), guess_max = 500000 ) 5.1.1 Read observation data Import temporary observation data from obs_and_actions.tsv: obs_and_acts &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), guess_max = 500000 ) 5.1.2 Read action data Import action codes and relative meaning: actions_meaning &lt;- read_tsv(here::here(&quot;data&quot;, &quot;input&quot;, &quot;actions_meaning.tsv&quot;)) 5.1.3 Read user data Import user data as we have still to map field user_role: crbirding_users &lt;- read_tsv( here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.tsv&quot;) ) 5.2 Map color ring data 5.2.1 Extract action codes Actions present in obs_and_acts : acts &lt;- actions_meaning$Code acts &lt;- acts[acts %in% names(obs_and_acts)] acts ## [1] &quot;rngkl&quot; &quot;rngme&quot; &quot;klgev&quot; &quot;br&quot; &quot;vang&quot; &quot;dood&quot; &quot;klweg&quot; &quot;veld&quot; ## [9] &quot;meweg&quot; &quot;me&quot; &quot;vangl&quot; &quot;ziek&quot; 5.2.2 Bird reference &amp; bird shorthand In SOVON table crbirding_birds each row identifies a ring. By assigning a bird reference as unique integer to a bird they can link any color ring to the bird it belongs to. birds &lt;- birds %&gt;% mutate(sovon_bird_reference = seq_len(nrow(birds))) %&gt;% select(sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, everything()) head(birds) Birds with lack of unicity of sovon_bird_reference: birds %&gt;% group_by(first_Nummer) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, Nummer), by = &quot;first_Nummer&quot;) %&gt;% select(-n) In such cases we assign the lower sovon_bird_reference: birds &lt;- birds %&gt;% group_by(first_Nummer) %&gt;% mutate(sovon_bird_reference = min(sovon_bird_reference)) %&gt;% ungroup() Check: birds %&gt;% group_by(first_Nummer) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% left_join( birds %&gt;% select(sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, Nummer), by = &quot;first_Nummer&quot;) %&gt;% select(-n) We add column sovon_bird_reference to obs_and_acts as it will be needed to map the dates of ringing. The link is made by the columns Nummer (birds data) and KleurringNummer (observation data): obs_and_acts &lt;- obs_and_acts %&gt;% left_join(birds %&gt;% select(Nummer, sovon_bird_reference), by = c(&quot;KleurringNummer&quot; = &quot;Nummer&quot;)) %&gt;% select(sovon_bird_reference, everything()) Check whether there are observation without link to any bird: filter(obs_and_acts, is.na(sovon_bird_reference)) We will also add column first_Nummer from birds to observations as well: obs_and_acts &lt;- obs_and_acts %&gt;% left_join( birds %&gt;% select(sovon_bird_reference, first_Nummer, Nummer), by = c(&quot;sovon_bird_reference&quot;, &quot;KleurringNummer&quot; = &quot;Nummer&quot;) ) The reconstruction of the series of color rings for each bird is made by using columns first_Nummer (very first color ring), NummerNieuw (very last color ring) and the information from spreadsheets of experts. We will collect the needed information in a new dataframe, called crbirding_birds which will grow up to become the end product containing the ring data. First step is to gather first_Nummer and NummerNieuw in new column sovon_bird_shorthand: crbirding_birds &lt;- birds %&gt;% select(sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, sovon_bird_notes) %&gt;% gather(key = col_nummer, value = sovon_bird_shorthand, first_Nummer, NummerNieuw) %&gt;% select(-col_nummer) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, NummerDesc, sovon_bird_notes) We can also assign the color ring version with point (sovon_bird_shorthand_pt) by matching columns sovon_bird_shorthand and NummerDesc where possible. Note that sovon_bird_shorthand_pt may contain points, but for old rings it is equal to sovon_bird_shorthand: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_shorthand_pt = ifelse( str_remove_all(string = NummerDesc, pattern = &quot;\\\\.&quot;) == sovon_bird_shorthand, NummerDesc, sovon_bird_shorthand) ) %&gt;% distinct() %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_notes) ## to map correctly MKAU (sovon_bird_reference: 4531) ## group_by(sovon_bird_reference, sovon_bird_shorthand) %&gt;% ## filter(sovon_bird_shorthand == ## sovon_bird_shorthand[which.max(nchar(sovon_bird_shorthand))]) %&gt;% ## ungroup() Example of mapping: the bird with sovon_bird_reference 14 is associated to the following two rings: birds %&gt;% filter(sovon_bird_reference == 14) %&gt;% select(sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc) and will be mapped as follows: crbirding_birds %&gt;% filter(sovon_bird_reference == 14) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt) Another example: birds %&gt;% filter(sovon_bird_reference == 4531) %&gt;% select(sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc) crbirding_birds %&gt;% filter(sovon_bird_reference == 4531) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt) 5.2.3 Bird ringing date The date of applying a ring should be mapped as sovon_bird_date_begin. The date of applying the first ring can be found in data frame obs_and_acts in the column Datum for actions rngkl (code action of applying very first color ring): obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select(sovon_bird_reference, first_Nummer, Datum, rngkl) %&gt;% head(n = 10) 5.2.3.1 Date of applying first ring We can add automatically the date of the very first ring for each bird (sovon_bird_reference), based on date of action code rngkl. In fact, there should be just one observation with action rngkl for each bird (sovon_bird_reference). Exceptions: exceptions_one_bird_one_rngkl &lt;- obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select(sovon_bird_reference, Datum) %&gt;% group_by(sovon_bird_reference) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% left_join(obs_and_acts, by = &quot;sovon_bird_reference&quot;) %&gt;% filter(!is.na(rngkl)) %&gt;% left_join(crbirding_birds %&gt;% select(sovon_bird_reference, sovon_bird_shorthand), by = &quot;sovon_bird_reference&quot;) %&gt;% distinct() %&gt;% select(-n) exceptions_one_bird_one_rngkl In case exceptions are present, we will manage them later. Assign the date of first ringing: crbirding_birds &lt;- obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select(sovon_bird_reference, first_Nummer, Datum) %&gt;% group_by(sovon_bird_reference, first_Nummer) %&gt;% summarize(sovon_bird_date_begin = min(Datum)) %&gt;% right_join(crbirding_birds, by = c(&quot;sovon_bird_reference&quot;, &quot;first_Nummer&quot; = &quot;sovon_bird_shorthand&quot;)) %&gt;% rename(sovon_bird_shorthand = first_Nummer) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_notes) %&gt;% ungroup() Some examples (birds with sovon_bird_reference 1, 14 and 4543): crbirding_birds %&gt;% filter(sovon_bird_reference %in% c(1, 14, 4543)) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) Check date of birds in exceptions: crbirding_birds %&gt;% ## filter(sovon_bird_shorthand %in% c(&quot;MKAU&quot;, &quot;CZOZ&quot;)) filter(sovon_bird_shorthand %in% exceptions_one_bird_one_rngkl$sovon_bird_shorthand) And in case solve: if (nrow(exceptions_one_bird_one_rngkl) &gt; 0) { crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_date_begin = case_when( sovon_bird_shorthand == &quot;MKAU&quot; ~ sovon_bird_date_begin, sovon_bird_shorthand == &quot;CZOZ&quot; ~ as.POSIXct(NA_character_), TRUE ~ sovon_bird_date_begin ) ) } Summary of rings with date (sovon_bird_date_begin): crbirding_birds %&gt;% mutate(date_is_present = !is.na(sovon_bird_date_begin)) %&gt;% group_by(date_is_present) %&gt;% count() 5.2.3.2 Date of applying last ring The rings without date are the rings of birds ringed more than once. birds_multiple_rings &lt;- crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% count() %&gt;% filter(n &gt; 1) birds_multiple_rings Not only, the structure of our database limits to 2 the maximum number of rings linked to the same bird, as two are the columns containing such information (Nummer and NummerNieuw): birds_two_rings &lt;- crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% count() %&gt;% filter(n == 2) all(birds_two_rings$sovon_bird_reference == birds_multiple_rings$sovon_bird_reference) ## [1] TRUE Experts explained us that the very first and the very last ring are mapped in birds. By consulting the spreadsheet of the experts we will later fill the gap by adding intermediate rings. We can try to retrieve the date of applying last ring based on observations/actions with code vang (caught at the nest) or vangl (caught otherwise). Birds ringed twice and linked to one vang/vangl action: bird_one_vang &lt;- obs_and_acts %&gt;% filter(sovon_bird_reference %in% birds_multiple_rings$sovon_bird_reference &amp; (!is.na(vang) | !is.na(vangl))) %&gt;% select(sovon_bird_reference, Datum) %&gt;% group_by(sovon_bird_reference) %&gt;% count() %&gt;% filter(n == 1) %&gt;% left_join(obs_and_acts %&gt;% select(sovon_bird_reference, Datum, acts), by = &quot;sovon_bird_reference&quot;) %&gt;% filter(!is.na(vang) | !is.na(vangl)) %&gt;% rename(sovon_bird_date_begin = Datum) %&gt;% select(-n) %&gt;% arrange(sovon_bird_reference) bird_one_vang %&gt;% select_if(function(x) any(!is.na(x))) As you cannot change a ring to a bird without catching him, we can use these unique dates as date of ringing, sovon_bird_date_begin: bird_one_vang_with_date &lt;- crbirding_birds %&gt;% filter(sovon_bird_reference %in% bird_one_vang$sovon_bird_reference &amp; sovon_bird_reference %in% birds_two_rings$sovon_bird_reference) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(is.na(sovon_bird_date_begin)) %&gt;% select(-sovon_bird_date_begin) %&gt;% left_join(bird_one_vang, by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% select(-acts) crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(bird_one_vang_with_date, by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;)) %&gt;% bind_rows(bird_one_vang_with_date) %&gt;% arrange(sovon_bird_reference) Examples of date mapping (birds with sovon_bird_reference 11 and 14): crbirding_birds %&gt;% filter(sovon_bird_reference %in% c(11, 14)) Some birds have been catched twice: bird_two_vang &lt;- obs_and_acts %&gt;% filter(sovon_bird_reference %in% birds_two_rings$sovon_bird_reference &amp; (!is.na(vang) | !is.na(vangl))) %&gt;% select(sovon_bird_reference, Datum) %&gt;% group_by(sovon_bird_reference) %&gt;% count() %&gt;% filter(n == 2) %&gt;% left_join(obs_and_acts %&gt;% select(sovon_bird_reference, Datum, acts), by = &quot;sovon_bird_reference&quot;) %&gt;% filter(!is.na(vang) | !is.na(vangl)) %&gt;% rename(sovon_bird_date_begin = Datum) %&gt;% select(-n) %&gt;% arrange(sovon_bird_reference) bird_two_vang %&gt;% select_if(function(x) any(!is.na(x))) In the expert spreadsheet, we can see that the color ring is typically applied during the last vang/vangl action. We will assign the most recent date by default as first step, correcting the exceptions later: bird_two_vang_get_date &lt;- crbirding_birds %&gt;% filter(sovon_bird_reference %in% bird_two_vang$sovon_bird_reference &amp; sovon_bird_reference %in% birds_two_rings$sovon_bird_reference) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(is.na(sovon_bird_date_begin)) %&gt;% select(-sovon_bird_date_begin) %&gt;% left_join(bird_two_vang %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)), by = c(&quot;sovon_bird_reference&quot;)) %&gt;% select_if(function(x) any(!is.na(x))) bird_two_vang_get_date By consulting the spreadsheet we can find that the following rings have been applied during the earliest vang/vangl action, so they are exceptions: bird_shorthand_exceptions &lt;- c(&quot;NGAP&quot;, &quot;NGAX&quot;, &quot;GVAR&quot;, &quot;KPAZ&quot;, &quot;KAAK&quot;, &quot;KAAN&quot;) bird_exceptions &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand %in% bird_shorthand_exceptions) We set sovon_bird_date_begin equal to the date of the earliest vang/vangl action: bird_two_vang_get_date &lt;- bird_two_vang %&gt;% filter(sovon_bird_reference %in% bird_exceptions$sovon_bird_reference) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin == min(sovon_bird_date_begin)) %&gt;% left_join(bird_exceptions %&gt;% select(-sovon_bird_date_begin), by = &quot;sovon_bird_reference&quot;) %&gt;% select(names(bird_two_vang_get_date)) %&gt;% bind_rows(bird_two_vang_get_date %&gt;% filter(!sovon_bird_shorthand %in% bird_exceptions$sovon_bird_shorthand)) %&gt;% select(names(crbirding_birds)) bird_two_vang_get_date Add this information to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(bird_two_vang_get_date, by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot;)) %&gt;% bind_rows(bird_two_vang_get_date) %&gt;% arrange(sovon_bird_reference) crbirding_birds Rings still without date: crbirding_birds %&gt;% mutate(date_is_present = !is.na(sovon_bird_date_begin)) %&gt;% filter(!date_is_present) Based on spreadsheet and observation data, we found that the dates of applying the rings FAAG and YCAF are linked to actions ziek, i.e. the ring has been applied while taking care of the birds. The date of applying FAAG: info_faag &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;FAAG&quot;) %&gt;% mutate(sovon_bird_date_begin = obs_and_acts %&gt;% filter(sovon_bird_reference == 176, first_Nummer == &quot;ALAU&quot;, !is.na(ziek)) %&gt;% ## get the second &quot;ziek&quot; action (2006-07-07) filter(Datum == max(Datum)) %&gt;% pull(Datum)) info_faag The date of applying YCAF: info_ycaf &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;YCAF&quot;) %&gt;% mutate(sovon_bird_date_begin = obs_and_acts %&gt;% filter(first_Nummer == &quot;PLAB&quot;, !is.na(ziek)) %&gt;% ## there is just one &quot;ziek&quot; action pull(Datum)) info_ycaf The date of applying FHOV: info_fhov &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;FHOV&quot;) %&gt;% mutate(sovon_bird_date_begin = obs_and_acts %&gt;% filter(first_Nummer == &quot;SUAV&quot;, !is.na(ziek)) %&gt;% ## there is just one &quot;ziek&quot; action pull(Datum)) info_fhov Add this dates to crbirding_birds: crbirding_birds &lt;- bind_rows(crbirding_birds %&gt;% filter(!sovon_bird_shorthand %in% c(&quot;FAAG&quot;, &quot;YCAF&quot;, &quot;FHOV&quot;)), info_faag, info_ycaf, info_fhov) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) All rings in crbirding_birds have a date: crbirding_birds %&gt;% filter(!is.na(sovon_bird_date_begin)) %&gt;% nrow() == nrow(crbirding_birds) ## [1] TRUE 5.2.3.3 Add intermediate color rings Based on spreadsheet of experts, we have to add new rings, as some birds have been ringed more than twice, so the information contained in first_Nummer and NummerNieuw is not complete, as they map the very first and the very last ring. The intermediate rings are the following: intermediate_rings &lt;- tibble( first_Nummer = c( &quot;E633&quot;, &quot;DJAB&quot;, &quot;BWAD&quot;, &quot;KLAT&quot;, &quot;PR3&quot;, &quot;TY2&quot;, &quot;RTO&quot;, &quot;E099&quot;, &quot;MKAU&quot;, &quot;ASAH&quot;, &quot;ADAF&quot; ), intermediate_ring = c( &quot;BUAG&quot;, &quot;TRAP&quot;, &quot;GTAS&quot;, &quot;UPAB&quot;, &quot;DHAZ&quot;, &quot;GMAJ&quot;, &quot;DGAH&quot;, &quot;GHAT&quot;, &quot;ZVAU&quot;, &quot;HWAX&quot;, &quot;DJAU&quot; ), sovon_bird_date_begin = as.POSIXct(c( &quot;2000-05-08&quot;, ## BUAG &quot;2012-05-25&quot;, ## TRAP &quot;2007-06-01&quot;, ## GTAS &quot;2012-05-29&quot;, ## UPAB &quot;2006-05-26&quot;, ## DHAZ &quot;2007-06-06&quot;, ## GMAJ &quot;2006-05-17&quot;, ## DGAH &quot;2007-06-18&quot;, ## GHAT &quot;2014-05-23&quot;, ## ZVAU &quot;2009-05-18&quot;, ## HWAX &quot;2006-05-26&quot; ## DJAU ), tz = &quot;UTC&quot;) ) intermediate_rings Retrieve sovon_bird_reference: intermediate_rings &lt;- intermediate_rings %&gt;% left_join(crbirding_birds %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_notes), by = c(&quot;first_Nummer&quot; = &quot;sovon_bird_shorthand&quot;)) %&gt;% select(sovon_bird_reference, first_Nummer, intermediate_ring, sovon_bird_date_begin, sovon_bird_notes) intermediate_rings Check whether all dates are linked to a valid observation and check whether they are linked to vang/vangl actions: intermediate_rings %&gt;% left_join(obs_and_acts %&gt;% select(sovon_bird_reference, Datum, acts, first_Nummer), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot;, &quot;first_Nummer&quot;)) %&gt;% filter(!is.na(vang) | !is.na(vangl)) %&gt;% select_if(function(x) any(!is.na(x))) We can then add the intermediate rings to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(intermediate_rings %&gt;% select(-first_Nummer) %&gt;% rename(sovon_bird_shorthand = intermediate_ring) %&gt;% mutate(sovon_bird_shorthand_pt = sovon_bird_shorthand)) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) Example of a triplet ring sequence: bird_reference_example_triplet &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;BUAG&quot;) %&gt;% distinct(sovon_bird_reference) %&gt;% pull() crbirding_birds %&gt;% filter(sovon_bird_reference == bird_reference_example_triplet) At this point all rings should have a sovon_bird_date_begin: crbirding_birds %&gt;% filter(!is.na(sovon_bird_date_begin)) %&gt;% nrow() == nrow(crbirding_birds) ## [1] TRUE 5.2.4 Bird ringing end date For birds ringed more than once, we can assign an end date for the changed rings. This information will be stored in field sovon_bird_date_end. The end date is equal to the date of applying the new ring assign_end_date &lt;- function(data) { if (nrow(data) &gt; 1) { return(c(as_date(data$sovon_bird_date_begin[2:nrow(data)], tz = &quot;UTC&quot;), as_date(NA, tz = &quot;UTC&quot;))) } else { return(as_date(NA, tz = &quot;UTC&quot;)) } } crbirding_birds &lt;- crbirding_birds %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) %&gt;% group_by(sovon_bird_reference) %&gt;% nest() %&gt;% mutate(sovon_bird_date_end = map(data, assign_end_date)) %&gt;% unnest() %&gt;% mutate(sovon_bird_date_end = as.POSIXct(sovon_bird_date_end)) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes) As example, we show the chronology of color rings for birds ringed thrice: bird_reference_triplet &lt;- crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% count() %&gt;% filter(n == 3) %&gt;% distinct(sovon_bird_reference) %&gt;% pull() crbirding_birds %&gt;% filter(sovon_bird_reference %in% bird_reference_triplet) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) 5.2.5 Add rows for metal rings without color rings Sometimes metal rings have been applied before color rings. These cases should be added to crbirding_birds as new rows. We can detect these situtations by comparing the date of actions rngme and rngkl for each bird. rngme_before_rngkl &lt;- obs_and_acts %&gt;% filter(!is.na(rngme) &amp; is.na(rngkl)) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(Datum_rngme = Datum) %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(Datum_rngkl = Datum), by = &quot;sovon_bird_reference&quot;) %&gt;% filter(Datum_rngme &lt; Datum_rngkl) %&gt;% rename(sovon_bird_date_begin = Datum_rngme, sovon_bird_date_end = Datum_rngkl) %&gt;% mutate(sovon_bird_shorthand = NA_character_, sovon_bird_shorthand_pt = NA_character_, sovon_bird_notes = &quot;sovon_bird_shorthand not available.&quot;) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, everything()) rngme_before_rngkl We add these rows to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rngme_before_rngkl) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) A preview: crbirding_birds %&gt;% filter(sovon_bird_reference %in% (rngme_before_rngkl %&gt;% pull(sovon_bird_reference))) %&gt;% head(n = 50) 5.2.6 Ring number The ring number, or metal ring number, can be found in field MetaalringNummer, which contains the most recent metal ring number. Recoverying the complete chronology of metal rings for each bird is almost impossible as it is: not complete included in texutal description (field Opmerking of tblWaarneming) However, this is not considered a real problem by INBO and SOVON experts as both INBO and SOVON databases focus on color rings. See issue 34 for more details. Just as example, we can show the textual notes of observations linked to action vang and containing 6 or more consecutive numbers in the notes: obs_and_acts %&gt;% filter(str_detect(Opmerking, pattern = &quot;[0-9]{6,}&quot;)) %&gt;% filter(!is.na(vang)) %&gt;% select(Opmerking) A ring number should consist of up to ten alphanumeric characters. At page 7 of the EURING Exchange Code 2000+ document we read the following instructions: Where the ring number consist of fewer than ten numbers/letters, the number is padded with dots. These dots are always inserted to the left of the rightmost row of numbers. Ring number anomalies: birds %&gt;% filter(!str_detect(MetaalringNummer, pattern = regex(&quot;\\\\d+&quot;))) %&gt;% group_by(MetaalringNummer) %&gt;% count() Value none means not metal-ringed bird, while onbekend means that information is no more available. SOVON chooses to leave column sovon_bird_ring_number empty for both cases. However, we will add a note to sovon_bird_notes to still maintain a reference to this slight difference. Value ? is equivalent to onbekend while H???????? and Lxxxxxx are mapped as H-------- and L------ respectively. birds &lt;- birds %&gt;% mutate(sovon_bird_ring_number = recode( MetaalringNummer, &quot;?&quot; = NA_character_, &quot;onbekend&quot; = NA_character_, &quot;none&quot; = NA_character_, &quot;H????????&quot; = &quot;H--------&quot;, &quot;Lxxxxxx&quot; = &quot;L------&quot; ) ) We separate the birds with special mapping values by all the others: special_values &lt;- c(&quot;H--------&quot;, &quot;L------&quot;) birds_special_values &lt;- birds %&gt;% filter(sovon_bird_ring_number %in% special_values) birds_others &lt;- birds %&gt;% filter(!sovon_bird_ring_number %in% special_values) Some ring numbers contain asterisks: birds_others %&gt;% filter(str_detect(sovon_bird_ring_number, &quot;\\\\*&quot;)) %&gt;% select(sovon_bird_ring_number) We remove the asteriks: birds_others &lt;- birds_others %&gt;% mutate(sovon_bird_ring_number = gsub(&quot;\\\\*&quot;, &quot;&quot;, sovon_bird_ring_number)) Add points . where needed: birds_others &lt;- birds_others %&gt;% mutate(reversed = stri_reverse(str = sovon_bird_ring_number)) idx &lt;- as.data.frame(str_locate(birds_others$reversed, pattern = regex(&quot;\\\\d+&quot;)))$end idx &lt;- replace_na(idx, 0) birds_others &lt;- birds_others %&gt;% mutate(sovon_bird_ring_number = stri_reverse(str_c( str_sub(reversed, end = idx), map_chr(nchar(reversed), function(x) { ifelse(x &lt; 10, str_c(rep(&quot;.&quot;, 10 - x), collapse = &quot;&quot;), &quot;&quot;) }), str_sub(reversed, start = idx + 1)))) %&gt;% select(-reversed) Merge the two data frames together: birds &lt;- bind_rows(birds_others, birds_special_values) Effects of mapping (part of it): birds %&gt;% distinct(MetaalringNummer, sovon_bird_ring_number) %&gt;% head(n = 200) We have to be sure that no multiple metal rings are assigned to the same bird (sovon_bird_reference). Exceptions: birds %&gt;% select(sovon_bird_reference, sovon_bird_ring_number) %&gt;% group_by(sovon_bird_reference) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% left_join(birds, by = &quot;sovon_bird_reference&quot;) %&gt;% select(-n) Thanks to observations with action rngme we can retrieve the date of applying the (very first) metal ring. obs_and_acts %&gt;% filter(!is.na(rngme)) %&gt;% select(sovon_bird_reference, KleurringNummer, Datum) %&gt;% head(n = 20) Similarly to color rings and action rngkl, there should be one and only one action rngme for each bird. Exceptions: obs_and_acts %&gt;% filter(!is.na(rngme)) %&gt;% select(sovon_bird_reference, KleurringNummer, Datum) %&gt;% group_by(sovon_bird_reference) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(rngme)) %&gt;% select(sovon_bird_reference, KleurringNummer, Datum), by = &quot;sovon_bird_reference&quot;) %&gt;% select(-n) Some metal rings are not linked to an observation with action rngme, so we have no date for them: no_rngme &lt;- birds %&gt;% filter(!is.na(sovon_bird_ring_number)) %&gt;% select(sovon_bird_reference, sovon_bird_ring_number) %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(rngme)) %&gt;% select(sovon_bird_reference, Datum), by = &quot;sovon_bird_reference&quot;) %&gt;% filter(is.na(Datum)) %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, Nummer, MetaalringNummer), by = &quot;sovon_bird_reference&quot;) %&gt;% select(sovon_bird_reference, Nummer, MetaalringNummer) %&gt;% rename(KleurringNummer = Nummer) %&gt;% arrange(KleurringNummer) no_rngme Experts are sure that these metal rings have been applied while applying the color ring (see comment on issue #33). So, we can use the information for rows with action rngkl to create similar new observations/actions with action `rngme: no_rngme_info &lt;- no_rngme %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select(-acts), by = c(&quot;sovon_bird_reference&quot;, &quot;KleurringNummer&quot;)) %&gt;% mutate(rngme = &quot;rngme&quot;) no_rngme_info %&gt;% select(sovon_bird_reference, KleurringNummer, MetaalringNummer, rngme) Be sure this solution provides a date for all metal rings: no_rngme_info %&gt;% filter(!is.na(Datum)) %&gt;% nrow() == nrow(no_rngme_info) ## [1] TRUE We add these observations to obs_and_acts: obs_and_acts &lt;- obs_and_acts %&gt;% bind_rows(no_rngme_info) and check that all birds (sovon_bird_reference) with a valid metal ring are linked to one and only one rngme action. Exceptions: birds %&gt;% filter(!is.na(sovon_bird_ring_number)) %&gt;% distinct(sovon_bird_reference) %&gt;% anti_join( obs_and_acts %&gt;% filter(!is.na(rngme)) %&gt;% group_by(sovon_bird_reference) %&gt;% count() %&gt;% filter(n == 1), by = &quot;sovon_bird_reference&quot;) If no exceptions arise, then we can proceed to add the field sovon_bird_ring_number to crbirding_birds based on: sovon_bird_reference Date of applying the metal rings Date of applying the color rings End date of the color rings (if exists) This mapping takes into account the fact that some metal rings could have been applied while applying a second color ring or even after. We first retrieve dates of applying the (very first) metal ring: obs_and_acts_rngme &lt;- obs_and_acts %&gt;% filter(!is.na(rngme)) %&gt;% select(sovon_bird_reference, Datum) in order to fill the field sovon_bird_ring_number: crbirding_birds &lt;- obs_and_acts_rngme %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, sovon_bird_ring_number), by = &quot;sovon_bird_reference&quot;) %&gt;% rename(bird_date_begin_metalring = Datum) %&gt;% right_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% mutate(sovon_bird_ring_number = if_else(is.na(sovon_bird_date_end) | (bird_date_begin_metalring &lt; sovon_bird_date_end), sovon_bird_ring_number, NA_character_)) %&gt;% ## remove help column after use select(-bird_date_begin_metalring) %&gt;% ## provide order columns select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_ring_number, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes) Few examples where sovon_bird_reference 74 and 75 refer to birds which got metal ring first: crbirding_birds %&gt;% filter(sovon_bird_reference %in% c(8999, 9028, 74, 75)) Add note about absence of metal ring based on original values in column MetaaalringNummer and the fields sovon_bird_reference, sovon_bird_ring_number: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, MetaalringNummer), by = c(&quot;sovon_bird_reference&quot;)) %&gt;% mutate(sovon_bird_notes = case_when( is.na(sovon_bird_ring_number) &amp; (MetaalringNummer %in% c(&quot;?&quot;, &quot;onbekend&quot;) | is.na(MetaalringNummer)) ~ ifelse(is.na(sovon_bird_notes), &quot;bird_ring_number not available.&quot;, str_c(sovon_bird_notes, &quot;bird_ring_number not available.&quot;, sep = &quot; &quot;)), is.na(sovon_bird_ring_number) &amp; MetaalringNummer == &quot;none&quot; ~ ifelse(is.na(sovon_bird_notes), &quot;bird_ring_number not present.&quot;, str_c(sovon_bird_notes, &quot;bird_ring_number not present.&quot;, sep = &quot; &quot;)), TRUE ~ sovon_bird_notes)) %&gt;% select(-MetaalringNummer) This is how sovon_bird_notes has been updated, limited to birds where changes could happen: crbirding_birds %&gt;% filter(is.na(sovon_bird_ring_number)) %&gt;% select(sovon_bird_reference) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% select(-sovon_bird_shorthand) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) Notice how nothing has been added in sovon_bird_notes for birds getting a metal ring while changing the color ring. 5.2.7 Euring Present values: birds %&gt;% distinct(EuringCode) We assign the euring codes by applying the following mapping: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% distinct(sovon_bird_reference, EuringCode), by = &quot;sovon_bird_reference&quot;) %&gt;% mutate(sovon_bird_euring = recode(EuringCode, &quot;5920&quot; = &quot;05920&quot;, &quot;5910&quot; = &quot;05910&quot;, &quot;5926&quot; = &quot;05926&quot;, &quot;5922&quot; = &quot;05922&quot;, &quot;zz&quot; = NA_character_, &quot;zzz&quot; = NA_character_)) %&gt;% ungroup() Effects of mapping: crbirding_birds %&gt;% distinct(EuringCode, sovon_bird_euring) We remove the help column EuringCode from crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% select(-EuringCode) 5.2.8 Scheme Actual values: birds %&gt;% distinct(MetaalringLandCode) We apply the following mapping: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, MetaalringLandCode), by = &quot;sovon_bird_reference&quot;) %&gt;% mutate(sovon_bird_scheme = recode(MetaalringLandCode, &quot;BE &quot; = &quot;BLB&quot;, &quot;FR&quot; = &quot;FRP&quot;, &quot;NL&quot; = &quot;NLA&quot;, &quot;PT&quot; = &quot;POL&quot;, &quot;UK&quot; = &quot;GBT&quot;)) Effects of mapping: crbirding_birds %&gt;% distinct(MetaalringLandCode, sovon_bird_scheme) We remove the help column MetaalringLandCode from crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% select(-MetaalringLandCode) 5.2.9 Bird sex Bird sex is translated to English. Letter M (Dutch word mannetje) will not change so no need to convert it: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, GeslachtCode), by = &quot;sovon_bird_reference&quot;) %&gt;% mutate(sovon_bird_sex = recode(GeslachtCode, &quot;V&quot; = &quot;F&quot;, ## V(rouwtje) -&gt;F(emale) &quot;O&quot; = &quot;U&quot; ## O(nbekend) -&gt; U(nknown) )) Effects of mapping: crbirding_birds %&gt;% distinct(GeslachtCode, sovon_bird_sex) We remove the help column GeslachtCode from crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% select(-GeslachtCode) 5.2.10 Bird age ringing For mapping the age while applying color rings, we have to follow the Euring standard: see online pdf document at page 14. Bird age at the moment of any observation can be found in column LeeftijdCode of obs_and_acts. Values present: obs_and_acts %&gt;% distinct(LeeftijdCode) We apply a recoding in order to standardize INBOâ€™s vocabulary to the EURING standard: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(bird_age_obs = recode(LeeftijdCode, &quot;PU&quot; = &quot;1&quot;, &quot;AD&quot; = &quot;A&quot;, &quot;J1&quot; = &quot;3&quot;, &quot;I4&quot; = &quot;5&quot;, &quot;I3&quot; = &quot;7&quot;, &quot;I2&quot; = &quot;9&quot;, &quot;I5&quot; = &quot;B&quot;, .missing = &quot;O&quot;)) For mapping the bird age while applying color ring (and first metal ring) we should not only take into account observations with actions rngkl (applying very first color ring) but also actions vang and vangl as applying a new color ring is linked to one of this two actions (see section bird shorthand). The age can be added to crbirding_birds by matching sovon_bird_date_begin of crbirding_birds and Datum of obs_and_acts for each sovon_bird_reference. First we check that this strategy ends up with an one-to-one relation: crbirding_birds %&gt;% left_join(obs_and_acts %&gt;% ## remove rows with Datum equal to NA or field observations filter(!is.na(bird_age_obs) &amp; (!is.na(vang) | !is.na(vangl) | !is.na(rngkl) | !is.na(rngme))) %&gt;% distinct(sovon_bird_reference, Datum, bird_age_obs), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot;)) %&gt;% nrow() == nrow(crbirding_birds) ## [1] TRUE If TRUE then, we proceed with the mapping: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(obs_and_acts %&gt;% ## remove rows with Datum equal to NA or field observations filter(!is.na(bird_age_obs) &amp; (!is.na(vang) | !is.na(vangl) | !is.na(rngkl) | !is.na(rngme))) %&gt;% distinct(sovon_bird_reference, Datum, bird_age_obs), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot;) ) We rename bird_age_obs to sovon_bird_age_ringing: crbirding_birds &lt;- crbirding_birds %&gt;% rename(sovon_bird_age_ringing = bird_age_obs) As examples, the bird age mapping of birds (color) ringed thrice: crbirding_birds %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_age_ringing) %&gt;% filter(sovon_bird_reference %in% bird_reference_triplet) 5.2.11 Bird ID Bird identifiers will be provided by SOVON. NA is given: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_id = NA) 5.2.12 Bird BTO Bird BTO will be provided by SOVON. NA is given: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_bto = NA) 5.2.13 Bird name Some birds, the ones with a GPS tracker, have a name saved in this file. The names are saved in column individual_remarks: uvabits_file &lt;- &quot;https://raw.githubusercontent.com/inbo/bird-tracking/master/data/interim/individuals.csv&quot; uvabits_names &lt;- read_csv(uvabits_file) %&gt;% select(individual_id, ring_number, individual_remarks, everything()) head(uvabits_names) We couple the birds to the correspondent names by color ring: bird_ref_uvabits &lt;- crbirding_birds %&gt;% left_join(uvabits_names %&gt;% select(colour_ring, individual_remarks) %&gt;% filter(!is.na(colour_ring)), by = c(&quot;sovon_bird_shorthand&quot; = &quot;colour_ring&quot;)) %&gt;% rename(sovon_bird_name = individual_remarks) %&gt;% filter(!is.na(sovon_bird_name)) %&gt;% select(sovon_bird_reference, sovon_bird_name) And we assign the names by joining on sovon_bird_reference: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(bird_ref_uvabits, by = &quot;sovon_bird_reference&quot;) Examples: crbirding_birds %&gt;% filter(!is.na(sovon_bird_name)) %&gt;% select(sovon_bird_reference, sovon_bird_name, sovon_bird_shorthand) 5.2.14 Bird birth year This field will be filled by SOVON. NA is given: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_birth_year = NA) 5.3 Finalize user data We have now sufficient information to define the role of any user in crbirding_users. 5.3.1 Add user role to crbirding_users Based on sovon_bird_date_begin we can retrieve the observations linked to applying rings. These observations can be labelled as rngkl (applying very first color ring), rngme (applying very first metal ring) but they can sometimes come from vang or vangl as we have discussed before. We retrieve the ringers by joining crbirding_users and obs_and_acts by WaarnemerNummer: ringers_number &lt;- crbirding_birds %&gt;% select(sovon_bird_reference, sovon_bird_date_begin) %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(rngkl) | !is.na(rngme) | !is.na(vang) | !is.na(vangl)) %&gt;% select(sovon_bird_reference, Datum, WaarnemerNummer), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot;)) %&gt;% filter(!is.na(WaarnemerNummer)) %&gt;% distinct(WaarnemerNummer) %&gt;% pull(WaarnemerNummer) print(paste(&quot;Number of ringers:&quot;, length(ringers_number))) ## [1] &quot;Number of ringers: 29&quot; We assign a R (ringer) to them, O (observer) otherwise: crbirding_users &lt;- crbirding_users %&gt;% mutate(user_role = ifelse(user_reference %in% ringers_number, &quot;R&quot;, &quot;O&quot;)) Number of ringers and observers: crbirding_users %&gt;% group_by(user_role) %&gt;% count() 5.4 Save modified temporary observation data We overwrite the temporary observation data based on the added columns: write_tsv( obs_and_acts, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), na = &quot;&quot;, append = FALSE ) 5.5 Save final user data The desired order of columns in crbirding_users: cr_users_cols &lt;- c( &quot;user_id&quot;, &quot;user_reference&quot;, &quot;user_email&quot;, &quot;user_first_name&quot;, &quot;user_last_name&quot;, &quot;user_address&quot;, &quot;user_postal_code&quot;, &quot;user_place&quot;, &quot;user_country&quot;, &quot;user_language&quot;, &quot;user_role&quot; ) Are all required columns present? all(cr_users_cols %in% names(crbirding_users)) &amp; length(cr_users_cols) == ncol(crbirding_users) ## [1] TRUE We overwrite crbirding_users.tsv with added information: write_tsv(crbirding_users, path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.tsv&quot;), na = &quot;&quot;, append = FALSE ) 5.6 Save final ring data SOVON is interested in color ring versions with a dot if dots are present, even if their purpose is just improving readibility. We can overwrite sovon_bird_shorthand with control column sovon_bird_shorthand_pt: crbirding_birds &lt;- crbirding_birds %&gt;% select(-sovon_bird_shorthand) %&gt;% rename(sovon_bird_shorthand = sovon_bird_shorthand_pt) Remove prefix sovon_: names(crbirding_birds) &lt;- str_remove_all(names(crbirding_birds), pattern = &quot;sovon_&quot;) The desired order of columns in crbirding_birds: cr_birds_cols &lt;- c( &quot;bird_id&quot;, &quot;bird_reference&quot;, &quot;bird_euring&quot;, &quot;bird_bto&quot;, &quot;bird_shorthand&quot;, &quot;bird_scheme&quot;, &quot;bird_ring_number&quot;, &quot;bird_name&quot;, &quot;bird_sex&quot;, &quot;bird_birth_year&quot;, &quot;bird_date_begin&quot;, &quot;bird_date_end&quot;, &quot;bird_age_ringing&quot;, &quot;bird_notes&quot; ) Are all required columns present? all(cr_birds_cols %in% names(crbirding_birds)) &amp; length(cr_birds_cols) == ncol(crbirding_birds) ## [1] TRUE Set column order: crbirding_birds &lt;- crbirding_birds %&gt;% select(cr_birds_cols) Preview data: crbirding_birds %&gt;% head(n = 10) Save to text file (tab separated value): write_tsv( crbirding_birds, path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_birds.tsv&quot;), na = &quot;&quot; ) "],
["4_observations.html", "6 Map observation data 6.1 Read data 6.2 Map color observation data 6.3 Save final observation data", " 6 Map observation data 6.1 Read data 6.1.1 Read temporary observation data We start from the tempoary observation data saved as TSV file in data\\interim: obs_and_acts &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), guess_max = 500000 ) 6.1.2 Read action data Import action codes and relative meaning: actions_meaning &lt;- read_tsv(here::here(&quot;data&quot;, &quot;input&quot;, &quot;actions_meaning.tsv&quot;)) 6.1.3 Read processed ring data We import finalized ring data from ./data/processed: crbirding_birds &lt;- read_tsv( here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_birds.tsv&quot;), guess_max = 50000 ) 6.1.4 Read temporary ring data We will need some columns from original INBO ring data. We import the temporary ring data as well: birds &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;birds.tsv&quot;), guess_max = 50000 ) 6.1.5 Read processed user data We import finalized user data from ./data/processed: crbirding_users &lt;- read_tsv( here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.tsv&quot;), guess_max = 50000 ) 6.1.6 Read list workers in bird shelters workers_bird_shelters &lt;- read_tsv( here::here(&quot;data&quot;, &quot;input&quot;, &quot;workers_in_bird_shelters.tsv&quot;) ) 6.2 Map color observation data 6.2.1 Extract action codes Actions present in obs_and_acts : acts &lt;- actions_meaning$Code acts &lt;- acts[acts %in% names(obs_and_acts)] acts ## [1] &quot;rngkl&quot; &quot;rngme&quot; &quot;klgev&quot; &quot;br&quot; &quot;vang&quot; &quot;dood&quot; &quot;klweg&quot; &quot;veld&quot; ## [9] &quot;meweg&quot; &quot;me&quot; &quot;vangl&quot; &quot;ziek&quot; 6.2.2 Observation ID The field sovon_observation_id is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_id = NA) 6.2.3 Observation reference The observation reference is an unique identifier assigned to each observation. This field exists already: Nummer. obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_reference = Nummer) 6.2.4 Observation date The date is saved in column Datum. We copy it in required column sovon_observation_date: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_date = Datum) 6.2.5 Observation time There is no observation time in obs_and_acts. NA is given to sovon_observation_time: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_time = NA) 6.2.6 Observation latitude Observation latitude should be converted to decimal degrees: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_lat = conv_unit( str_c(PlaatsBreedtegraadGraden, PlaatsBreedtegraadMinuten, PlaatsBreedtegraadSeconden, sep = &quot; &quot;), from = &#39;deg_min_sec&#39;, to = &#39;dec_deg&#39;) ) 6.2.7 Observation longitude Observation longitude should be converted to decimal degrees: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_lng = conv_unit( str_c(PlaatsLengtegraadGraden, PlaatsLengtegraadMinuten, PlaatsLengtegraadSeconden, sep = &quot; &quot;), from = &#39;deg_min_sec&#39;, to = &#39;dec_deg&#39;) ) 6.2.8 Observation location Aggregate information about observation location. We follow the following structure: PlaatsGemeente [+ , + PlaatsToponym [+ : + PlaatsToponymDetail]]: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_location = ifelse(!is.na(PlaatsToponym), str_c(PlaatsGemeente, PlaatsToponym, sep = &quot;, &quot;), paste(PlaatsGemeente))) %&gt;% mutate( sovon_observation_location = ifelse(!is.na(PlaatsToponymDetail), str_c(sovon_observation_location, PlaatsToponymDetail, sep = &quot;: &quot;), paste(sovon_observation_location))) 6.2.9 Check bird The field sovon_check_bird is provided by SOVON. NA is given: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_check_bird = NA) 6.2.10 User ID The field sovon_user_id is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_user_id = NA) 6.2.11 User reference The field sovon_user_reference links observations to users and it is equal to field user_reference in user data: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_user_reference = WaarnemerNummer) 6.2.12 Observer The field sovon_melder is equal to user_first_name and user_last_name in users: obs_and_acts &lt;- obs_and_acts %&gt;% left_join( crbirding_users %&gt;% select(user_reference, user_first_name, user_last_name), by = c(&quot;WaarnemerNummer&quot; = &quot;user_reference&quot;)) %&gt;% mutate(sovon_melder = case_when( is.na(user_first_name) &amp; !is.na(user_last_name) ~ user_last_name, !is.na(user_first_name) &amp; is.na(user_last_name) ~ user_first_name, !is.na(user_first_name) &amp; !is.na(user_last_name) ~ str_c(user_first_name, user_last_name, sep = &quot; &quot;), is.na(user_first_name) &amp; is.na(user_last_name) ~ NA_character_)) %&gt;% select(-c(user_first_name, user_last_name)) 6.2.13 Observer e-mail The field sovon_melder_email is equal to user_email in users: obs_and_acts &lt;- obs_and_acts %&gt;% left_join( crbirding_users %&gt;% select(user_reference, user_email), by = c(&quot;WaarnemerNummer&quot; = &quot;user_reference&quot;)) %&gt;% mutate(sovon_melder_email = user_email) 6.2.14 Reporter - ringer number The field sovon_melder_ringersnummer is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_melder_ringersnummer = NA) 6.2.15 Ring number The field sovon_ring_number contains information about the metal ring number, in the same format as in field bird_ring_number of crbirding_birds. As explained in the mapping of field bird_ring_number of crbirding_birds, INBO database is a color ring database. This field is not accurately mapped and we will leave it empty. obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_ring_number = NA_character_) 6.2.16 Observation status Adding the EURING status information arises by the need of mapping the observations with action code br and vang: actions_meaning %&gt;% filter(Code %in% c(&quot;br&quot;, &quot;vang&quot;)) The actions br and vang refer to status breeding in EURING system. Based on the scheme at page 16 of EURING Exchange Code 2000+ document, we define the following mapping: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_status = case_when( !is.na(br) | !is.na(vang) ~ &quot;N&quot;, LeeftijdCode == &quot;PU&quot; ~ &quot;-&quot;, TRUE ~ &quot;U&quot; )) 6.2.17 Condition The SOVON field condition is mapped following the scheme at page 22 of EURING Exchange Code 2000+ document. The following actions are mapped as follows in order of priority: dood: condition = 1 ziek: condition = 4 rngkl, rngme, vang, vangl: condition = 8 veld, me, meweg, br: condition = 7 obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_condition = case_when( !is.na(dood) ~ 1, !is.na(ziek) ~ 4, !is.na(rngkl) | !is.na(rngme) | !is.na(vang) | !is.na(vangl) ~ 8, !is.na(veld) | !is.na(me) | !is.na(meweg) | !is.na(br) ~ 7 ) ) The observations of sick birds not anymore released should get condition equal to 5. These observations are linked to the very last ziek action and followed by an observation with action dood. Not only, but the observer should be a worker of a bird shelter, in workers_bird_shelters. Reference number of observations with condition 5: last_sick_df &lt;- obs_and_acts %&gt;% filter(sovon_melder_ringersnummer %in% workers_bird_shelters$user_reference) %&gt;% filter(ziek == &quot;ziek&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_observation_date == max(sovon_observation_date)) %&gt;% ungroup() %&gt;% select(sovon_observation_reference, sovon_bird_reference, sovon_observation_date) %&gt;% rename(last_sick_date = sovon_observation_date, obs_ref = sovon_observation_reference) dead_df &lt;- obs_and_acts %&gt;% filter(dood == &quot;dood&quot;) %&gt;% select(sovon_bird_reference, sovon_observation_date) %&gt;% rename(dead_date = sovon_observation_date) last_sick_df &lt;- last_sick_df %&gt;% filter(sovon_bird_reference %in% dead_df$sovon_bird_reference) %&gt;% left_join(dead_df, by = &quot;sovon_bird_reference&quot;) condition_5_obs_ref &lt;- obs_and_acts %&gt;% filter(sovon_bird_reference %in% last_sick_df$sovon_bird_reference) %&gt;% left_join(last_sick_df, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_observation_date &gt;= last_sick_date &amp; sovon_observation_date &lt; dead_date) %&gt;% count() %&gt;% ## only one ziek action present -&gt; no obs possible if not released filter(n == 1) %&gt;% left_join(last_sick_df, by = c(&quot;sovon_bird_reference&quot;)) %&gt;% pull(obs_ref) Number of observations selected to get condition code 5: length(condition_5_obs_ref) ## [1] 0 Assign condition value 5 to these observations: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_condition = if_else( sovon_observation_reference %in% condition_5_obs_ref, 5, sovon_condition) ) Preview: obs_and_acts %&gt;% filter(sovon_condition == 5) %&gt;% select(sovon_observation_reference, sovon_bird_reference, sovon_observation_date, acts) 6.2.18 MRI: metal ring information Metal ring information is an integer between 0 and 9. A table can be found at page 8 of EURING Exchange Code 2000+ document. However, SOVON uses this field to map the observations referring to the applying of any kind of ring, either color or metal, as their database is purely focussed on color rings and due to a missing field in the EURING Exchange Code 2000+ specific for color rings. Some actions are related to this field and are mapped as follows: rngkl: MRI = 1 rngme: MRI = 1 veld: MRI = 4, me: MRI = 4, vang : MRI = 1,4 or 5 vangl : MRI = 1,4 or 5 We initialize sovon_MRI as an empty column: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_MRI = NA_integer_) Position of metal ring: birds %&gt;% distinct(MetaalringPlaats) where LL means left leg and RL means right leg. So, we exclude MRI values 2, Metal ring added, definitely on tarsus, and 3, Metal ring added, definitely above tarsus. All observations linked to rngme or rngkl get MRI equal to 1: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_MRI = ifelse(!is.na(rngme) | !is.na(rngkl), 1, sovon_MRI)) Preview of changes: obs_and_acts %&gt;% filter(sovon_MRI == 1) %&gt;% select(sovon_observation_reference, sovon_MRI, rngme, rngkl) %&gt;% head(n = 50) MRI is 4 for observations linked to action me (metal ring read) and veld (field observation, equivalent of color ring read): obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_MRI = ifelse(!is.na(me) | !is.na(veld), 4, sovon_MRI)) Preview of changes: obs_and_acts %&gt;% filter(sovon_MRI == 4) %&gt;% select(sovon_observation_reference, sovon_MRI, me, veld) %&gt;% head(n = 50) MRI is 0 for observations of birds without any ring, thus linked to actions meweg (metal ring missing) and klweg (color ring missing): obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_MRI = ifelse(!is.na(meweg) &amp; !is.na(klweg), 0 , sovon_MRI)) Preview of changes: obs_and_acts %&gt;% filter(sovon_MRI == 0) %&gt;% select(sovon_observation_reference, sovon_MRI, me, veld) %&gt;% head(n = 50) The actions vang and vangl related to a change of color ring can be found by checking the date of the observations without action rgnkl or rngme and with same date of bird_date_begin in crbirding_birds: obs_ref_MRI_5 &lt;- obs_and_acts %&gt;% filter((!is.na(vang) | !is.na(vangl)) &amp; is.na(rngkl) &amp; is.na(rngme)) %&gt;% inner_join(crbirding_birds %&gt;% select(bird_reference, bird_date_begin), by = c(&quot;sovon_bird_reference&quot; = &quot;bird_reference&quot;, &quot;sovon_observation_date&quot; = &quot;bird_date_begin&quot;)) %&gt;% arrange(sovon_bird_reference, sovon_observation_date) %&gt;% pull(sovon_observation_reference) obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_MRI = ifelse(sovon_observation_reference %in% obs_ref_MRI_5, 5, sovon_MRI) ) We can now assign value 4 to the other observations with action vang: vang_no_change_color_ring &lt;- obs_and_acts %&gt;% filter((!is.na(vang) | !is.na(vangl)) &amp; is.na(rngkl) &amp; is.na(rngme)) %&gt;% filter(!sovon_observation_reference %in% obs_ref_MRI_5) %&gt;% pull(sovon_observation_reference) obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_MRI = ifelse( sovon_observation_reference %in% vang_no_change_color_ring, 4, sovon_MRI ) ) The mapping of MRI related to observations with action vang is completed: obs_and_acts %&gt;% filter(!is.na(vang)) %&gt;% select(sovon_bird_reference, sovon_observation_reference, sovon_MRI, vang) %&gt;% arrange(sovon_bird_reference, sovon_observation_reference) Same for observations with actions vangl: obs_and_acts %&gt;% filter(!is.na(vangl)) %&gt;% select(sovon_bird_reference, sovon_observation_reference, sovon_MRI, vangl) %&gt;% arrange(sovon_bird_reference, sovon_observation_reference) Check that no observations with action vang or vangl are left without a MRI value: obs_and_acts %&gt;% filter(!is.na(vang) | !is.na(vangl)) %&gt;% filter(is.na(sovon_MRI)) %&gt;% nrow() ## [1] 0 Action combinations without MRI: obs_and_acts %&gt;% filter(is.na(sovon_MRI)) %&gt;% select(acts) %&gt;% distinct() 6.2.19 Mapping of INBO actions to status, condition and MRI The fields sovon_status, sovon_condition and sovon_MRI should cover all possible action combinations present in observations. Consequently, no observations should have all three fields empty: obs_and_acts %&gt;% filter(is.na(sovon_MRI) &amp; is.na(sovon_condition) &amp; is.na(sovon_status)) %&gt;% nrow() ## [1] 0 General mapping of all action combinations present in observations: obs_and_acts %&gt;% select(acts, sovon_status, sovon_condition, sovon_MRI) %&gt;% distinct() 6.2.20 Bird age ringing The required field bird_age_ringing should be filled with the age of the bird while ringing. We first add the age of ringing to observations with same date of applying a ring from crbirding_birds: obs_ringing &lt;- obs_and_acts %&gt;% left_join(crbirding_birds %&gt;% select(bird_reference, bird_date_begin, bird_age_ringing), by = c(&quot;sovon_bird_reference&quot; = &quot;bird_reference&quot;, &quot;sovon_observation_date&quot; = &quot;bird_date_begin&quot;)) %&gt;% filter(!is.na(bird_age_ringing)) %&gt;% select(sovon_bird_reference, sovon_observation_date, bird_age_ringing) %&gt;% rename(age_ringing = bird_age_ringing, date_ringing = sovon_observation_date) obs_ringing %&gt;% head() The age while ringing can be added to observations occurring later than the very first ringing: obs_after_ringing &lt;- obs_and_acts %&gt;% left_join(obs_ringing, by = c(&quot;sovon_bird_reference&quot;)) %&gt;% group_by(sovon_bird_reference, sovon_observation_date) %&gt;% filter(sovon_observation_date &gt;= date_ringing) %&gt;% filter(date_ringing == max(date_ringing)) %&gt;% distinct() %&gt;% ungroup() %&gt;% mutate(sovon_bird_age_ringing = age_ringing) %&gt;% select(-c(date_ringing, age_ringing)) Otherwise it will be left empty: obs_before_ringing &lt;- obs_and_acts %&gt;% anti_join(obs_after_ringing, by = names(obs_and_acts)) %&gt;% mutate(sovon_bird_age_ringing = as.POSIXct(NA)) obs_before_ringing %&gt;% select(sovon_bird_reference, ) %&gt;% head(n = 10) Merge the two subsets back together: obs_and_acts &lt;- bind_rows(obs_after_ringing, obs_before_ringing) %&gt;% arrange(sovon_observation_reference) 6.2.21 Bird sex The field sovon_bird_sex is equal to the bird sex in ring data: obs_and_acts &lt;- obs_and_acts %&gt;% left_join(crbirding_birds %&gt;% select(bird_reference, bird_sex), by = c(&quot;sovon_bird_reference&quot; = &quot;bird_reference&quot;)) %&gt;% rename(sovon_bird_sex = bird_sex) 6.2.22 Capture The field sovon_observation_is_capture can be filled by evaluating the link of observations to actions vang or vangl: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_is_capture = if_else( !is.na(vang) | !is.na(vangl), 1, 0 ) ) 6.2.23 Bird ID The field sovon_bird_id is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_bird_id = NA) 6.2.24 Observation notes We copy the notes in Opmerking to SOVON field sovon_observation_notes: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_notes = Opmerking) We add a dot at the end of the notes if not present already: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( !is.na(sovon_observation_notes) &amp; str_length(sovon_observation_notes) &gt; 0, if_else(str_sub(sovon_observation_notes, -1) != &quot;.&quot;, str_c(sovon_observation_notes, &quot;.&quot;, sep = &quot;&quot;), sovon_observation_notes), sovon_observation_notes) ) We also add the prefix &quot;INBO original notes: &quot;: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( !is.na(sovon_observation_notes) &amp; str_length(sovon_observation_notes) &gt; 0, str_c(&quot;INBO original notes: &quot;, sovon_observation_notes, sep = &quot; &quot;), sovon_observation_notes) ) We add the note no_color_ring. to observations linked to action klweg: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( !is.na(klweg), if_else(is.na(sovon_observation_notes), &quot;no_color_ring.&quot;, paste(&quot;no_color_ring.&quot;, sovon_observation_notes, sep = &quot; &quot;)), sovon_observation_notes) ) Preview: obs_and_acts %&gt;% filter(!is.na(klweg)) %&gt;% select(sovon_observation_notes) %&gt;% head() We add the note color_ring_added. to observations linked to action rngkl: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( !is.na(rngkl), if_else(is.na(sovon_observation_notes), &quot;color_ring_added.&quot;, paste(&quot;color_ring_added.&quot;, sovon_observation_notes, sep = &quot; &quot;)), sovon_observation_notes) ) Preview: obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select(sovon_observation_notes) %&gt;% head() 6.3 Save final observation data Select the required columns, starting with prefix sovon_: crbirding_observations &lt;- obs_and_acts %&gt;% select(starts_with(&quot;sovon&quot;)) Remove prefix sovon_: names(crbirding_observations) &lt;- str_remove_all(names(crbirding_observations), pattern = &quot;sovon_&quot;) The desired order of columns in crbirding_observations: cr_obs_cols &lt;- c( &quot;user_id&quot;, &quot;user_reference&quot;, &quot;bird_id&quot;, &quot;bird_reference&quot;, &quot;observation_id&quot;, &quot;observation_reference&quot;, &quot;observation_date&quot;, &quot;observation_time&quot;, &quot;observation_lat&quot;, &quot;observation_lng&quot;, &quot;observation_location&quot;, &quot;observation_is_capture&quot;, &quot;observation_notes&quot;, &quot;check_bird&quot;, &quot;MRI&quot;, &quot;melder&quot;, &quot;melder_email&quot;, &quot;melder_ringersnummer&quot;, &quot;ring_number&quot;, &quot;condition&quot;, &quot;status&quot;, &quot;bird_age_ringing&quot;, &quot;bird_sex&quot; ) Are all required columns present? all(cr_obs_cols %in% names(crbirding_observations)) &amp; length(cr_obs_cols) == ncol(crbirding_observations) ## [1] TRUE Set column order: crbirding_observations &lt;- crbirding_observations %&gt;% select(cr_obs_cols) Preview data (without personal observer data for privcay reasons): crbirding_observations %&gt;% select(-c(melder, melder_email)) %&gt;% head(n = 10) Save to text file (tab separated value): write_csv( crbirding_observations, path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_observations.tsv&quot;), na = &quot;&quot; ) "]
]
