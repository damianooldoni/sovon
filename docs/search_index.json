[["index.html", "Mapping INBO color ring data to SOVON format 1 Intro", " Mapping INBO color ring data to SOVON format Damiano Oldoni 2020-10-05 1 Intro This document contains and describes all the steps in mapping INBO color ring data to SOVON format. By running this document in R, it will create all the necessary data files. Settings to access INBO database are necessary. Load libraries: library(DBI) # To connect to database library(odbc) # To connect to database library(tidyverse) # To do datascience library(tidylog) # To provide feedback on dplyr functions library(tidyselect) # To select columns smartly library(measurements) # To convert measurement units library(here) # To find files library(lubridate) # To ease working with dates The output of the data processing consists of three dataframes saved as comma separated files (csv) in folder data/processed/: crbirding_users: user data (not loaded to GitHub for privacy reasons) crbirding_birds: ring data crbirding_observations: observation data "],["1_preprocessing.html", "2 Import and preprocess INBO color ring data 2.1 Extract data from INBO kleurring database 3 Pre-processing 3.1 Preview raw data 3.2 Check primary key consistency 3.3 Remove hard returns 3.4 Check spaces in birds 3.5 Check duplicates WaarnemingNummer-AktieCode 3.6 Merge observations and actions 3.7 Check spaces in obs_and_acts 3.8 Check presence action code 3.9 Check combinations of actions with klgev or megev 3.10 Remove data labelled as FOUT 3.11 Check color rings: uppercase 3.12 Check keys KleurringNummer (obs) - Nummer (birds) 3.13 Check duplicates in date of applying rings 3.14 Add rngme if not present 3.15 Check age while applying rings 3.16 Check bird sex inconsistencies 3.17 Handle information about metal ring number 3.18 Solve GPS tracker IDs 3.19 Check inconsistencies between users and observers 3.20 Remove data of common shelduck 3.21 Remove rings BGAH, BRAB and EAU 3.22 Check date of dood 3.23 Save preprocessed data", " 2 Import and preprocess INBO color ring data 2.1 Extract data from INBO kleurring database 2.1.1 Connection to INBO database Get connection settings from config.yml (not included to the reposiory) and connect to database: meeuwen &lt;- config::get(&quot;meeuwen&quot;) conn &lt;- dbConnect(odbc::odbc(), driver = meeuwen$driver, server = meeuwen$server, database = meeuwen$database, port = meeuwen$port, trusted_connection = meeuwen$trusted_connection ) 2.1.2 Extract user data First, we extract data about users from INBO kleurring database: users &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.tblWaarnemer&quot;) %&gt;% as_tibble() 2.1.3 Extract color ring data birds &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.tblKleurring&quot;) %&gt;% as_tibble() We extract the color table in order to know the meaning of the color abbreviations in fields RingKleurCode and InscriptieKleurCode in birds. color_table &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.cdeKleur&quot;) %&gt;% as_tibble() color_table We also extract the ring position (left or right leg) and the inscription orientation: ring_position_table &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.cdeRingPlaats&quot;) %&gt;% as_tibble() ring_position_table 2.1.4 Extract observation data INBOs observation data contain a text type field: Opmerking. Text type is deprecated and an error will be returned if we perform the standard SQL query \"SELECT * FROM dbo.tblWaarneming\". So, we need an ad-hoc query: obs &lt;- dbGetQuery( conn, &quot;SELECT Nummer, Datum, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, MetaalringNummer, MetaalringPlaats, PlaatsGemeente, PlaatsToponym, PlaatsToponymDetail, Convert(nvarchar(4000),Opmerking) as Opmerking, WaarnemerNummer, PlaatsLengtegraadGraden, PlaatsLengtegraadMinuten, PlaatsLengtegraadSeconden, PlaatsBreedtegraadGraden, PlaatsBreedtegraadMinuten, PlaatsBreedtegraadSeconden, PlaatsLengtegraadRichtingCode, PlaatsBreedtegraadRichtingCode, PlaatsLandCode, MetaalringLandCode, BevestigingDatum, PlaatsProvincie, AanmaakDatum, WijzigDatum FROM dbo.tblWaarneming&quot; ) %&gt;% as_tibble() Table tblWaarnemingAktie is also important because contains informations about the actions taken at each observation: obs_actions &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.tblWaarnemingAktie&quot;) The action codes are described in table dbo.cdeAktie: actions_meaning &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.cdeAktie&quot;) actions_meaning Close connection to server: dbDisconnect(conn) 2.1.5 Import control data From UVABIT repository, we copied a text file containing the mapping of GPS ids: map_gps_path &lt;- here::here(&quot;data&quot;, &quot;input&quot;, &quot;map_gps_id_to_color_ring.tsv&quot;) map_gps &lt;- read_tsv(map_gps_path) %&gt;% mutate(sovon_bird_notes = &quot;uvabits_gps_tag.&quot;) ## Parsed with column specification: ## cols( ## gps_id = col_character(), ## color_ring = col_character() ## ) ## mutate: new variable &#39;sovon_bird_notes&#39; (character) with one unique value and 0% NA map_gps %&gt;% head() This file will be used later in this same document. 3 Pre-processing 3.1 Preview raw data For privacy reasons users data cannot be shown. Users data refer to the following fields: colnames(users) ## [1] &quot;Nummer&quot; &quot;Familienaam&quot; &quot;Voornaam&quot; &quot;Adres&quot; ## [5] &quot;Postcode&quot; &quot;Gemeente&quot; &quot;Email&quot; &quot;Telefoon&quot; ## [9] &quot;Wachtwoord&quot; &quot;Gebruikersnaam&quot; &quot;LandCode&quot; &quot;TelefoonMobiel&quot; ## [13] &quot;TelefoonWerk&quot; Preview birds data: birds %&gt;% head() Preview observations data: obs %&gt;% head() Preview observation actions data: obs_actions %&gt;% head() 3.2 Check primary key consistency The primary key of each table shuold never be left empty and should contain unique values. 3.2.1 Users Primary key: column Nummer. Users with empty values: users %&gt;% filter(is.na(Nummer)) ## filter: removed all rows (100%) Users with not unique values of Nummer: users %&gt;% group_by(Nummer) %&gt;% count() %&gt;% filter(n &gt; 1) ## group_by: one grouping variable (Nummer) ## count: now 2,038 rows and 2 columns, one group variable remaining (Nummer) ## filter (grouped): removed all rows (100%) 3.2.2 Birds Primary key: column Nummer. Birds with empty values: birds %&gt;% filter(is.na(Nummer)) ## filter: removed all rows (100%) Birds with not unique values of Nummer: birds %&gt;% group_by(Nummer) %&gt;% count() %&gt;% filter(n &gt; 1) ## group_by: one grouping variable (Nummer) ## count: now 11,308 rows and 2 columns, one group variable remaining (Nummer) ## filter (grouped): removed all rows (100%) 3.2.3 Observations Primary key: column Nummer. Observations with empty values: obs %&gt;% filter(is.na(Nummer)) ## filter: removed all rows (100%) Observations with not unique values of Nummer: obs %&gt;% group_by(Nummer) %&gt;% count() %&gt;% filter(n &gt; 1) ## group_by: one grouping variable (Nummer) ## count: now 151,335 rows and 2 columns, one group variable remaining (Nummer) ## filter (grouped): removed all rows (100%) 3.2.4 Actions Primary key: column Nummer. Actions with empty values: obs_actions %&gt;% filter(is.na(Nummer)) ## filter: removed all rows (100%) Observations with not unique values of Nummer: obs_actions %&gt;% group_by(Nummer) %&gt;% count() %&gt;% filter(n &gt; 1) ## group_by: one grouping variable (Nummer) ## count: now 161,995 rows and 2 columns, one group variable remaining (Nummer) ## filter (grouped): removed all rows (100%) 3.3 Remove hard returns 3.3.1 Remove hard returns in users Remove hard returns \\r\\n in users: users &lt;- users %&gt;% mutate_if(is.character, ~ str_replace_all(., &quot;[\\\\r\\\\n]&quot;, &quot;&quot;)) ## mutate_if: changed one value (&lt;1%) of &#39;Adres&#39; (0 new NA) ## changed one value (&lt;1%) of &#39;Email&#39; (0 new NA) 3.3.2 Remove hard returns in birds Remove hard returns \\r\\n in birds: birds &lt;- birds %&gt;% mutate_if(is.character, ~ str_replace_all(., &quot;[\\\\r\\\\n]&quot;, &quot;&quot;)) ## mutate_if: no changes 3.3.3 Remove hard returns in observations Remove hard returns \\r\\n in observations: obs &lt;- obs %&gt;% mutate_if(is.character, ~ str_replace_all(., &quot;[\\\\r\\\\n]&quot;, &quot;&quot;)) ## mutate_if: changed one value (&lt;1%) of &#39;PlaatsToponymDetail&#39; (0 new NA) ## changed 1,030 values (1%) of &#39;Opmerking&#39; (0 new NA) 3.4 Check spaces in birds No spaces should be present in any column of birds: map_dfr(birds, ~ mutate(birds, space_detect = str_detect(., pattern = &quot; &quot;))) %&gt;% filter(space_detect == TRUE) ## mutate: new variable &#39;space_detect&#39; (logical) with one unique value and 0% NA ## mutate: new variable &#39;space_detect&#39; (logical) with one unique value and 0% NA ## mutate: new variable &#39;space_detect&#39; (logical) with one unique value and 0% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 9% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 1% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 1% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and &lt;1% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and &lt;1% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and &lt;1% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 9% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 6% NA ## filter: removed all rows (100%) Remove all spaces: birds &lt;- birds %&gt;% mutate_all(list(~ str_replace_all(., &quot; &quot;, &quot;&quot;))) ## mutate_all: no changes 3.5 Check duplicates WaarnemingNummer-AktieCode The action acronym is contained in column AktieCode. Observations and their actions are linked via columns WaarnemingNummer (in actions) and Nummer (in obs). No duplicates WaarnemingNummer-AktieCode should exist: obs_actions %&gt;% group_by(WaarnemingNummer, AktieCode) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) ## group_by: 2 grouping variables (WaarnemingNummer, AktieCode) ## add_tally (grouped): new variable &#39;n&#39; (integer) with one unique value and 0% NA ## ungroup: no grouping variables ## filter: removed all rows (100%) Otherwise they should be removed: obs_actions &lt;- obs_actions %&gt;% distinct(WaarnemingNummer, AktieCode, .keep_all = TRUE) ## distinct: no rows removed 3.6 Merge observations and actions In order to ease the mapping of birds and observations, we first remove columns will be never used: obs_actions &lt;- obs_actions %&gt;% select(-c( Nummer, AanmaakDatum, WijzigDatum )) ## select: dropped 3 variables (Nummer, AanmaakDatum, WijzigDatum) Then we spread action codes to columns: obs_actions &lt;- obs_actions %&gt;% pivot_wider(names_from = AktieCode, values_from = AktieCode) ## pivot_wider: reorganized (AktieCode) into (rngme, rngkl, veld, dood, vang, ) [was 161995x2, now 151335x13] The following combinations occur: combinations_actions &lt;- obs_actions %&gt;% select(-WaarnemingNummer) %&gt;% distinct() ## select: dropped one variable (WaarnemingNummer) ## distinct: removed 151,305 rows (&gt;99%), 30 rows remaining combinations_actions Actions present in database: acts &lt;- names(combinations_actions) acts ## [1] &quot;rngme&quot; &quot;rngkl&quot; &quot;veld&quot; &quot;dood&quot; &quot;vang&quot; &quot;klgev&quot; &quot;br&quot; &quot;vangl&quot; &quot;klweg&quot; ## [10] &quot;me&quot; &quot;meweg&quot; &quot;ziek&quot; Actions described in actions_meaning never used: actions_meaning %&gt;% filter(!Code %in% acts) ## filter: removed 12 rows (92%), one row remaining We add action code columns to observations in order to have a unique dataframe for observations: obs_and_acts &lt;- obs %&gt;% left_join(obs_actions, by = c(&quot;Nummer&quot; = &quot;WaarnemingNummer&quot;)) ## left_join: added 12 columns (rngme, rngkl, veld, dood, vang, ) ## &gt; rows only in x 0 ## &gt; rows only in y ( 0) ## &gt; matched rows 151,335 ## &gt; ========= ## &gt; rows total 151,335 Preview: head(obs_and_acts, n = 100) 3.7 Check spaces in obs_and_acts No spaces should be present in character columns of obs_and_acts except for columns related to place description (Plaats*), datums (*Datum) and notes (Opmerking): map_dfr(obs_and_acts %&gt;% select_if(is.character) %&gt;% select(-c( starts_with(&quot;Plaats&quot;), Opmerking, ends_with(&quot;Datum&quot;) )), ~ mutate(obs_and_acts, space_detect = str_detect(., pattern = &quot; &quot;))) %&gt;% filter(space_detect == TRUE) %&gt;% arrange(Nummer) ## select_if: dropped 12 variables (Nummer, Datum, WaarnemerNummer, PlaatsLengtegraadGraden, PlaatsLengtegraadMinuten, ) ## select: dropped 8 variables (PlaatsGemeente, PlaatsToponym, PlaatsToponymDetail, Opmerking, PlaatsLengtegraadRichtingCode, ) ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 28% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 40% NA ## mutate: new variable &#39;space_detect&#39; (logical) with one unique value and 0% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 89% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 99% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 99% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 99% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 93% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 93% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 13% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and &gt;99% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and &gt;99% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and &gt;99% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and 96% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and &gt;99% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and &gt;99% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and &gt;99% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and &gt;99% NA ## mutate: new variable &#39;space_detect&#39; (logical) with 2 unique values and &gt;99% NA ## filter: removed all rows (100%) Remove spaces if present: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(across( !starts_with(&quot;Plaats&quot;) &amp; !ends_with(&quot;Datum&quot;) &amp; !one_of(&quot;Opmerking&quot;), ~ str_replace_all(., &quot; &quot;, &quot;&quot;) )) ## mutate: converted &#39;Nummer&#39; from integer to character (0 new NA) ## converted &#39;WaarnemerNummer&#39; from integer to character (0 new NA) 3.8 Check presence action code All observations should also have an action code: no_actions &lt;- obs_and_acts %&gt;% filter_at(vars_select(names(obs_and_acts), one_of(acts)), all_vars(is.na(.))) ## filter_at: removed all rows (100%) no_actions Observation without it will be removed: obs_and_acts &lt;- obs_and_acts %&gt;% filter(!Nummer %in% no_actions$Nummer) ## filter: no rows removed 3.9 Check combinations of actions with klgev or megev klgev should never occur with other active actions like vang, vangl or action dood. Is this true? acts_with_klgev &lt;- obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% select(all_of(acts)) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) %&gt;% names() ## filter: removed 151,297 rows (&gt;99%), 38 rows remaining ## select: dropped 27 variables (Nummer, Datum, EuringCode, LeeftijdCode, KleurringNummer, ) ## distinct: removed 37 rows (97%), one row remaining ## select_if: dropped 11 variables (rngme, rngkl, veld, dood, vang, ) acts_with_klgev &lt;- acts_with_klgev[acts_with_klgev != &quot;klgev&quot;] length(acts_with_klgev) == 0 ## [1] TRUE Same for megev: if (&quot;megev&quot; %in% acts) { acts_with_megev &lt;- obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% select(all_of(acts)) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) %&gt;% names() acts_with_megev &lt;- acts_with_megev[acts_with_megev != &quot;megev&quot;] length(acts_with_megev) == 0 } else { message(&quot;No &#39;megev&#39; actions found.&quot;) } ## No &#39;megev&#39; actions found. 3.10 Remove data labelled as FOUT There are observations judged as error. They are marked byKleurringNummmer equal to FOUT: obs_and_acts %&gt;% filter(KleurringNummer == &quot;FOUT&quot;) ## filter: removed 150,944 rows (&gt;99%), 391 rows remaining The value FOUT is also present in birds: birds %&gt;% filter(Nummer == &quot;FOUT&quot;) ## filter: removed 11,307 rows (&gt;99%), one row remaining These data are related to observations judged not correct (FOUT: error) by the INBO experts and administrator of the database. Thus, at the moment, we remove these data (discussion about this issue here) from observations: obs_and_acts &lt;- obs_and_acts %&gt;% filter(KleurringNummer != &quot;FOUT&quot;) ## filter: removed 391 rows (&lt;1%), 150,944 rows remaining and from birds: birds &lt;- birds %&gt;% filter(Nummer != &quot;FOUT&quot;) ## filter: removed one row (&lt;1%), 11,307 rows remaining 3.11 Check color rings: uppercase Bird color rings codes are uppercase. Exceptions: birds %&gt;% filter(Nummer != toupper(Nummer) | NummerNieuw != toupper(NummerNieuw) | NummerDesc != toupper(NummerDesc)) ## filter: removed all rows (100%) are converted to uppercase: birds &lt;- birds %&gt;% mutate( Nummer = toupper(Nummer), NummerNieuw = toupper(NummerNieuw), NummerDesc = toupper(NummerDesc) ) ## mutate: no changes The same holds true for KleurringNummer in obs_and_acts. Exceptions: obs_and_acts %&gt;% filter(KleurringNummer != toupper(KleurringNummer)) %&gt;% distinct(KleurringNummer) ## filter: removed all rows (100%) ## distinct: no rows removed are transformed to uppercase: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(KleurringNummer = toupper(KleurringNummer)) ## mutate: no changes 3.12 Check keys KleurringNummer (obs) - Nummer (birds) All values in KleurringNummer should be present in birds$Nummer. Exceptions: obs_and_acts %&gt;% filter(!KleurringNummer %in% birds$Nummer) %&gt;% distinct(KleurringNummer) ## filter: removed all rows (100%) ## distinct: no rows removed We remove them: KleurringNummer_remove &lt;- obs_and_acts %&gt;% filter(!KleurringNummer %in% birds$Nummer) %&gt;% distinct(KleurringNummer) %&gt;% pull() ## filter: removed all rows (100%) ## distinct: no rows removed obs_and_acts &lt;- obs_and_acts %&gt;% filter(!KleurringNummer %in% KleurringNummer_remove) ## filter: no rows removed Finally, we search for birds (Nummer in birds) not linked to any observation (KleurringNummer in obs_and_acts): birds %&gt;% filter(!Nummer %in% obs_and_acts$KleurringNummer) ## filter: removed all rows (100%) We remove them: birds &lt;- birds %&gt;% filter(Nummer %in% obs_and_acts$KleurringNummer) ## filter: no rows removed 3.13 Check duplicates in date of applying rings Detect duplicates in date of applying (the very first) color ring (action code rngkl): duplicates_ringing_rngkl &lt;- obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% group_by(KleurringNummer, Datum, rngkl) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) ## filter: removed 139,638 rows (93%), 11,306 rows remaining ## group_by: 3 grouping variables (KleurringNummer, Datum, rngkl) ## add_tally (grouped): new variable &#39;n&#39; (integer) with one unique value and 0% NA ## ungroup: no grouping variables ## filter: removed all rows (100%) duplicates_ringing_rngkl and metal ring (action code rngme): duplicates_ringing_rngme &lt;- obs_and_acts %&gt;% filter(!is.na(rngme)) %&gt;% group_by(KleurringNummer, Datum, rngme) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) ## filter: removed 139,781 rows (93%), 11,163 rows remaining ## group_by: 3 grouping variables (KleurringNummer, Datum, rngme) ## add_tally (grouped): new variable &#39;n&#39; (integer) with one unique value and 0% NA ## ungroup: no grouping variables ## filter: removed all rows (100%) duplicates_ringing_rngme 3.14 Add rngme if not present Some metal rings are not linked to an observation with action rngme, so we have no date for them: no_rngme &lt;- birds %&gt;% filter(!is.na(MetaalringNummer)) %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(rngme)) %&gt;% select(KleurringNummer, Datum), by = c(&quot;Nummer&quot; = &quot;KleurringNummer&quot;) ) %&gt;% filter(is.na(Datum)) %&gt;% select(Nummer, MetaalringNummer) %&gt;% rename(KleurringNummer = Nummer) %&gt;% arrange(KleurringNummer) ## filter: removed 31 rows (&lt;1%), 11,276 rows remaining ## filter: removed 139,781 rows (93%), 11,163 rows remaining ## select: dropped 37 variables (Nummer, EuringCode, LeeftijdCode, KleurringPlaats, MetaalringNummer, ) ## left_join: added one column (Datum) ## &gt; rows only in x 144 ## &gt; rows only in y ( 31) ## &gt; matched rows 11,132 ## &gt; ======== ## &gt; rows total 11,276 ## filter: removed 11,132 rows (99%), 144 rows remaining ## select: dropped 10 variables (NummerNieuw, NummerDesc, Plaats, RingKleurCode, InscriptieKleurCode, ) ## rename: renamed one variable (KleurringNummer) no_rngme Experts are sure that these metal rings have been applied while applying the color ring (see comment on issue #33). So, we can add action rngme to observations coupled to action rngkl for these rings: obs_and_acts &lt;- obs_and_acts %&gt;% left_join(no_rngme %&gt;% select(KleurringNummer) %&gt;% mutate(add_rngme = TRUE), by = &quot;KleurringNummer&quot; ) %&gt;% mutate(rngme = case_when( rngkl == &quot;rngkl&quot; &amp; add_rngme == TRUE ~ &quot;rngme&quot;, TRUE ~ rngme )) %&gt;% select(-add_rngme) ## select: dropped one variable (MetaalringNummer) ## mutate: new variable &#39;add_rngme&#39; (logical) with one unique value and 0% NA ## left_join: added one column (add_rngme) ## &gt; rows only in x 150,300 ## &gt; rows only in y ( 0) ## &gt; matched rows 644 ## &gt; ========= ## &gt; rows total 150,944 ## mutate: changed 144 values (&lt;1%) of &#39;rngme&#39; (144 fewer NA) ## select: dropped one variable (add_rngme) Be sure this solution provides a date for all metal rings: obs_and_acts %&gt;% filter(is.na(rngme) | rngme == &quot;rngme&quot;) %&gt;% nrow() == nrow(obs_and_acts) ## filter: no rows removed ## [1] TRUE 3.15 Check age while applying rings For each bird, observations with same date should refer to same bird age. The only exceptions allowed are those from veld observations as the age in this case is estimated by observer and can be different from the real one. Exceptions, afer removing field observations: exceptions_age &lt;- obs_and_acts %&gt;% # age is present filter(!is.na(LeeftijdCode)) %&gt;% # exclude field observations filter(is.na(veld)) %&gt;% distinct(KleurringNummer, Datum, LeeftijdCode, WaarnemerNummer) %&gt;% group_by(KleurringNummer, Datum, WaarnemerNummer) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(LeeftijdCode)) %&gt;% select( Nummer, KleurringNummer, Datum, WaarnemerNummer, LeeftijdCode, one_of(actions_meaning$Code) )) %&gt;% select(-n) %&gt;% select( Nummer, KleurringNummer, Datum, LeeftijdCode, WaarnemerNummer, one_of(actions_meaning$Code) ) ## filter: removed 60,675 rows (40%), 90,269 rows remaining ## filter: removed 72,901 rows (81%), 17,368 rows remaining ## distinct: removed 2 rows (&lt;1%), 17,366 rows remaining ## group_by: 3 grouping variables (KleurringNummer, Datum, WaarnemerNummer) ## count: now 17,366 rows and 4 columns, 3 group variables remaining (KleurringNummer, Datum, WaarnemerNummer) ## filter (grouped): removed all rows (100%) ## filter: removed 60,675 rows (40%), 90,269 rows remaining ## Warning: Unknown columns: `megev` ## select: dropped 22 variables (EuringCode, KleurringPlaats, MetaalringNummer, MetaalringPlaats, PlaatsGemeente, ) ## Joining, by = c(&quot;KleurringNummer&quot;, &quot;Datum&quot;, &quot;WaarnemerNummer&quot;) ## left_join: added 14 columns (Nummer, LeeftijdCode, rngkl, rngme, klgev, ) ## &gt; rows only in x 0 ## &gt; rows only in y (90,269) ## &gt; matched rows 0 ## &gt; ======== ## &gt; rows total 0 ## select: dropped one variable (n) ## Warning: Unknown columns: `megev` ## select: columns reordered (Nummer, KleurringNummer, Datum, LeeftijdCode, WaarnemerNummer, ) exceptions_age 3.16 Check bird sex inconsistencies All birds should have a sex, which could be one of M (mannetje), V (vrouwtje), O (onbekend): distinct(birds, GeslachtCode) ## distinct: removed 11,304 rows (&gt;99%), 3 rows remaining Exceptions: birds %&gt;% filter(is.na(GeslachtCode)) %&gt;% distinct(Nummer, NummerNieuw, NummerDesc, GeslachtCode) ## filter: removed all rows (100%) ## distinct: no rows removed For all birds a one-to-one relation bird - sex should hold true: birds %&gt;% distinct(Nummer, GeslachtCode) %&gt;% nrow() == nrow(birds) ## distinct: no rows removed ## [1] TRUE 3.17 Handle information about metal ring number There are columns containing metal ring related information in birds: names(birds)[which(str_detect(names(birds), &quot;Metaalring&quot;))] ## [1] &quot;MetaalringNummer&quot; &quot;MetaalringPlaats&quot; &quot;MetaalringLandCode&quot; and obs_and_acts: names(obs_and_acts)[which(str_detect(names(obs_and_acts), &quot;Metaalring&quot;))] ## [1] &quot;MetaalringNummer&quot; &quot;MetaalringPlaats&quot; &quot;MetaalringLandCode&quot; This is not only redundant: inconsistencies are detected. Some examples: birds %&gt;% filter(Nummer %in% c(&quot;AAAA&quot;, &quot;AAAR&quot;, &quot;AAAT&quot;, &quot;AAAW&quot;)) %&gt;% rename(&quot;metal_ring_from_birds&quot; = &quot;MetaalringNummer&quot;) %&gt;% left_join(obs_and_acts %&gt;% rename(&quot;metal_ring_from_obs&quot; = &quot;MetaalringNummer&quot;), by = c(&quot;Nummer&quot; = &quot;KleurringNummer&quot;) ) %&gt;% distinct(Nummer, metal_ring_from_birds, metal_ring_from_obs) ## filter: removed 11,303 rows (&gt;99%), 4 rows remaining ## rename: renamed one variable (metal_ring_from_birds) ## rename: renamed one variable (metal_ring_from_obs) ## left_join: added 41 columns (EuringCode.x, MetaalringPlaats.x, MetaalringLandCode.x, Nummer.y, Datum, ) ## &gt; rows only in x 0 ## &gt; rows only in y (150,584) ## &gt; matched rows 360 (includes duplicates) ## &gt; ========= ## &gt; rows total 360 ## distinct: removed 353 rows (98%), 7 rows remaining Based on experts knowledge only the metal ring information in birds is correct. We rename the columns related to metal ring information from obs_and_acts by adding suffix _obs: obs_and_acts &lt;- obs_and_acts %&gt;% rename_at( vars(starts_with(&quot;Metaalring&quot;)), ~ paste0(., &quot;_obs&quot;) ) ## rename_at: renamed 3 variables (MetaalringNummer_obs, MetaalringPlaats_obs, MetaalringLandCode_obs) 3.18 Solve GPS tracker IDs Some birds have a suspect Nummer which is formed by letters GPS or GP followed by some numbers. These are a kind of GPS IDs which should not be in columns related to color rings: birds %&gt;% filter(str_detect(Nummer, pattern = &quot;(^(GP)\\\\d+)|(^(GPS)\\\\d+)&quot;)) %&gt;% select(Nummer) ## filter: removed 11,167 rows (99%), 140 rows remaining ## select: dropped 10 variables (NummerNieuw, NummerDesc, Plaats, RingKleurCode, InscriptieKleurCode, ) The right mapping is saved in map_gps: map_gps %&gt;% head() We import the color rings in new column first_Nummer. For all other rings will be first_nummer = Nummer as they are the very first rings: birds &lt;- birds %&gt;% # create column first_Nummer with right color rings for the GPS or GP** rings left_join(map_gps, by = c(&quot;Nummer&quot; = &quot;gps_id&quot;)) %&gt;% # set first_Numer equal to Nummer in all other cases mutate(first_Nummer = ifelse(is.na(color_ring), Nummer, color_ring )) %&gt;% select(Nummer, first_Nummer, everything()) ## left_join: added 2 columns (color_ring, sovon_bird_notes) ## &gt; rows only in x 11,167 ## &gt; rows only in y ( 1) ## &gt; matched rows 140 ## &gt; ======== ## &gt; rows total 11,307 ## mutate: new variable &#39;first_Nummer&#39; (character) with 11,307 unique values and 0% NA ## select: columns reordered (Nummer, first_Nummer, NummerNieuw, NummerDesc, Plaats, ) Check whether not corrected rings (GP*** or GPS***) are still present: birds %&gt;% filter(str_detect(first_Nummer, pattern = &quot;(^(GP)\\\\d+)|(^(GPS)\\\\d+)&quot;)) %&gt;% select(first_Nummer, NummerNieuw) ## filter: removed all rows (100%) ## select: dropped 12 variables (Nummer, NummerDesc, Plaats, RingKleurCode, InscriptieKleurCode, ) Mapping example: the bird with Nummer equal to GP104 is mapped as follows: birds %&gt;% filter(Nummer == &quot;GP104&quot;) %&gt;% select(Nummer, first_Nummer, NummerNieuw, sovon_bird_notes) ## filter: removed 11,306 rows (&gt;99%), one row remaining ## select: dropped 10 variables (NummerDesc, Plaats, RingKleurCode, InscriptieKleurCode, EuringCode, ) Column first_Nummer should contain unique elements. Check for exceptions: birds %&gt;% group_by(first_Nummer) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) %&gt;% select(-n) ## group_by: one grouping variable (first_Nummer) ## add_tally (grouped): new variable &#39;n&#39; (integer) with one unique value and 0% NA ## ungroup: no grouping variables ## filter: removed all rows (100%) ## select: dropped one variable (n) Exceptions, if exist, are due to double entry, one with the original color ring, a second one with GPS tracker ID. Such exceptions, if present, should be handled separately while mapping bird_shorthand in document 3_birds.Rmd. Another reason could be mapping in map_gps as result of reringing of birds with GPS. Notice that map_gps should map to the very first ring. 3.19 Check inconsistencies between users and observers We have to be sure that all observations have a valid observator reference, i.e. an ID contained in column Nummer of users. Observations without an observator reference: obs_and_acts %&gt;% filter(is.na(WaarnemerNummer)) ## filter: removed all rows (100%) All observator references in obs_and_acts should be present in users: observers_ids &lt;- unique( obs_and_acts %&gt;% filter(!is.na(WaarnemerNummer)) %&gt;% distinct(WaarnemerNummer) %&gt;% pull() ) ## filter: no rows removed ## distinct: removed 148,935 rows (99%), 2,009 rows remaining all(observers_ids %in% users$Nummer) ## [1] TRUE 3.20 Remove data of common shelduck Data related to common shelduck, Tadorna tadorna, are not updated: INOB experts suggest to remove them from the mapping. More details here. Euring scheme: 01730. We retrieve the values of field Nummer from birds related to this species: common_shellduck_nummer &lt;- birds %&gt;% filter(EuringCode == &quot;01730&quot;) %&gt;% pull(Nummer) ## filter: removed 11,227 rows (99%), 80 rows remaining Number of birds to remove: length(common_shellduck_nummer) ## [1] 80 We remove data from birds: birds &lt;- birds %&gt;% filter(EuringCode != &quot;01730&quot; | is.na(EuringCode)) ## filter: removed 80 rows (1%), 11,227 rows remaining and from obs_and_acts: obs_and_acts &lt;- obs_and_acts %&gt;% filter(!KleurringNummer %in% common_shellduck_nummer | is.na(KleurringNummer)) ## filter: removed 110 rows (&lt;1%), 150,834 rows remaining 3.21 Remove rings BGAH, BRAB and EAU The rings BGAH, BRAB and EAUshould be removed, as explained in # 89-issuesomment-481195862 and # 102-issuecomment-604939290. No information about EURING code can be found: birds %&gt;% filter(Nummer %in% c(&quot;BGAH&quot;, &quot;BRAB&quot;, &quot;EAU&quot;)) ## filter: removed 11,224 rows (&gt;99%), 3 rows remaining We also remove the ring EAU as it is not valid and the INBO experts agree on removing it (see issue #102). We remove these rings from birds: birds &lt;- birds %&gt;% filter(!Nummer %in% c(&quot;BGAH&quot;, &quot;BRAB&quot;, &quot;EAU&quot;)) ## filter: removed 3 rows (&lt;1%), 11,224 rows remaining Observations related to these three rings: obs_and_acts %&gt;% filter(KleurringNummer %in% c(&quot;BGAH&quot;, &quot;BRAB&quot;, &quot;EAU&quot;)) ## filter: removed 150,831 rows (&gt;99%), 3 rows remaining will be also removed: obs_and_acts &lt;- obs_and_acts %&gt;% filter(!KleurringNummer %in% c(&quot;BGAH&quot;, &quot;BRAB&quot;, &quot;EAU&quot;)) ## filter: removed 3 rows (&lt;1%), 150,831 rows remaining 3.22 Check date of dood Observations with action dood should be the very last for each observation sequence containing this action. Exceptions: obs_after_death &lt;- obs_and_acts %&gt;% filter(dood == &quot;dood&quot;) %&gt;% select(KleurringNummer, Datum) %&gt;% rename(dood_datum = Datum) %&gt;% left_join(obs_and_acts, by = &quot;KleurringNummer&quot;) %&gt;% filter(dood_datum &lt; Datum) %&gt;% select(Nummer, KleurringNummer, Datum, dood_datum, acts, everything()) %&gt;% arrange(KleurringNummer, Datum) ## filter: removed 150,101 rows (&gt;99%), 730 rows remaining ## select: dropped 37 variables (Nummer, EuringCode, LeeftijdCode, KleurringPlaats, MetaalringNummer_obs, ) ## rename: renamed one variable (dood_datum) ## left_join: added 38 columns (Nummer, Datum, EuringCode, LeeftijdCode, KleurringPlaats, ) ## &gt; rows only in x 0 ## &gt; rows only in y (143,788) ## &gt; matched rows 7,043 (includes duplicates) ## &gt; ========= ## &gt; rows total 7,043 ## filter: removed all rows (100%) ## Note: Using an external vector in selections is ambiguous. ## i Use `all_of(acts)` instead of `acts` to silence this message. ## i See &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;. ## This message is displayed once per session. ## select: columns reordered (Nummer, KleurringNummer, Datum, dood_datum, rngme, ) obs_after_death If present, observations after dood are removed: obs_and_acts &lt;- obs_and_acts %&gt;% filter(!Nummer %in% obs_after_death$Nummer) ## filter: no rows removed Finally, we perform a last check: a ring should not be linked to two observations, one with action dood and one with action klgev: obs_and_acts %&gt;% filter(dood == &quot;dood&quot; | klgev == &quot;klgev&quot;) %&gt;% group_by(KleurringNummer) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) ## filter: removed 150,063 rows (99%), 768 rows remaining ## group_by: one grouping variable (KleurringNummer) ## add_tally (grouped): new variable &#39;n&#39; (integer) with one unique value and 0% NA ## ungroup: no grouping variables ## filter: removed all rows (100%) 3.23 Save preprocessed data After data cleaning we save the data as TSVs in .data/interim: write_tsv(users, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;users.tsv&quot;), na = &quot;&quot;) write_tsv(birds, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;birds.tsv&quot;), na = &quot;&quot;) write_tsv( obs_and_acts, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), na = &quot;&quot; ) We save the tables containing action codes, colors and ring places in ./data/input as it could be useful in following mapping steps: # Save action codes write_tsv( actions_meaning, path = here::here(&quot;data&quot;, &quot;input&quot;, &quot;actions_meaning.tsv&quot;), na = &quot;&quot; ) # Save colors write_tsv( color_table, path = here::here(&quot;data&quot;, &quot;input&quot;, &quot;color_table.tsv&quot;), na = &quot;&quot; ) # Save ring position write_tsv( ring_position_table, path = here::here(&quot;data&quot;, &quot;input&quot;, &quot;ring_position_table.tsv&quot;), na = &quot;&quot; ) "],["2_users.html", "4 Map user data 4.1 Read temporary user data 4.2 Map user data 4.3 Save user data", " 4 Map user data 4.1 Read temporary user data We start from the user temporary data saved in TSV file users.tsv in folder data\\interim: users &lt;- read_tsv(here::here(&quot;data&quot;, &quot;interim&quot;, &quot;users.tsv&quot;), col_types = cols( .default = col_character(), Nummer = col_double(), Wachtwoord = col_logical() ) ) Number of users: nrow(users) ## [1] 2038 4.2 Map user data We map the original fields to SOVON fields denoted by prefix sovon_. 4.2.1 E-mail users &lt;- users %&gt;% mutate(sovon_user_email = Email) ## mutate: new variable &#39;sovon_user_email&#39; (character) with 1,211 unique values and 40% NA 4.2.2 First name users &lt;- users %&gt;% mutate(sovon_user_first_name = Voornaam) ## mutate: new variable &#39;sovon_user_first_name&#39; (character) with 897 unique values and 1% NA 4.2.3 Last name users &lt;- users %&gt;% mutate(sovon_user_last_name = Familienaam) ## mutate: new variable &#39;sovon_user_last_name&#39; (character) with 1,867 unique values and 0% NA 4.2.4 Address users &lt;- users %&gt;% mutate(sovon_user_address = Adres) ## mutate: new variable &#39;sovon_user_address&#39; (character) with 196 unique values and 90% NA 4.2.5 Place users &lt;- users %&gt;% mutate(sovon_user_place = Gemeente) ## mutate: new variable &#39;sovon_user_place&#39; (character) with 174 unique values and 90% NA 4.2.6 Postal code users &lt;- users %&gt;% mutate(sovon_user_postal_code = Postcode) ## mutate: new variable &#39;sovon_user_postal_code&#39; (character) with 175 unique values and 91% NA 4.2.7 Country Countries present: users %&gt;% distinct(LandCode) ## distinct: removed 2,025 rows (99%), 13 rows remaining users &lt;- users %&gt;% mutate(sovon_user_country = LandCode) ## mutate: new variable &#39;sovon_user_country&#39; (character) with 13 unique values and 66% NA 4.2.8 User ID User identifiers are provided by SOVON. NA is given. users &lt;- users %&gt;% mutate(sovon_user_id = NA) ## mutate: new variable &#39;sovon_user_id&#39; (logical) with one unique value and 100% NA 4.2.9 User reference We use the unique ID in Nummer: users &lt;- users %&gt;% mutate(sovon_user_reference = Nummer) ## mutate: new variable &#39;sovon_user_reference&#39; (double) with 2,038 unique values and 0% NA 4.2.10 User language This field is not present in users. We leave it empty: users &lt;- users %&gt;% mutate(sovon_user_language = NA_character_) ## mutate: new variable &#39;sovon_user_language&#39; (character) with one unique value and 100% NA 4.3 Save user data Export the SOVON fields to crbirding_users: crbirding_users &lt;- users %&gt;% select(starts_with(&quot;sovon_&quot;)) ## select: dropped 13 variables (Nummer, Familienaam, Voornaam, Adres, Postcode, ) Remove prefix sovon_: names(crbirding_users) &lt;- str_remove( names(crbirding_users), pattern = &quot;sovon_&quot; ) The desired order of columns in crbirding_users: cr_users_cols &lt;- c( &quot;user_id&quot;, &quot;user_reference&quot;, &quot;user_email&quot;, &quot;user_first_name&quot;, &quot;user_last_name&quot;, &quot;user_address&quot;, &quot;user_postal_code&quot;, &quot;user_place&quot;, &quot;user_country&quot;, &quot;user_language&quot;, &quot;user_role&quot; ) Fields still not mapped: cr_users_cols[which(!cr_users_cols %in% names(crbirding_users))] ## [1] &quot;user_role&quot; The field user_role cannot be filled at the moment: it will be mapped at the end of the next chapter. Set column order: crbirding_users &lt;- crbirding_users %&gt;% select(cr_users_cols[cr_users_cols != &quot;user_role&quot;]) ## select: columns reordered (user_id, user_reference, user_email, user_first_name, user_last_name, ) Preview data (e-mail, first and last names removed for privacy reasons): crbirding_users %&gt;% select(-c(user_email, user_first_name, user_last_name)) %&gt;% head(n = 10) ## select: dropped 3 variables (user_email, user_first_name, user_last_name) Save to csv file crbirding_users.csv in ./data/processed/ as asked by SOVON: crbirding_users %&gt;% write_csv( path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.csv&quot;), na = &quot;&quot; ) "],["3_birds.html", "5 Map ring data 5.1 Read temporary ring data 5.2 Map color ring data 5.3 Finalize user data 5.4 Save modified temporary observation data 5.5 Save modified ring position and direction table 5.6 Save final user data 5.7 Save final ring data", " 5 Map ring data 5.1 Read temporary ring data Import temporary bird data from birds.tsv: birds &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;birds.tsv&quot;), col_types = cols( .default = col_character() ) ) 5.1.1 Read observation data Import temporary observation data from obs_and_actions.tsv: obs_and_acts &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), col_types = cols( .default = col_character(), Nummer = col_double(), Datum = col_datetime(format = &quot;&quot;), WaarnemerNummer = col_double(), PlaatsLengtegraadGraden = col_double(), PlaatsLengtegraadMinuten = col_double(), PlaatsLengtegraadSeconden = col_double(), PlaatsBreedtegraadGraden = col_double(), PlaatsBreedtegraadMinuten = col_double(), PlaatsBreedtegraadSeconden = col_double(), BevestigingDatum = col_datetime(format = &quot;&quot;), AanmaakDatum = col_datetime(format = &quot;&quot;), WijzigDatum = col_datetime(format = &quot;&quot;) ) ) 5.1.2 Read action data Import action codes and relative meaning: actions_meaning &lt;- read_tsv(here::here(&quot;data&quot;, &quot;input&quot;, &quot;actions_meaning.tsv&quot;)) ## Parsed with column specification: ## cols( ## Code = col_character(), ## Beschrijving = col_character(), ## BeschrijvingUK = col_character(), ## CodeExtern = col_character(), ## CodeExternUK = col_character(), ## Kolom = col_character() ## ) 5.1.3 Read ring position data ring_position_table &lt;- read_tsv( here::here(&quot;data&quot;, &quot;input&quot;, &quot;ring_position_table.tsv&quot;) ) ## Parsed with column specification: ## cols( ## Code = col_character(), ## Beschrijving = col_character(), ## BeschrijvingUK = col_character(), ## Aktief = col_logical() ## ) 5.1.4 Read user data Import user data as we have still to map the field user_role: crbirding_users &lt;- read_csv( here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.csv&quot;) ) ## Parsed with column specification: ## cols( ## user_id = col_logical(), ## user_reference = col_double(), ## user_email = col_character(), ## user_first_name = col_character(), ## user_last_name = col_character(), ## user_address = col_character(), ## user_postal_code = col_character(), ## user_place = col_character(), ## user_country = col_character(), ## user_language = col_logical() ## ) 5.1.5 Read color data Import ring color codes and relative meaning: color_table &lt;- read_tsv(here::here(&quot;data&quot;, &quot;input&quot;, &quot;color_table.tsv&quot;)) ## Parsed with column specification: ## cols( ## Code = col_character(), ## Beschrijving = col_character(), ## BeschrijvingUK = col_character(), ## Aktief = col_logical() ## ) 5.2 Map color ring data 5.2.1 Extract action codes Actions present in obs_and_acts : acts &lt;- actions_meaning$Code acts &lt;- acts[acts %in% names(obs_and_acts)] acts ## [1] &quot;rngkl&quot; &quot;rngme&quot; &quot;klgev&quot; &quot;br&quot; &quot;vang&quot; &quot;dood&quot; &quot;klweg&quot; &quot;veld&quot; &quot;meweg&quot; ## [10] &quot;me&quot; &quot;vangl&quot; &quot;ziek&quot; 5.2.2 Bird reference &amp; bird shorthand In SOVON table crbirding_birds each row identifies a ring. By assigning a bird reference as unique integer to a bird they can link any color ring to the bird it belongs to. birds &lt;- birds %&gt;% mutate(sovon_bird_reference = seq_len(nrow(birds))) %&gt;% select( sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, everything() ) ## mutate: new variable &#39;sovon_bird_reference&#39; (integer) with 11,224 unique values and 0% NA ## select: columns reordered (sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, Nummer, ) head(birds) Birds with lack of unicity of sovon_bird_reference: birds %&gt;% group_by(first_Nummer) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) %&gt;% select( sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, Nummer ) ## group_by: one grouping variable (first_Nummer) ## add_tally (grouped): new variable &#39;n&#39; (integer) with one unique value and 0% NA ## ungroup: no grouping variables ## filter: removed all rows (100%) ## select: dropped 11 variables (Plaats, RingKleurCode, InscriptieKleurCode, EuringCode, GeslachtCode, ) In such cases we assign the lower sovon_bird_reference: birds &lt;- birds %&gt;% group_by(first_Nummer) %&gt;% mutate(sovon_bird_reference = min(sovon_bird_reference)) %&gt;% ungroup() ## group_by: one grouping variable (first_Nummer) ## mutate (grouped): no changes ## ungroup: no grouping variables Check: birds %&gt;% group_by(first_Nummer) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) %&gt;% select( sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, Nummer ) ## group_by: one grouping variable (first_Nummer) ## add_tally (grouped): new variable &#39;n&#39; (integer) with one unique value and 0% NA ## ungroup: no grouping variables ## filter: removed all rows (100%) ## select: dropped 11 variables (Plaats, RingKleurCode, InscriptieKleurCode, EuringCode, GeslachtCode, ) We add column sovon_bird_reference to obs_and_acts as it will be needed to map the dates of ringing. The link is made by the columns Nummer (birds data) and KleurringNummer (observation data): obs_and_acts &lt;- obs_and_acts %&gt;% left_join(birds %&gt;% select(Nummer, sovon_bird_reference), by = c(&quot;KleurringNummer&quot; = &quot;Nummer&quot;) ) %&gt;% select(sovon_bird_reference, everything()) ## select: dropped 13 variables (first_Nummer, NummerNieuw, NummerDesc, Plaats, RingKleurCode, ) ## left_join: added one column (sovon_bird_reference) ## &gt; rows only in x 0 ## &gt; rows only in y ( 0) ## &gt; matched rows 150,831 ## &gt; ========= ## &gt; rows total 150,831 ## select: columns reordered (sovon_bird_reference, Nummer, Datum, EuringCode, LeeftijdCode, ) Check whether there are observations without link to any bird: filter(obs_and_acts, is.na(sovon_bird_reference)) ## filter: removed all rows (100%) We will also add column first_Nummer from birds to observations as well: obs_and_acts &lt;- obs_and_acts %&gt;% left_join( birds %&gt;% select(sovon_bird_reference, first_Nummer, Nummer), by = c(&quot;sovon_bird_reference&quot;, &quot;KleurringNummer&quot; = &quot;Nummer&quot; ) ) ## select: dropped 12 variables (NummerNieuw, NummerDesc, Plaats, RingKleurCode, InscriptieKleurCode, ) ## left_join: added one column (first_Nummer) ## &gt; rows only in x 0 ## &gt; rows only in y ( 0) ## &gt; matched rows 150,831 ## &gt; ========= ## &gt; rows total 150,831 The reconstruction of the series of color rings for each bird is made by using columns first_Nummer (very first color ring), NummerNieuw (very last color ring) and the information from spreadsheets of experts. We will collect the needed information in a new dataframe, called crbirding_birds which will grow up to become the end product containing the ring data to deliver to SOVON. First step is to gather first_Nummer and NummerNieuw in new column sovon_bird_shorthand: crbirding_birds &lt;- birds %&gt;% select( sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, sovon_bird_notes ) %&gt;% pivot_longer( cols = c(first_Nummer, NummerNieuw), names_to = &quot;col_nummer&quot;, values_to = &quot;sovon_bird_shorthand&quot; ) %&gt;% select(-col_nummer) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, NummerDesc, sovon_bird_notes) ## select: dropped 10 variables (Nummer, Plaats, RingKleurCode, InscriptieKleurCode, EuringCode, ) ## pivot_longer: reorganized (first_Nummer, NummerNieuw) into (col_nummer, sovon_bird_shorthand) [was 11224x5, now 22448x5] ## select: dropped one variable (col_nummer) ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, NummerDesc, sovon_bird_notes) We can also assign the color ring version with point (sovon_bird_shorthand_pt) by matching columns sovon_bird_shorthand and NummerDesc where possible. Note that sovon_bird_shorthand_pt may contain points, but for old rings it is equal to sovon_bird_shorthand: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_shorthand_pt = ifelse( str_remove_all( string = NummerDesc, pattern = &quot;\\\\.&quot; ) == sovon_bird_shorthand, NummerDesc, sovon_bird_shorthand )) %&gt;% distinct() %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_notes) ## mutate: new variable &#39;sovon_bird_shorthand_pt&#39; (character) with 11,559 unique values and 0% NA ## distinct: removed 10,889 rows (49%), 11,559 rows remaining ## select: dropped one variable (NummerDesc) ## to map correctly MKAU (sovon_bird_reference: 4531) ## group_by(sovon_bird_reference, sovon_bird_shorthand) %&gt;% ## filter(sovon_bird_shorthand == ## sovon_bird_shorthand[which.max(nchar(sovon_bird_shorthand))]) %&gt;% ## ungroup() Example of mapping: the bird with sovon_bird_reference 14 is associated to the following two rings: birds %&gt;% filter(sovon_bird_reference == 14) %&gt;% select(sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc) ## filter: removed 11,223 rows (&gt;99%), one row remaining ## select: dropped 11 variables (Nummer, Plaats, RingKleurCode, InscriptieKleurCode, EuringCode, ) and will be mapped as follows: crbirding_birds %&gt;% filter(sovon_bird_reference == 14) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt) ## filter: removed 11,557 rows (&gt;99%), 2 rows remaining ## select: dropped one variable (sovon_bird_notes) 5.2.3 Bird ringing date The date of applying a ring should be mapped as sovon_bird_date_begin. The date of applying the first ring can be found in data frame obs_and_acts in the column Datum for actions rngkl (code action of applying very first color ring): obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select( sovon_bird_reference, first_Nummer, Datum, rngkl ) %&gt;% head(n = 10) ## filter: removed 139,607 rows (93%), 11,224 rows remaining ## select: dropped 37 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) 5.2.3.1 Date of applying first ring We can add automatically the date of the very first ring for each bird (sovon_bird_reference), based on date of action code rngkl. In fact, there should be just one observation with action rngkl for each bird (sovon_bird_reference). Exceptions: exceptions_one_bird_one_rngkl &lt;- obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) %&gt;% filter(!is.na(rngkl)) %&gt;% left_join(crbirding_birds %&gt;% select(sovon_bird_reference, sovon_bird_shorthand), by = &quot;sovon_bird_reference&quot; ) %&gt;% # distinct() %&gt;% select(-n) ## filter: removed 139,607 rows (93%), 11,224 rows remaining ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with one unique value and 0% NA ## ungroup: no grouping variables ## filter: removed all rows (100%) ## filter: no rows removed ## select: dropped 2 variables (sovon_bird_shorthand_pt, sovon_bird_notes) ## left_join: added one column (sovon_bird_shorthand) ## &gt; rows only in x 0 ## &gt; rows only in y (11,559) ## &gt; matched rows 0 ## &gt; ======== ## &gt; rows total 0 ## select: dropped one variable (n) exceptions_one_bird_one_rngkl In case exceptions are present, they should best be solved at database level. In any case, we will manage them later. Assign the date of first ringing: crbirding_birds &lt;- obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select(sovon_bird_reference, first_Nummer, Datum) %&gt;% group_by(sovon_bird_reference, first_Nummer) %&gt;% summarize(sovon_bird_date_begin = min(Datum)) %&gt;% right_join(crbirding_birds, by = c(&quot;sovon_bird_reference&quot;, &quot;first_Nummer&quot; = &quot;sovon_bird_shorthand&quot; ) ) %&gt;% rename(sovon_bird_shorthand = first_Nummer) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_notes ) %&gt;% ungroup() ## filter: removed 139,607 rows (93%), 11,224 rows remaining ## select: dropped 38 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## group_by: 2 grouping variables (sovon_bird_reference, first_Nummer) ## summarize: now 11,224 rows and 3 columns, one group variable remaining (sovon_bird_reference) ## right_join: added 2 columns (sovon_bird_shorthand_pt, sovon_bird_notes) ## &gt; rows only in x ( 0) ## &gt; rows only in y 335 ## &gt; matched rows 11,224 ## &gt; ======== ## &gt; rows total 11,559 ## rename: renamed one variable (sovon_bird_shorthand) ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_notes) ## ungroup: no grouping variables Some examples (birds with sovon_bird_reference 1, 14 and 4107): crbirding_birds %&gt;% filter(sovon_bird_reference %in% c(1, 14, 4107)) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) ## filter: removed 11,555 rows (&gt;99%), 4 rows remaining Check date of birds in exceptions: crbirding_birds %&gt;% filter(sovon_bird_shorthand %in% exceptions_one_bird_one_rngkl$sovon_bird_shorthand) ## filter: removed all rows (100%) And in case solve: # if (nrow(exceptions_one_bird_one_rngkl) &gt; 0) { # crbirding_birds &lt;- # crbirding_birds %&gt;% # mutate(sovon_bird_date_begin = case_when( # sovon_bird_shorthand == &quot;MKAU&quot; ~ sovon_bird_date_begin, # sovon_bird_shorthand == &quot;CZOZ&quot; ~ as.POSIXct(NA_character_), # TRUE ~ sovon_bird_date_begin # )) # } Summary of rings with date (sovon_bird_date_begin): crbirding_birds %&gt;% mutate(date_is_present = !is.na(sovon_bird_date_begin)) %&gt;% group_by(date_is_present) %&gt;% count() ## mutate: new variable &#39;date_is_present&#39; (logical) with 2 unique values and 0% NA ## group_by: one grouping variable (date_is_present) ## count: now 2 rows and 2 columns, one group variable remaining (date_is_present) 5.2.3.2 Date of applying last ring The rings without date are the rings of birds ringed more than once. birds_multiple_rings &lt;- crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 2 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 10,889 rows (94%), 670 rows remaining birds_multiple_rings Not only, the structure of our database limits to 2 the maximum number of rings linked to the same bird, as two are the columns containing such information (Nummer and NummerNieuw). Check: birds_two_rings &lt;- crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 2) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 2 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 10,889 rows (94%), 670 rows remaining all(birds_two_rings$sovon_bird_reference == birds_multiple_rings$sovon_bird_reference) ## [1] TRUE Experts explained us that the very first and the very last ring are mapped in birds. By consulting the spreadsheet of the experts we will later fill the gap by adding intermediate rings. We can try to retrieve the date of applying last ring based on observations/actions with code vang (caught at the nest) or vangl (caught otherwise). Birds ringed twice and linked to one vang/vangl action only: bird_one_vang &lt;- obs_and_acts %&gt;% filter(sovon_bird_reference %in% birds_multiple_rings$sovon_bird_reference &amp; (!is.na(vang) | !is.na(vangl))) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 1) %&gt;% rename(sovon_bird_date_begin = Datum) %&gt;% select(-n) %&gt;% arrange(sovon_bird_reference) ## filter: removed 150,470 rows (&gt;99%), 361 rows remaining ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 2 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 62 rows (17%), 299 rows remaining ## rename: renamed one variable (sovon_bird_date_begin) ## select: dropped one variable (n) bird_one_vang %&gt;% select_if(function(x) any(!is.na(x))) ## select_if: dropped 7 variables (BevestigingDatum, rngkl, veld, dood, klgev, ) As you cannot change a ring to a bird without catching him, we can use these unique dates as date of ringing, sovon_bird_date_begin: bird_one_vang_with_date &lt;- crbirding_birds %&gt;% filter(sovon_bird_reference %in% bird_one_vang$sovon_bird_reference &amp; sovon_bird_reference %in% birds_two_rings$sovon_bird_reference) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(is.na(sovon_bird_date_begin)) %&gt;% select(-sovon_bird_date_begin) %&gt;% ungroup() %&gt;% left_join(bird_one_vang, by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% select(names(crbirding_birds)) ## filter: removed 10,961 rows (95%), 598 rows remaining ## group_by: one grouping variable (sovon_bird_reference) ## filter (grouped): removed 299 rows (50%), 299 rows remaining ## select: dropped one variable (sovon_bird_date_begin) ## ungroup: no grouping variables ## left_join: added 40 columns (Nummer, sovon_bird_date_begin, EuringCode, LeeftijdCode, KleurringNummer, ) ## &gt; rows only in x 0 ## &gt; rows only in y ( 0) ## &gt; matched rows 299 ## &gt; ===== ## &gt; rows total 299 ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(bird_one_vang_with_date, by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;) ) %&gt;% bind_rows(bird_one_vang_with_date) %&gt;% arrange(sovon_bird_reference) ## anti_join: added no columns ## &gt; rows only in x 11,260 ## &gt; rows only in y ( 0) ## &gt; matched rows ( 299) ## &gt; ======== ## &gt; rows total 11,260 Examples of date mapping (birds with sovon_bird_reference 11 and 14): crbirding_birds %&gt;% filter(sovon_bird_reference %in% c(11, 14)) ## filter: removed 11,555 rows (&gt;99%), 4 rows remaining Some birds have been catched twice: bird_two_vang &lt;- obs_and_acts %&gt;% filter(sovon_bird_reference %in% birds_two_rings$sovon_bird_reference &amp; (!is.na(vang) | !is.na(vangl))) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 2) %&gt;% rename(sovon_bird_date_begin = Datum) %&gt;% select(-n) %&gt;% arrange(sovon_bird_reference) ## filter: removed 150,470 rows (&gt;99%), 361 rows remaining ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 2 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 299 rows (83%), 62 rows remaining ## rename: renamed one variable (sovon_bird_date_begin) ## select: dropped one variable (n) bird_two_vang %&gt;% select_if(function(x) any(!is.na(x))) ## select_if: dropped 9 variables (rngkl, veld, dood, klgev, br, ) In the expert spreadsheet, we can see that the color ring is typically applied during the last vang/vangl action. We will assign the most recent date by default as first step, correcting the exceptions later: bird_two_vang_get_date &lt;- crbirding_birds %&gt;% filter(sovon_bird_reference %in% bird_two_vang$sovon_bird_reference &amp; sovon_bird_reference %in% birds_two_rings$sovon_bird_reference) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(is.na(sovon_bird_date_begin)) %&gt;% select(-sovon_bird_date_begin) %&gt;% left_join(bird_two_vang %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)), by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% select_if(function(x) any(!is.na(x))) ## filter: removed 11,497 rows (99%), 62 rows remaining ## group_by: one grouping variable (sovon_bird_reference) ## filter (grouped): removed 31 rows (50%), 31 rows remaining ## select: dropped one variable (sovon_bird_date_begin) ## group_by: one grouping variable (sovon_bird_reference) ## filter (grouped): removed 31 rows (50%), 31 rows remaining ## left_join: added 40 columns (Nummer, sovon_bird_date_begin, EuringCode, LeeftijdCode, KleurringNummer, ) ## &gt; rows only in x 0 ## &gt; rows only in y ( 0) ## &gt; matched rows 31 ## &gt; ==== ## &gt; rows total 31 ## select_if: dropped 16 variables (KleurringPlaats, MetaalringNummer_obs, MetaalringPlaats_obs, MetaalringLandCode_obs, BevestigingDatum, ) bird_two_vang_get_date By consulting the spreadsheet we can find that the following rings have been applied during the earliest vang/vangl action, so they are exceptions: bird_shorthand_exceptions &lt;- c( &quot;NGAP&quot;, &quot;NGAX&quot;, &quot;GVAR&quot;, &quot;KPAZ&quot;, &quot;KAAK&quot;, &quot;KAAN&quot; ) bird_exceptions &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand %in% bird_shorthand_exceptions) ## filter: removed 11,553 rows (&gt;99%), 6 rows remaining We set sovon_bird_date_begin equal to the date of the earliest vang/vangl action: bird_two_vang_get_date &lt;- bird_two_vang %&gt;% filter(sovon_bird_reference %in% bird_exceptions$sovon_bird_reference) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin == min(sovon_bird_date_begin)) %&gt;% ungroup() %&gt;% left_join(bird_exceptions %&gt;% select(-sovon_bird_date_begin), by = &quot;sovon_bird_reference&quot;) %&gt;% select(names(bird_two_vang_get_date)) %&gt;% bind_rows(bird_two_vang_get_date %&gt;% filter(!sovon_bird_shorthand %in% bird_exceptions$sovon_bird_shorthand)) %&gt;% select(names(crbirding_birds)) ## filter: removed 50 rows (81%), 12 rows remaining ## group_by: one grouping variable (sovon_bird_reference) ## filter (grouped): removed 6 rows (50%), 6 rows remaining ## ungroup: no grouping variables ## select: dropped one variable (sovon_bird_date_begin) ## left_join: added 3 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_notes) ## &gt; rows only in x 0 ## &gt; rows only in y (0) ## &gt; matched rows 6 ## &gt; === ## &gt; rows total 6 ## select: dropped 16 variables (KleurringPlaats, MetaalringNummer_obs, MetaalringPlaats_obs, MetaalringLandCode_obs, BevestigingDatum, ) ## filter (grouped): removed 6 rows (19%), 25 rows remaining ## select: dropped 23 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, PlaatsGemeente, ) bird_two_vang_get_date Add this information to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(bird_two_vang_get_date, by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot; ) ) %&gt;% bind_rows(bird_two_vang_get_date) %&gt;% arrange(sovon_bird_reference) ## anti_join: added no columns ## &gt; rows only in x 11,528 ## &gt; rows only in y ( 0) ## &gt; matched rows ( 31) ## &gt; ======== ## &gt; rows total 11,528 crbirding_birds Rings still without date: crbirding_birds %&gt;% mutate(date_is_present = !is.na(sovon_bird_date_begin)) %&gt;% filter(!date_is_present) ## mutate: new variable &#39;date_is_present&#39; (logical) with 2 unique values and 0% NA ## filter: removed 11,554 rows (&gt;99%), 5 rows remaining Based on spreadsheet and observation data, we found that the dates of applying the rings FAAG, YCAF, FHOV and HSOW are linked to actions ziek, i.e. the ring has been applied while taking care of the birds. The date of applying FAAG: info_faag &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;FAAG&quot;) %&gt;% mutate( sovon_bird_date_begin = obs_and_acts %&gt;% filter( first_Nummer == &quot;ALAU&quot;, !is.na(ziek) ) %&gt;% ## get the second &quot;ziek&quot; action (2006-07-07) filter(Datum == max(Datum)) %&gt;% pull(Datum) ) ## filter: removed 11,558 rows (&gt;99%), one row remaining ## filter: removed 150,829 rows (&gt;99%), 2 rows remaining ## filter: removed one row (50%), one row remaining ## mutate: changed one value (100%) of &#39;sovon_bird_date_begin&#39; (1 fewer NA) info_faag The date of applying YCAF: info_ycaf &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;YCAF&quot;) %&gt;% mutate( sovon_bird_date_begin = obs_and_acts %&gt;% filter( first_Nummer == &quot;PLAB&quot;, !is.na(ziek) ) %&gt;% ## there is just one &quot;ziek&quot; action (2013-07-22) pull(Datum) ) ## filter: removed 11,558 rows (&gt;99%), one row remaining ## filter: removed 150,830 rows (&gt;99%), one row remaining ## mutate: changed one value (100%) of &#39;sovon_bird_date_begin&#39; (1 fewer NA) info_ycaf The date of applying FHOV: info_fhov &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;FHOV&quot;) %&gt;% mutate( sovon_bird_date_begin = obs_and_acts %&gt;% filter( first_Nummer == &quot;SUAV&quot;, !is.na(ziek) ) %&gt;% ## there is just one &quot;ziek&quot; action (2018-04-26) pull(Datum) ) ## filter: removed 11,558 rows (&gt;99%), one row remaining ## filter: removed 150,830 rows (&gt;99%), one row remaining ## mutate: changed one value (100%) of &#39;sovon_bird_date_begin&#39; (1 fewer NA) info_fhov The date of applying HSOW: info_hsow &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;HSOW&quot;) %&gt;% mutate( sovon_bird_date_begin = obs_and_acts %&gt;% filter( first_Nummer == &quot;CPAG&quot;, !is.na(ziek) ) %&gt;% ## there is just one &quot;ziek&quot; action (2018-04-26) pull(Datum) ) ## filter: removed 11,558 rows (&gt;99%), one row remaining ## filter: removed 150,830 rows (&gt;99%), one row remaining ## mutate: changed one value (100%) of &#39;sovon_bird_date_begin&#39; (1 fewer NA) info_hsow Based on notes (column Opmerking in obs_and_acts) we understand that the color ring BUAH has been placed while applying the metal ring, so it is linked to action rngme. The date of applying BUAH: info_buah &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;BUAH&quot;) %&gt;% mutate( sovon_bird_date_begin = obs_and_acts %&gt;% filter( first_Nummer == &quot;ZBZZ&quot;, !is.na(rngme) ) %&gt;% pull(Datum) ) ## filter: removed 11,558 rows (&gt;99%), one row remaining ## filter: removed 150,830 rows (&gt;99%), one row remaining ## mutate: changed one value (100%) of &#39;sovon_bird_date_begin&#39; (1 fewer NA) info_buah Add this dates to crbirding_birds: crbirding_birds &lt;- bind_rows( crbirding_birds %&gt;% filter(!sovon_bird_shorthand %in% c(&quot;FAAG&quot;, &quot;YCAF&quot;, &quot;FHOV&quot;, &quot;HSOW&quot;, &quot;BUAH&quot;)), info_faag, info_ycaf, info_fhov, info_hsow, info_buah ) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) ## filter: removed 5 rows (&lt;1%), 11,554 rows remaining All rings in crbirding_birds have a date: crbirding_birds %&gt;% filter(!is.na(sovon_bird_date_begin)) %&gt;% nrow() == nrow(crbirding_birds) ## filter: no rows removed ## [1] TRUE 5.2.3.3 Add intermediate color rings Based on spreadsheet of experts, we have to add new rings, as some birds have been ringed more than twice, so the information contained in first_Nummer and NummerNieuw is not complete, as they map the very first and the very last ring. The intermediate rings are the following: intermediate_rings &lt;- tibble( first_Nummer = c( &quot;E633&quot;, &quot;DJAB&quot;, &quot;BWAD&quot;, &quot;KLAT&quot;, &quot;PR3&quot;, &quot;TY2&quot;, &quot;RTO&quot;, &quot;E099&quot;, &quot;MKAU&quot;, &quot;ASAH&quot;, &quot;ADAF&quot;, &quot;KMAV&quot;, &quot;KCAV&quot;, &quot;BCAV&quot; ), intermediate_ring = c( &quot;BUAG&quot;, &quot;TRAP&quot;, &quot;GTAS&quot;, &quot;UPAB&quot;, &quot;DHAZ&quot;, &quot;GMAJ&quot;, &quot;DGAH&quot;, &quot;GHAT&quot;, &quot;ZVAU&quot;, &quot;HWAX&quot;, &quot;DJAU&quot;, &quot;UMAR&quot;, &quot;RTAK&quot;, &quot;LMAA&quot; ), sovon_bird_date_begin = as.POSIXct(c( &quot;2000-05-08&quot;, ## BUAG &quot;2012-05-25&quot;, ## TRAP &quot;2007-06-01&quot;, ## GTAS &quot;2012-05-29&quot;, ## UPAB &quot;2006-05-26&quot;, ## DHAZ &quot;2007-06-06&quot;, ## GMAJ &quot;2006-05-17&quot;, ## DGAH &quot;2007-06-18&quot;, ## GHAT &quot;2014-05-23&quot;, ## ZVAU &quot;2009-05-18&quot;, ## HWAX &quot;2006-05-26&quot;, ## DJAU &quot;2012-05-31&quot;, ## UMAR &quot;2016-05-26&quot;, ## RTAK &quot;2009-06-01&quot; ## LMAA ), tz = &quot;UTC&quot;) ) intermediate_rings Retrieve sovon_bird_reference: intermediate_rings &lt;- intermediate_rings %&gt;% left_join(crbirding_birds %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_notes), by = c(&quot;first_Nummer&quot; = &quot;sovon_bird_shorthand&quot;) ) %&gt;% select( sovon_bird_reference, first_Nummer, intermediate_ring, sovon_bird_date_begin, sovon_bird_notes ) ## select: dropped 2 variables (sovon_bird_shorthand_pt, sovon_bird_date_begin) ## left_join: added 2 columns (sovon_bird_reference, sovon_bird_notes) ## &gt; rows only in x 0 ## &gt; rows only in y (11,545) ## &gt; matched rows 14 ## &gt; ======== ## &gt; rows total 14 ## select: columns reordered (sovon_bird_reference, first_Nummer, intermediate_ring, sovon_bird_date_begin, sovon_bird_notes) intermediate_rings Check whether all dates are linked to a valid observation and check whether they are linked to vang/vangl actions: intermediate_rings %&gt;% left_join(obs_and_acts %&gt;% select( sovon_bird_reference, Datum, acts, first_Nummer ), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot;, &quot;first_Nummer&quot; ) ) %&gt;% filter(!is.na(vang) | !is.na(vangl)) %&gt;% select_if(function(x) any(!is.na(x))) ## select: dropped 26 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## left_join: added 12 columns (rngkl, rngme, klgev, br, vang, ) ## &gt; rows only in x 0 ## &gt; rows only in y (150,817) ## &gt; matched rows 14 ## &gt; ========= ## &gt; rows total 14 ## filter: no rows removed ## select_if: dropped 10 variables (rngkl, klgev, br, dood, klweg, ) We can then add the intermediate rings to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(intermediate_rings %&gt;% select(-first_Nummer) %&gt;% rename(sovon_bird_shorthand = intermediate_ring) %&gt;% mutate(sovon_bird_shorthand_pt = sovon_bird_shorthand)) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) ## select: dropped one variable (first_Nummer) ## rename: renamed one variable (sovon_bird_shorthand) ## mutate: new variable &#39;sovon_bird_shorthand_pt&#39; (character) with 14 unique values and 0% NA These are all mapped triplet ring sequences: bird_reference_triplets &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand %in% c(intermediate_rings$intermediate_ring)) %&gt;% distinct(sovon_bird_reference) %&gt;% pull() ## filter: removed 11,559 rows (&gt;99%), 14 rows remaining ## distinct: no rows removed crbirding_birds %&gt;% filter(sovon_bird_reference %in% bird_reference_triplets) ## filter: removed 11,531 rows (&gt;99%), 42 rows remaining At this point all rings should have a sovon_bird_date_begin: crbirding_birds %&gt;% filter(!is.na(sovon_bird_date_begin)) %&gt;% nrow() == nrow(crbirding_birds) ## filter: no rows removed ## [1] TRUE 5.2.4 Bird ringing end date For birds ringed more than once, we can assign an end date for the changed rings. This information will be stored in field sovon_bird_date_end. The end date is equal to the date of applying the new ring assign_end_date &lt;- function(data) { if (nrow(data) &gt; 1) { return(c( as_date(data$sovon_bird_date_begin[2:nrow(data)], tz = &quot;UTC&quot;), as_date(NA, tz = &quot;UTC&quot;) )) } else { return(as_date(NA, tz = &quot;UTC&quot;)) } } crbirding_birds &lt;- crbirding_birds %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) %&gt;% group_by(sovon_bird_reference) %&gt;% nest() %&gt;% mutate(sovon_bird_date_end = map(data, assign_end_date)) %&gt;% unnest(cols = c(data, sovon_bird_date_end)) %&gt;% mutate(sovon_bird_date_end = as.POSIXct(sovon_bird_date_end)) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes ) %&gt;% ungroup() ## group_by: one grouping variable (sovon_bird_reference) ## mutate (grouped): new variable &#39;sovon_bird_date_end&#39; (list) with 165 unique values and 97% NA ## mutate (grouped): converted &#39;sovon_bird_date_end&#39; from Date to double (0 new NA) ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, ) ## ungroup: no grouping variables As example, we show the chronology of color rings for birds ringed thrice: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 3) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 3 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 11,531 rows (&gt;99%), 42 rows remaining ## select: dropped 3 variables (sovon_bird_shorthand_pt, sovon_bird_notes, n) We add end date to the very last ring of dead birds by using the link to observations with action dood: crbirding_birds &lt;- obs_and_acts %&gt;% filter(dood == &quot;dood&quot;) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(bird_dood_datum = Datum) %&gt;% right_join(crbirding_birds, by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% group_by(sovon_bird_reference) %&gt;% mutate(sovon_bird_date_end = case_when( is.na(sovon_bird_date_end) &amp; sovon_bird_date_begin == max(sovon_bird_date_begin) &amp; bird_dood_datum &gt;= sovon_bird_date_begin ~ bird_dood_datum, TRUE ~ sovon_bird_date_end )) %&gt;% select(-bird_dood_datum) ## filter: removed 150,101 rows (&gt;99%), 730 rows remaining ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## rename: renamed one variable (bird_dood_datum) ## right_join: added 5 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes) ## &gt; rows only in x ( 0) ## &gt; rows only in y 10,831 ## &gt; matched rows 742 ## &gt; ======== ## &gt; rows total 11,573 ## group_by: one grouping variable (sovon_bird_reference) ## mutate (grouped): changed 730 values (6%) of &#39;sovon_bird_date_end&#39; (730 fewer NA) ## select: dropped one variable (bird_dood_datum) Effects of mapping: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin) &amp; !is.na(sovon_bird_date_end)) %&gt;% select(sovon_bird_reference) %&gt;% ungroup() %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, everything() ) ## group_by: one grouping variable (sovon_bird_reference) ## filter (grouped): removed 10,843 rows (94%), 730 rows remaining ## select: dropped 5 variables (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes) ## ungroup: no grouping variables ## left_join: added 5 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes) ## &gt; rows only in x 0 ## &gt; rows only in y (10,831) ## &gt; matched rows 742 (includes duplicates) ## &gt; ======== ## &gt; rows total 742 ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_shorthand_pt, ) Number of rings still in use, i.e. no end date: crbirding_birds %&gt;% filter(is.na(sovon_bird_date_end)) %&gt;% nrow() ## filter (grouped): removed 1,079 rows (9%), 10,494 rows remaining ## [1] 10494 5.2.5 Add rows for metal rings applied before color rings Sometimes metal rings have been applied before color rings. These cases should be added to crbirding_birds as new rows. We can detect these situations by comparing the date of actions rngme and rngkl for each bird. rngme_before_rngkl &lt;- obs_and_acts %&gt;% filter(!is.na(rngme) &amp; is.na(rngkl)) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(Datum_rngme = Datum) %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(Datum_rngkl = Datum), by = &quot;sovon_bird_reference&quot; ) %&gt;% filter(Datum_rngme &lt; Datum_rngkl) %&gt;% rename( sovon_bird_date_begin = Datum_rngme, sovon_bird_date_end = Datum_rngkl ) %&gt;% mutate( sovon_bird_shorthand = NA_character_, sovon_bird_shorthand_pt = NA_character_, sovon_bird_notes = &quot;sovon_bird_shorthand not available.&quot; ) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, everything() ) ## filter: removed 150,063 rows (99%), 768 rows remaining ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## rename: renamed one variable (Datum_rngme) ## filter: removed 139,607 rows (93%), 11,224 rows remaining ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## rename: renamed one variable (Datum_rngkl) ## left_join: added one column (Datum_rngkl) ## &gt; rows only in x 0 ## &gt; rows only in y (10,456) ## &gt; matched rows 768 ## &gt; ======== ## &gt; rows total 768 ## filter: removed 101 rows (13%), 667 rows remaining ## rename: renamed 2 variables (sovon_bird_date_begin, sovon_bird_date_end) ## mutate: new variable &#39;sovon_bird_shorthand&#39; (character) with one unique value and 100% NA ## new variable &#39;sovon_bird_shorthand_pt&#39; (character) with one unique value and 100% NA ## new variable &#39;sovon_bird_notes&#39; (character) with one unique value and 0% NA ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, ) rngme_before_rngkl We add these rows to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rngme_before_rngkl) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) A preview: crbirding_birds %&gt;% filter(sovon_bird_reference %in% (rngme_before_rngkl %&gt;% pull(sovon_bird_reference))) %&gt;% head(n = 50) ## filter (grouped): removed 10,877 rows (89%), 1,363 rows remaining 5.2.6 Ring number The ring number, or metal ring number, can be found in field MetaalringNummer, which contains the most recent metal ring number. Recoverying the complete chronology of metal rings for each bird is almost impossible as it is: not complete included in texutal description (field Opmerking of tblWaarneming) However, this is not considered a real problem by INBO and SOVON experts as both INBO and SOVON databases focus on color rings. See issue 34 for more details. Just as example, we can show the textual notes of observations linked to action vang and containing 6 or more consecutive numbers in the notes: obs_and_acts %&gt;% filter(str_detect(Opmerking, pattern = &quot;[0-9]{6,}&quot;)) %&gt;% filter(!is.na(vang)) %&gt;% select(Opmerking) ## filter: removed 150,242 rows (&gt;99%), 589 rows remaining ## filter: removed 466 rows (79%), 123 rows remaining ## select: dropped 40 variables (sovon_bird_reference, Nummer, Datum, EuringCode, LeeftijdCode, ) A ring number should consist of up to ten alphanumeric characters. At page 7 of the EURING Exchange Code 2000+ document we read the following instructions: Where the ring number consist of fewer than ten numbers/letters, the number is padded with dots. These dots are always inserted to the left of the rightmost row of numbers. Ring number anomalies: birds %&gt;% filter(!str_detect(MetaalringNummer, pattern = regex(&quot;\\\\d+&quot;))) %&gt;% group_by(MetaalringNummer) %&gt;% count() ## filter: removed 11,174 rows (&gt;99%), 50 rows remaining ## group_by: one grouping variable (MetaalringNummer) ## count: now 5 rows and 2 columns, one group variable remaining (MetaalringNummer) Value none means not metal-ringed bird, while onbekend means that information is no more available. SOVON chooses to leave column sovon_bird_ring_number empty for both cases. However, we will add a note to sovon_bird_notes to still maintain a reference to this slight difference. Value ? is equivalent to onbekend while H???????? and Lxxxxxx are mapped as H-------- and L------ respectively. birds &lt;- birds %&gt;% mutate(sovon_bird_ring_number = recode( MetaalringNummer, &quot;?&quot; = NA_character_, &quot;onbekend&quot; = NA_character_, &quot;none&quot; = NA_character_, &quot;H????????&quot; = &quot;H--------&quot;, &quot;Lxxxxxx&quot; = &quot;L------&quot; )) ## mutate: new variable &#39;sovon_bird_ring_number&#39; (character) with 11,111 unique values and 1% NA We separate the birds with special mapping values by all the others: special_values &lt;- c(&quot;H--------&quot;, &quot;L------&quot;) birds_special_values &lt;- birds %&gt;% filter(sovon_bird_ring_number %in% special_values) ## filter: removed 11,222 rows (&gt;99%), 2 rows remaining birds_others &lt;- birds %&gt;% filter(!sovon_bird_ring_number %in% special_values) ## filter: removed 2 rows (&lt;1%), 11,222 rows remaining Some ring numbers contain asterisks: birds_others %&gt;% filter(str_detect(sovon_bird_ring_number, &quot;\\\\*&quot;)) %&gt;% select(sovon_bird_ring_number) ## filter: removed 11,161 rows (99%), 61 rows remaining ## select: dropped 15 variables (sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, Nummer, ) We remove the asterisks: birds_others &lt;- birds_others %&gt;% mutate(sovon_bird_ring_number = str_remove_all(sovon_bird_ring_number, &quot;\\\\*&quot;)) ## mutate: changed 61 values (1%) of &#39;sovon_bird_ring_number&#39; (0 new NA) Preview: birds_others %&gt;% select(MetaalringNummer, sovon_bird_ring_number) %&gt;% filter(str_detect(MetaalringNummer, &quot;\\\\*&quot;)) ## select: dropped 14 variables (sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, Nummer, ) ## filter: removed 11,161 rows (99%), 61 rows remaining Add points . where needed: birds_others &lt;- birds_others %&gt;% # calculate the number of dots needed mutate(ndots = 10 - str_length(sovon_bird_ring_number)) %&gt;% # created a string with the needed dots mutate(dots = str_dup(&quot;.&quot;, ndots)) %&gt;% # concatenate the first uppercase letter, the dots and the digits together mutate(sovon_bird_ring_number = str_c( str_extract(sovon_bird_ring_number, &quot;^[:upper:]+&quot;), dots, str_extract(sovon_bird_ring_number, &quot;[:digit:]+$&quot;))) %&gt;% # remove auxiliary columns after use select(-c(ndots, dots)) ## mutate: new variable &#39;ndots&#39; (double) with 5 unique values and 1% NA ## mutate: new variable &#39;dots&#39; (character) with 5 unique values and 1% NA ## mutate: changed 11,143 values (99%) of &#39;sovon_bird_ring_number&#39; (23 new NA) ## select: dropped 2 variables (ndots, dots) Merge the two data frames together: birds &lt;- bind_rows(birds_others, birds_special_values) Preivew of the effects the mapping: birds %&gt;% distinct(MetaalringNummer, sovon_bird_ring_number) %&gt;% head(n = 200) ## distinct: removed 110 rows (1%), 11,114 rows remaining We have to be sure that no multiple metal rings are assigned to the same bird (sovon_bird_reference) as this is not allowed by our database. Exceptions: birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with one unique value and 0% NA ## ungroup: no grouping variables ## filter: removed all rows (100%) Later we will add value sovon_bird_ring_number to crbirding_birds where metal ring is present. 5.2.7 Initialize sovon_bird_rings_changed column for very first ring In order to better follow the mapping of metal AND color rings, SOVON suggested to add a column called sovon_bird_rings_changed, as shown in this GitHub comment. We initialize the column sovon_bird_rings_changed for the very first ringing by assigning: sovon_bird_rings_changed = 0 if rngme action only sovon_bird_rings_changed = 1 if rngkl action only sovon_bird_rings_changed = 2 if rngkl and rngme If very first bird_shorthand is empty, it means that the bird has been first ringed with a metal ring, sovon_bird_rings_changed = 0: crbirding_birds &lt;- crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% mutate(sovon_bird_rings_changed = if_else( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; is.na(sovon_bird_shorthand), 0, NA_real_ )) %&gt;% ungroup() ## group_by: one grouping variable (sovon_bird_reference) ## mutate (grouped): new variable &#39;sovon_bird_rings_changed&#39; (double) with 2 unique values and 95% NA ## ungroup: no grouping variables We proceed now by mapping values 1 (action rngkl only) and 2 (action rngkl and rngme together): crbirding_birds &lt;- crbirding_birds %&gt;% left_join(obs_and_acts %&gt;% filter(rngkl == &quot;rngkl&quot;) %&gt;% mutate(n_rings = if_else(is.na(rngme), 1, 2)) %&gt;% select(sovon_bird_reference, n_rings, Datum), by = &quot;sovon_bird_reference&quot; ) %&gt;% group_by(sovon_bird_reference) %&gt;% mutate(sovon_bird_rings_changed = if_else( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; !is.na(sovon_bird_shorthand), n_rings, sovon_bird_rings_changed )) %&gt;% select(-c(n_rings, Datum)) %&gt;% ungroup() ## filter: removed 139,607 rows (93%), 11,224 rows remaining ## mutate: new variable &#39;n_rings&#39; (double) with 2 unique values and 0% NA ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## left_join: added 2 columns (n_rings, Datum) ## &gt; rows only in x 0 ## &gt; rows only in y ( 0) ## &gt; matched rows 12,240 ## &gt; ======== ## &gt; rows total 12,240 ## group_by: one grouping variable (sovon_bird_reference) ## mutate (grouped): changed 10,557 values (86%) of &#39;sovon_bird_rings_changed&#39; (10557 fewer NA) ## select: dropped 2 variables (n_rings, Datum) ## ungroup: no grouping variables Preview sovon_bird_rings_changed = 1: crbirding_birds %&gt;% filter(sovon_bird_rings_changed == 1) %&gt;% head(n = 10) ## filter: removed 12,139 rows (99%), 101 rows remaining Preview sovon_bird_rings_changed = 2: crbirding_birds %&gt;% filter(sovon_bird_rings_changed == 2) %&gt;% head(n = 10) ## filter: removed 1,784 rows (15%), 10,456 rows remaining 5.2.8 Add help field metal_ring_missing We add also a help column, metal_ring_missing: it will help us later to fill the field sovon_ring_number only where metal ring is present. We initialize it as FALSE except for very first metal rings only (sovon_bird_rings_changed = 1): crbirding_birds &lt;- crbirding_birds %&gt;% mutate(metal_ring_missing = if_else( sovon_bird_rings_changed != 1 | is.na(sovon_bird_rings_changed), FALSE, TRUE )) ## mutate: new variable &#39;metal_ring_missing&#39; (logical) with 2 unique values and 0% NA Preview metal_ring_missing = FALSE: crbirding_birds %&gt;% filter(metal_ring_missing == FALSE) %&gt;% head(n = 50) ## filter: removed 101 rows (1%), 12,139 rows remaining Preview metal_ring_missing = TRUE: crbirding_birds %&gt;% filter(metal_ring_missing == TRUE) %&gt;% head(n = 50) ## filter: removed 12,139 rows (99%), 101 rows remaining 5.2.9 Add rows for first metal ring applied after color rings Sometimes metal rings have been applied after color rings. We can detect these situations by using sovon_bird_rings_changed value 1 (rngkl only) to identify the birds, observations with action rngme to get date of applying metal rings: rngme_after_rngkl &lt;- crbirding_birds %&gt;% filter(sovon_bird_rings_changed == 1) %&gt;% select(sovon_bird_reference) %&gt;% left_join(obs_and_acts %&gt;% filter(rngme == &quot;rngme&quot;) %&gt;% select(sovon_bird_reference, Datum), by = &quot;sovon_bird_reference&quot; ) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(sovon_bird_date_begin = Datum) ## filter: removed 12,139 rows (99%), 101 rows remaining ## select: dropped 7 variables (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, ) ## filter: removed 139,607 rows (93%), 11,224 rows remaining ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## left_join: added one column (Datum) ## &gt; rows only in x 0 ## &gt; rows only in y (11,123) ## &gt; matched rows 101 ## &gt; ======== ## &gt; rows total 101 ## select: no changes ## rename: renamed one variable (sovon_bird_date_begin) rngme_after_rngkl If sovon_bird_reference and sovon_bird_date_begin are already present in crbirding_birds means that applying a metal ring occurred while changing color ring during a vang action: no rows should be added then, but sovon_bird_rings_changed = 2: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(rngme_after_rngkl %&gt;% rename(rngme_date = sovon_bird_date_begin), by = &quot;sovon_bird_reference&quot; ) %&gt;% mutate(sovon_bird_rings_changed = case_when( sovon_bird_date_begin == rngme_date ~ 2, TRUE ~ sovon_bird_rings_changed )) %&gt;% select(-rngme_date) ## rename: renamed one variable (rngme_date) ## left_join: added one column (rngme_date) ## &gt; rows only in x 12,040 ## &gt; rows only in y ( 0) ## &gt; matched rows 200 ## &gt; ======== ## &gt; rows total 12,240 ## mutate: changed 94 values (1%) of &#39;sovon_bird_rings_changed&#39; (94 fewer NA) ## select: dropped one variable (rngme_date) Show changes: rngme_after_rngkl %&gt;% inner_join(crbirding_birds, by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot;) ) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, metal_ring_missing, everything() ) ## inner_join: added 6 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_end, sovon_bird_notes, sovon_bird_rings_changed, ) ## &gt; rows only in x ( 7) ## &gt; rows only in y (12,146) ## &gt; matched rows 94 ## &gt; ======== ## &gt; rows total 94 ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, ) On the other side, if sovon_bird_reference and sovon_bird_date_begin are not present in crbirding_birds, we add them as new rows where sovon_bird_rings_changed = 0 and metal_ring_missing is FALSE. Rows to add: rngme_without_change_rngkl &lt;- rngme_after_rngkl %&gt;% anti_join(crbirding_birds, by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot;)) %&gt;% rename(rngme_date = sovon_bird_date_begin) %&gt;% right_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; rngme_date) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate( sovon_bird_rings_changed = 0, metal_ring_missing = FALSE, sovon_bird_date_begin = rngme_date ) %&gt;% select(names(crbirding_birds)) %&gt;% ungroup() ## anti_join: added no columns ## &gt; rows only in x 7 ## &gt; rows only in y (12,146) ## &gt; matched rows ( 94) ## &gt; ======== ## &gt; rows total 7 ## rename: renamed one variable (rngme_date) ## right_join: added 7 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, ) ## &gt; rows only in x ( 0) ## &gt; rows only in y 12,233 ## &gt; matched rows 7 ## &gt; ======== ## &gt; rows total 12,240 ## group_by: one grouping variable (sovon_bird_reference) ## filter (grouped): removed 12,233 rows (&gt;99%), 7 rows remaining ## filter (grouped): no rows removed ## mutate (grouped): changed 7 values (100%) of &#39;sovon_bird_date_begin&#39; (0 new NA) ## changed 7 values (100%) of &#39;sovon_bird_rings_changed&#39; (0 new NA) ## changed 7 values (100%) of &#39;metal_ring_missing&#39; (0 new NA) ## select: dropped one variable (rngme_date) ## ungroup: no grouping variables rngme_without_change_rngkl Add these new rows: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rngme_without_change_rngkl) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% group_by(sovon_bird_reference, sovon_bird_date_end) %&gt;% mutate(sovon_bird_date_end_updated = case_when( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; sovon_bird_date_begin != max(sovon_bird_date_begin) ~ max(sovon_bird_date_begin), TRUE ~ sovon_bird_date_end )) %&gt;% ungroup() %&gt;% mutate(sovon_bird_date_end = sovon_bird_date_end_updated) %&gt;% select(-sovon_bird_date_end_updated) ## group_by: 2 grouping variables (sovon_bird_reference, sovon_bird_date_end) ## mutate (grouped): new variable &#39;sovon_bird_date_end_updated&#39; (double) with 637 unique values and 86% NA ## ungroup: no grouping variables ## mutate: changed 7 values (&lt;1%) of &#39;sovon_bird_date_end&#39; (6 fewer NA) ## select: dropped one variable (sovon_bird_date_end_updated) Show changes: crbirding_birds %&gt;% filter(sovon_bird_reference %in% c(rngme_without_change_rngkl$sovon_bird_reference)) ## filter: removed 12,233 rows (&gt;99%), 14 rows remaining For these birds, we can then assign value 1 to sovon_bird_rings_changed while applying color ring as rngkl occurs after rngme: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_rings_changed = case_when( sovon_bird_reference %in% rngme_before_rngkl$sovon_bird_reference &amp; !is.na(sovon_bird_shorthand) ~ 1, TRUE ~ sovon_bird_rings_changed )) ## mutate: changed 696 values (6%) of &#39;sovon_bird_rings_changed&#39; (696 fewer NA) Show changes in color/metal ring for these birds: crbirding_birds %&gt;% filter(sovon_bird_reference %in% rngme_before_rngkl$sovon_bird_reference) ## filter: removed 10,884 rows (89%), 1,363 rows remaining 5.2.10 Add rows for loosing color or metal rings: klweg, meweg We have observations linked to actions klweg and meweg. These actions mean that the bird has been observed without the color ring or metal ring respectively. Number of observations with action klweg: obs_and_acts %&gt;% filter(klweg == &quot;klweg&quot;) %&gt;% nrow() ## filter: removed 150,762 rows (&gt;99%), 69 rows remaining ## [1] 69 Type of action combinations where klweg occurs: obs_and_acts %&gt;% filter(klweg == &quot;klweg&quot;) %&gt;% select(acts) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) ## filter: removed 150,762 rows (&gt;99%), 69 rows remaining ## select: dropped 29 variables (sovon_bird_reference, Nummer, Datum, EuringCode, LeeftijdCode, ) ## distinct: removed 62 rows (90%), 7 rows remaining ## select_if: dropped 5 variables (rngkl, rngme, klgev, meweg, vangl) Number of observations with action meweg: obs_and_acts %&gt;% filter(meweg == &quot;meweg&quot;) %&gt;% nrow() ## filter: removed 150,706 rows (&gt;99%), 125 rows remaining ## [1] 125 Type of action combinations where meweg occurs: obs_and_acts %&gt;% filter(meweg == &quot;meweg&quot;) %&gt;% select(acts) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) ## filter: removed 150,706 rows (&gt;99%), 125 rows remaining ## select: dropped 29 variables (sovon_bird_reference, Nummer, Datum, EuringCode, LeeftijdCode, ) ## distinct: removed 119 rows (95%), 6 rows remaining ## select_if: dropped 6 variables (rngkl, rngme, klgev, klweg, me, ) Are there birds linked to both actions klweg and meweg? bird_ref_meweg &lt;- obs_and_acts %&gt;% filter(meweg == &quot;meweg&quot;) %&gt;% pull(sovon_bird_reference) ## filter: removed 150,706 rows (&gt;99%), 125 rows remaining bird_ref_klweg &lt;- (obs_and_acts %&gt;% filter(klweg == &quot;klweg&quot;) %&gt;% pull(sovon_bird_reference)) ## filter: removed 150,762 rows (&gt;99%), 69 rows remaining bird_ref_meweg[which(bird_ref_meweg %in% bird_ref_klweg)] ## integer(0) Are there more than one meweg for bird? bird_ref_multiple_meweg &lt;- obs_and_acts %&gt;% filter(meweg == &quot;meweg&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) ## filter: removed 150,706 rows (&gt;99%), 125 rows remaining ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with one unique value and 0% NA ## ungroup: no grouping variables ## filter: removed all rows (100%) bird_ref_multiple_meweg Are there more than one klweg for bird? bird_ref_multiple_klweg &lt;- obs_and_acts %&gt;% filter(klweg == &quot;klweg&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) ## filter: removed 150,762 rows (&gt;99%), 69 rows remaining ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 2 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 67 rows (97%), 2 rows remaining bird_ref_multiple_klweg If meweg/klweg occurs not in combination with dood or vang/ vangl, then a new row should be added to crbirding_birds as the ring situation changed. We create first new rows based on action meweg. We set sovon_bird_rings_changed = 0 and metal_ring_missing = TRUE: rings_to_add_meweg &lt;- obs_and_acts %&gt;% filter(meweg == &quot;meweg&quot; &amp; is.na(dood) &amp; is.na(vang) &amp; is.na(vangl)) %&gt;% select(sovon_bird_reference, Datum) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; Datum) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate(sovon_bird_date_begin = Datum) %&gt;% select(-Datum) %&gt;% mutate( sovon_bird_rings_changed = 0, metal_ring_missing = TRUE ) %&gt;% ungroup() %&gt;% arrange(sovon_bird_reference) ## filter: removed 150,709 rows (&gt;99%), 122 rows remaining ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## left_join: added 7 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, ) ## &gt; rows only in x 0 ## &gt; rows only in y (12,081) ## &gt; matched rows 166 (includes duplicates) ## &gt; ======== ## &gt; rows total 166 ## group_by: one grouping variable (sovon_bird_reference) ## filter (grouped): removed 35 rows (21%), 131 rows remaining ## filter (grouped): removed 9 rows (7%), 122 rows remaining ## mutate (grouped): changed 122 values (100%) of &#39;sovon_bird_date_begin&#39; (0 new NA) ## select: dropped one variable (Datum) ## mutate (grouped): changed 122 values (100%) of &#39;sovon_bird_rings_changed&#39; (1 fewer NA) ## changed 122 values (100%) of &#39;metal_ring_missing&#39; (0 new NA) ## ungroup: no grouping variables rings_to_add_meweg We add them, paying attention to change bird_date_end of previous rings: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rings_to_add_meweg) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% group_by(sovon_bird_reference, sovon_bird_date_end) %&gt;% mutate(sovon_bird_date_end_updated = case_when( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; sovon_bird_date_begin != max(sovon_bird_date_begin) ~ max(sovon_bird_date_begin), TRUE ~ sovon_bird_date_end )) %&gt;% ungroup() %&gt;% mutate(sovon_bird_date_end = sovon_bird_date_end_updated) %&gt;% select(-sovon_bird_date_end_updated) ## group_by: 2 grouping variables (sovon_bird_reference, sovon_bird_date_end) ## mutate (grouped): new variable &#39;sovon_bird_date_end_updated&#39; (double) with 741 unique values and 85% NA ## ungroup: no grouping variables ## mutate: changed 122 values (1%) of &#39;sovon_bird_date_end&#39; (84 fewer NA) ## select: dropped one variable (sovon_bird_date_end_updated) and setting sovon_bird_rings_changed = 2 for the next ring, if exists: rings_to_update &lt;- rings_to_add_meweg %&gt;% filter(!is.na(sovon_bird_date_end)) %&gt;% left_join( obs_and_acts %&gt;% filter(dood == &quot;dood&quot;) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(bird_dood_datum = Datum), by = &quot;sovon_bird_reference&quot; ) %&gt;% filter(is.na(bird_dood_datum)) %&gt;% select(-bird_dood_datum) %&gt;% select(sovon_bird_reference, sovon_bird_date_end) %&gt;% left_join(crbirding_birds %&gt;% select(-sovon_bird_date_end), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_end&quot; = &quot;sovon_bird_date_begin&quot; ) ) %&gt;% rename(sovon_bird_date_begin = sovon_bird_date_end) %&gt;% mutate( sovon_bird_rings_changed = 2, metal_ring_missing = FALSE ) %&gt;% left_join(crbirding_birds %&gt;% select(-c( sovon_bird_rings_changed, metal_ring_missing )), by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot;, &quot;sovon_bird_date_begin&quot;, &quot;sovon_bird_notes&quot; ) ) %&gt;% select(names(crbirding_birds)) ## filter: removed 84 rows (69%), 38 rows remaining ## filter: removed 150,101 rows (&gt;99%), 730 rows remaining ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## rename: renamed one variable (bird_dood_datum) ## left_join: added one column (bird_dood_datum) ## &gt; rows only in x 30 ## &gt; rows only in y (722) ## &gt; matched rows 8 ## &gt; ===== ## &gt; rows total 38 ## filter: removed 8 rows (21%), 30 rows remaining ## select: dropped one variable (bird_dood_datum) ## select: dropped 6 variables (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_notes, sovon_bird_rings_changed, ) ## select: dropped one variable (sovon_bird_date_end) ## left_join: added 5 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_notes, sovon_bird_rings_changed, metal_ring_missing) ## &gt; rows only in x 0 ## &gt; rows only in y (12,339) ## &gt; matched rows 30 ## &gt; ======== ## &gt; rows total 30 ## rename: renamed one variable (sovon_bird_date_begin) ## mutate: changed 30 values (100%) of &#39;sovon_bird_rings_changed&#39; (26 fewer NA) ## select: dropped 2 variables (sovon_bird_rings_changed, metal_ring_missing) ## left_join: added one column (sovon_bird_date_end) ## &gt; rows only in x 0 ## &gt; rows only in y (12,339) ## &gt; matched rows 30 ## &gt; ======== ## &gt; rows total 30 ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, ) crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(rings_to_update, by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot; ) ) %&gt;% bind_rows(rings_to_update) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) ## anti_join: added no columns ## &gt; rows only in x 12,339 ## &gt; rows only in y ( 0) ## &gt; matched rows ( 30) ## &gt; ======== ## &gt; rows total 12,339 Show changes: crbirding_birds %&gt;% filter(sovon_bird_reference %in% rings_to_add_meweg$sovon_bird_reference) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, metal_ring_missing, everything() ) ## filter: removed 12,081 rows (98%), 288 rows remaining ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, ) We create now new rows based on action klweg. We set sovon_bird_rings_changed = 1, metal_ring_missing = FALSE and we leave bird_shorthand empty: rings_to_add_klweg &lt;- obs_and_acts %&gt;% filter(klweg == &quot;klweg&quot; &amp; is.na(dood) &amp; is.na(vang) &amp; is.na(vangl)) %&gt;% select(sovon_bird_reference, Datum) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; Datum) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate(sovon_bird_date_begin = Datum) %&gt;% select(-Datum) %&gt;% mutate( sovon_bird_rings_changed = 1, metal_ring_missing = FALSE, sovon_bird_shorthand = NA_character_, sovon_bird_shorthand_pt = NA_character_ ) %&gt;% ungroup() %&gt;% arrange(sovon_bird_reference) ## filter: removed 150,773 rows (&gt;99%), 58 rows remaining ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## left_join: added 7 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, ) ## &gt; rows only in x 0 ## &gt; rows only in y (12,292) ## &gt; matched rows 79 (includes duplicates) ## &gt; ======== ## &gt; rows total 79 ## group_by: one grouping variable (sovon_bird_reference) ## filter (grouped): removed 11 rows (14%), 68 rows remaining ## filter (grouped): removed 11 rows (16%), 57 rows remaining ## mutate (grouped): changed 57 values (100%) of &#39;sovon_bird_date_begin&#39; (0 new NA) ## select: dropped one variable (Datum) ## mutate (grouped): changed 57 values (100%) of &#39;sovon_bird_shorthand&#39; (57 new NA) ## changed 57 values (100%) of &#39;sovon_bird_shorthand_pt&#39; (57 new NA) ## changed 50 values (88%) of &#39;sovon_bird_rings_changed&#39; (1 fewer NA) ## ungroup: no grouping variables rings_to_add_klweg We add then these new rows, paying attention to change bird_date_end of previous rings: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rings_to_add_klweg) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% group_by(sovon_bird_reference, sovon_bird_date_end) %&gt;% mutate(sovon_bird_date_end_updated = case_when( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; sovon_bird_date_begin != max(sovon_bird_date_begin) ~ max(sovon_bird_date_begin), TRUE ~ sovon_bird_date_end )) %&gt;% ungroup() %&gt;% mutate(sovon_bird_date_end = sovon_bird_date_end_updated) %&gt;% select(-sovon_bird_date_end_updated) ## group_by: 2 grouping variables (sovon_bird_reference, sovon_bird_date_end) ## mutate (grouped): new variable &#39;sovon_bird_date_end_updated&#39; (double) with 781 unique values and 84% NA ## ungroup: no grouping variables ## mutate: changed 56 values (&lt;1%) of &#39;sovon_bird_date_end&#39; (46 fewer NA) ## select: dropped one variable (sovon_bird_date_end_updated) Show changes: crbirding_birds %&gt;% filter(sovon_bird_reference %in% rings_to_add_klweg$sovon_bird_reference) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, metal_ring_missing, everything() ) ## filter: removed 12,292 rows (99%), 134 rows remaining ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, ) 5.2.11 Add rows for found color or metal rings: klgev, megev We have observations linked to actions klgev and megev. These actions mean that a color/metal ring has been found. This means the bird is not wearing it anymore: we proceed as in previous section by adding a new row in crbirding_birds. Number of observations with action klgev: obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% nrow() ## filter: removed 150,793 rows (&gt;99%), 38 rows remaining ## [1] 38 Type of action combinations where klgev occurs: obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% select(acts) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) ## filter: removed 150,793 rows (&gt;99%), 38 rows remaining ## select: dropped 29 variables (sovon_bird_reference, Nummer, Datum, EuringCode, LeeftijdCode, ) ## distinct: removed 37 rows (97%), one row remaining ## select_if: dropped 11 variables (rngkl, rngme, br, vang, dood, ) Number of observations with action megev: if (&quot;megev&quot; %in% acts) { obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% nrow() } else { message(&quot;0&quot;) } ## 0 Type of action combinations where megev occurs: if (&quot;megev&quot; %in% acts) { obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% select(acts) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) } else { message(&quot;&#39;megev&#39; is not present.&quot;) } ## &#39;megev&#39; is not present. Are there observations of birds linked to both actions klgev and megev? bird_ref_klgev &lt;- (obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% pull(sovon_bird_reference)) ## filter: removed 150,793 rows (&gt;99%), 38 rows remaining if (&quot;megev&quot; %in% acts) { bird_ref_megev &lt;- obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% pull(sovon_bird_reference) bird_ref_meweg[which(bird_ref_megev %in% bird_ref_klgev)] } else { message(&quot;&#39;megev&#39; is not present.&quot;) } ## &#39;megev&#39; is not present. Are there observations of birds linked to action klgev and klweg? bird_ref_klgev[which(bird_ref_klgev %in% bird_ref_klweg)] ## integer(0) Are there observations of birds linked to action klgev and meweg? bird_ref_klgev[which(bird_ref_klgev %in% bird_ref_meweg)] ## integer(0) Are there more than one megev for bird? if (&quot;megev&quot; %in% acts) { bird_ref_multiple_megev &lt;- obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) bird_ref_multiple_megev } else { message(&quot;&#39;megev&#39; is not present.&quot;) } ## &#39;megev&#39; is not present. Are there more than one klgev for bird? bird_ref_multiple_klgev &lt;- obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) ## filter: removed 150,793 rows (&gt;99%), 38 rows remaining ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with one unique value and 0% NA ## ungroup: no grouping variables ## filter: removed all rows (100%) bird_ref_multiple_klgev We add new rows to crbirding_birds as the ring situation changed at each of these observations/actions. We create first new rows based on action megev. We set sovon_bird_rings_changed = 0 and metal_ring_missing = TRUE: if (&quot;megev&quot; %in% acts) { rings_to_add_megev &lt;- obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% select(sovon_bird_reference, Datum) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; Datum) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate(sovon_bird_date_begin = Datum) %&gt;% select(-Datum) %&gt;% mutate( sovon_bird_rings_changed = 0, metal_ring_missing = TRUE ) %&gt;% ungroup() %&gt;% arrange(sovon_bird_reference) rings_to_add_megev } else { message(&quot;&#39;megev&#39; is not present.&quot;) } ## &#39;megev&#39; is not present. We add them, paying attention to change bird_date_end of previous rings: if (&quot;megev&quot; %in% acts) { crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rings_to_add_megev) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% group_by(sovon_bird_reference, sovon_bird_date_end) %&gt;% mutate(sovon_bird_date_end_updated = case_when( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; sovon_bird_date_begin != max(sovon_bird_date_begin) ~ max(sovon_bird_date_begin), TRUE ~ sovon_bird_date_end )) %&gt;% ungroup() %&gt;% mutate(sovon_bird_date_end = sovon_bird_date_end_updated) %&gt;% select(-sovon_bird_date_end_updated) } else { message(&quot;&#39;megev&#39; is not present.&quot;) } ## &#39;megev&#39; is not present. Show changes: if (&quot;megev&quot; %in% acts) { crbirding_birds %&gt;% filter(sovon_bird_reference %in% rings_to_add_megev$sovon_bird_reference) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, metal_ring_missing, sovon_bird_date_begin, sovon_bird_date_end, everything() ) } else { message(&quot;&#39;megev&#39; is not present.&quot;) } ## &#39;megev&#39; is not present. We create now new rows based on action klgev. We set sovon_bird_rings_changed = 1, metal_ring_missing = FALSE and we leave bird_shorthand empty: rings_to_add_klgev &lt;- obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% select(sovon_bird_reference, Datum) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; Datum) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate( sovon_bird_date_begin = Datum, sovon_bird_date_end = case_when( sovon_bird_date_end == sovon_bird_date_begin ~ as.POSIXct.Date(NA), TRUE ~ sovon_bird_date_end ) ) %&gt;% select(-Datum) %&gt;% mutate( sovon_bird_rings_changed = 1, metal_ring_missing = FALSE, sovon_bird_shorthand = NA_character_, sovon_bird_shorthand_pt = NA_character_ ) %&gt;% ungroup() %&gt;% arrange(sovon_bird_reference) ## filter: removed 150,793 rows (&gt;99%), 38 rows remaining ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## left_join: added 7 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, ) ## &gt; rows only in x 0 ## &gt; rows only in y (12,384) ## &gt; matched rows 42 (includes duplicates) ## &gt; ======== ## &gt; rows total 42 ## group_by: one grouping variable (sovon_bird_reference) ## filter (grouped): removed 2 rows (5%), 40 rows remaining ## filter (grouped): removed 2 rows (5%), 38 rows remaining ## mutate (grouped): changed 38 values (100%) of &#39;sovon_bird_date_begin&#39; (0 new NA) ## changed 0 values (0%) of &#39;sovon_bird_date_end&#39; (0 new NA) ## select: dropped one variable (Datum) ## mutate (grouped): changed 38 values (100%) of &#39;sovon_bird_shorthand&#39; (38 new NA) ## changed 38 values (100%) of &#39;sovon_bird_shorthand_pt&#39; (38 new NA) ## changed 36 values (95%) of &#39;sovon_bird_rings_changed&#39; (0 new NA) ## ungroup: no grouping variables rings_to_add_klgev We add then these new rows, paying attention to change bird_date_end of previous rings: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rings_to_add_klgev) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% group_by(sovon_bird_reference, sovon_bird_date_end) %&gt;% mutate(sovon_bird_date_end_updated = case_when( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; sovon_bird_date_begin != max(sovon_bird_date_begin) ~ max(sovon_bird_date_begin), TRUE ~ sovon_bird_date_end )) %&gt;% ungroup() %&gt;% mutate(sovon_bird_date_end = sovon_bird_date_end_updated) %&gt;% select(-sovon_bird_date_end_updated) ## group_by: 2 grouping variables (sovon_bird_reference, sovon_bird_date_end) ## mutate (grouped): new variable &#39;sovon_bird_date_end_updated&#39; (double) with 795 unique values and 84% NA ## ungroup: no grouping variables ## mutate: changed 38 values (&lt;1%) of &#39;sovon_bird_date_end&#39; (36 fewer NA) ## select: dropped one variable (sovon_bird_date_end_updated) Show changes: crbirding_birds %&gt;% filter(sovon_bird_reference %in% rings_to_add_klgev$sovon_bird_reference) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, metal_ring_missing, everything() ) ## filter: removed 12,384 rows (99%), 80 rows remaining ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, ) 5.2.12 Finalize sovon_bird_rings_changed There are still rings where sovon_bird_rings_changed is empty: crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) ## filter: removed 12,264 rows (98%), 200 rows remaining Show more details, in particular the actions of observations related to the birds the rings come from and at the same date as sovon_bird_date_begin: crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) %&gt;% select(sovon_bird_reference, sovon_bird_date_begin) %&gt;% left_join(obs_and_acts %&gt;% select(Nummer, sovon_bird_reference, Datum, acts), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot; ) ) %&gt;% select_if(function(x) any(!is.na(x))) ## filter: removed 12,264 rows (98%), 200 rows remaining ## select: dropped 6 variables (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_end, sovon_bird_notes, sovon_bird_rings_changed, ) ## select: dropped 26 variables (EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, MetaalringNummer_obs, ) ## left_join: added 13 columns (Nummer, rngkl, rngme, klgev, br, ) ## &gt; rows only in x 0 ## &gt; rows only in y (150,628) ## &gt; matched rows 203 (includes duplicates) ## &gt; ========= ## &gt; rows total 203 ## select_if: dropped 6 variables (rngkl, rngme, klgev, br, dood, ) As expected most of them are vang only actions linked to applying new color rings. The veld actions only are just field observations occurring the very same date of vang action and will be never used for mapping. There are some ziek only actions: crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin) %&gt;% left_join(obs_and_acts %&gt;% select(Nummer, sovon_bird_reference, Datum, acts, Opmerking), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot; ) ) %&gt;% filter(ziek == &quot;ziek&quot; &amp; is.na(vangl)) %&gt;% select_if(function(x) any(!is.na(x))) ## filter: removed 12,264 rows (98%), 200 rows remaining ## select: dropped 5 variables (sovon_bird_shorthand_pt, sovon_bird_date_end, sovon_bird_notes, sovon_bird_rings_changed, metal_ring_missing) ## select: dropped 25 variables (EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, MetaalringNummer_obs, ) ## left_join: added 14 columns (Nummer, rngkl, rngme, klgev, br, ) ## &gt; rows only in x 0 ## &gt; rows only in y (150,628) ## &gt; matched rows 203 (includes duplicates) ## &gt; ========= ## &gt; rows total 203 ## filter: removed 199 rows (98%), 4 rows remaining ## select_if: dropped 10 variables (rngkl, rngme, klgev, br, vang, ) These three rings have been added before as particular cases of ringing while being sick. Based on notes and previous observations, we can see that FAAG has been applied together with a new metal ring, i.e. sovon_bird_rings_changed = 2, while the other two dont mention any change of metal ring: sovon_bird_rings_changed = 1: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_rings_changed = case_when( sovon_bird_shorthand == &quot;FAAG&quot; ~ 2, sovon_bird_shorthand %in% c(&quot;YCAF&quot;, &quot;FHOV&quot;) ~ 1, TRUE ~ sovon_bird_rings_changed )) ## mutate: changed 3 values (&lt;1%) of &#39;sovon_bird_rings_changed&#39; (3 fewer NA) The combination of vang + klweg doesnt change anything in the mapping, as noticing the absence of color ring happens at the same time of applying a new one. We can assess whether the metal ring is still present by checking the value of metal_ring_missing for the very previous ring. We make now two important assumptions: the ringer applies always a new metal ring if missing the ringer doesnt change a metal ring if present So, vang after a meweg or vang together with meweg are interpreted as applying a new metal ring, therefore sovon_bird_rings_changed = 2. Again, this is a consequence of the fact that the change of a metal ring is not coded by any action, but only described in informative notes. Effects of this mapping: rings_without_sovon_bird_rings_changed &lt;- crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) %&gt;% select(sovon_bird_reference, sovon_bird_date_begin) %&gt;% rename(date_ringing = sovon_bird_date_begin) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; date_ringing) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate( sovon_bird_rings_changed = case_when( is.na(sovon_bird_shorthand) ~ 1, !is.na(sovon_bird_shorthand) &amp; isTRUE(metal_ring_missing) ~ 2, !is.na(sovon_bird_shorthand) &amp; isFALSE(metal_ring_missing) ~ 1 ), metal_ring_missing = FALSE ) %&gt;% ungroup() %&gt;% select( sovon_bird_reference, sovon_bird_rings_changed, date_ringing, metal_ring_missing ) %&gt;% rename(sovon_bird_date_begin = date_ringing) %&gt;% left_join(crbirding_birds %&gt;% select(-c( sovon_bird_rings_changed, metal_ring_missing )), by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; ) ) %&gt;% select(names(crbirding_birds)) %&gt;% left_join(obs_and_acts %&gt;% filter((vang == &quot;vang&quot; | vangl == &quot;vangl&quot;) &amp; meweg == &quot;meweg&quot;) %&gt;% select(sovon_bird_reference, Datum, meweg), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot; ) ) %&gt;% mutate(sovon_bird_rings_changed = case_when( sovon_bird_rings_changed == 1 &amp; meweg == &quot;meweg&quot; ~ 2, TRUE ~ sovon_bird_rings_changed )) %&gt;% select(names(crbirding_birds)) ## filter: removed 12,267 rows (98%), 197 rows remaining ## select: dropped 6 variables (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_end, sovon_bird_notes, sovon_bird_rings_changed, ) ## rename: renamed one variable (date_ringing) ## left_join: added 7 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, ) ## &gt; rows only in x 0 ## &gt; rows only in y (12,051) ## &gt; matched rows 428 (includes duplicates) ## &gt; ======== ## &gt; rows total 428 ## group_by: one grouping variable (sovon_bird_reference) ## filter (grouped): removed 205 rows (48%), 223 rows remaining ## filter (grouped): removed 31 rows (14%), 192 rows remaining ## mutate (grouped): changed 183 values (95%) of &#39;sovon_bird_rings_changed&#39; (5 fewer NA) ## changed 3 values (2%) of &#39;metal_ring_missing&#39; (0 new NA) ## ungroup: no grouping variables ## select: dropped 5 variables (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes) ## rename: renamed one variable (sovon_bird_date_begin) ## select: dropped 2 variables (sovon_bird_rings_changed, metal_ring_missing) ## left_join: added 4 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_end, sovon_bird_notes) ## &gt; rows only in x 0 ## &gt; rows only in y (12,271) ## &gt; matched rows 193 (includes duplicates) ## &gt; ======== ## &gt; rows total 193 ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, ) ## filter: removed 150,830 rows (&gt;99%), one row remaining ## select: dropped 38 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## left_join: added one column (meweg) ## &gt; rows only in x 192 ## &gt; rows only in y ( 0) ## &gt; matched rows 1 ## &gt; ===== ## &gt; rows total 193 ## mutate: changed one value (1%) of &#39;sovon_bird_rings_changed&#39; (0 new NA) ## select: dropped one variable (meweg) rings_without_sovon_bird_rings_changed Update crbirding_birds based on the mapping above: crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(rings_without_sovon_bird_rings_changed, by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot;, &quot;sovon_bird_date_begin&quot;, &quot;sovon_bird_date_end&quot; ) ) %&gt;% bind_rows(rings_without_sovon_bird_rings_changed) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) ## anti_join: added no columns ## &gt; rows only in x 12,271 ## &gt; rows only in y ( 0) ## &gt; matched rows ( 193) ## &gt; ======== ## &gt; rows total 12,271 Rings still without sovon_bird_rings_changed: crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) ## filter: removed 12,459 rows (&gt;99%), 5 rows remaining These are intermediate rings of birds which got three color rings: crbirding_birds %&gt;% filter(sovon_bird_reference %in% (crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) %&gt;% pull(sovon_bird_reference))) ## filter: removed 12,459 rows (&gt;99%), 5 rows remaining ## filter: removed 12,449 rows (&gt;99%), 15 rows remaining All of them will get sovon_bird_rings_changed = 1: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_rings_changed = case_when( is.na(sovon_bird_rings_changed) ~ 1, TRUE ~ sovon_bird_rings_changed )) ## mutate: changed 5 values (&lt;1%) of &#39;sovon_bird_rings_changed&#39; (5 fewer NA) Check that all rings have a valid value (0, 1 or 2) for sovon_bird_rings_changed: crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) %&gt;% nrow() == 0 &amp; all(unique(crbirding_birds$sovon_bird_rings_changed) %in% c(0, 1, 2)) ## filter: removed all rows (100%) ## [1] TRUE We show a final overview. Birds getting color and metal ring at the same time and never ringed twice (only the first thousand are shown as this category includes more than 10 thousands rings): crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(sovon_bird_rings_changed == 2) %&gt;% filter(n == 1) %&gt;% select(-n) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 4 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 1,879 rows (15%), 10,585 rows remaining ## filter: removed 501 rows (5%), 10,084 rows remaining ## select: dropped one variable (n) Birds ringed in two different moments (only the first thousand are shown as this category includes more than two thousands rings): crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 2) %&gt;% select(-n) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 4 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 10,362 rows (83%), 2,102 rows remaining ## select: dropped one variable (n) Birds ringed at three different moments: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 3) %&gt;% select(-n) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 4 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 12,230 rows (98%), 234 rows remaining ## select: dropped one variable (n) Birds ringed at four different moments: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% filter(n == 4) %&gt;% select(-n) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 4 unique values and 0% NA ## filter (grouped): removed 12,420 rows (&gt;99%), 44 rows remaining ## select: dropped one variable (n) At Sept, 25 no birds are ringed more than four times: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% filter(n &gt;= 5) %&gt;% select(-n) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 4 unique values and 0% NA ## filter (grouped): removed all rows (100%) ## select: dropped one variable (n) 5.2.13 Map color of rings and inscriptions The color of the ring should be added, if available, to bird_shorthand. Its important to highlight the fact that we have this information only for the most recent color ring of each bird. Following combinations are present, although the color of the inscription InscriptieKleurCode will be not mapped: birds %&gt;% group_by(RingKleurCode, InscriptieKleurCode) %&gt;% count() ## group_by: 2 grouping variables (RingKleurCode, InscriptieKleurCode) ## count: now 5 rows and 3 columns, 2 group variables remaining (RingKleurCode, InscriptieKleurCode) We first map the colors based on the official cr-birding values ( cr-birding.org): color_table &lt;- color_table %&gt;% mutate(crbirding_color = case_when( Code == &quot;X&quot; ~ &quot;P&quot;, Code == &quot;Z&quot; ~ &quot;N&quot;, TRUE ~ Code )) ## mutate: new variable &#39;crbirding_color&#39; (character) with 8 unique values and 0% NA color_table We map the colors in birds: birds &lt;- birds %&gt;% left_join(color_table %&gt;% select(Code, crbirding_color), by = c(&quot;RingKleurCode&quot; = &quot;Code&quot;) ) %&gt;% rename(ring_color = crbirding_color) %&gt;% left_join(color_table %&gt;% select(Code, crbirding_color), by = c(&quot;InscriptieKleurCode&quot; = &quot;Code&quot;) ) %&gt;% rename(inscription_color = crbirding_color) ## select: dropped 3 variables (Beschrijving, BeschrijvingUK, Aktief) ## left_join: added one column (crbirding_color) ## &gt; rows only in x 88 ## &gt; rows only in y ( 4) ## &gt; matched rows 11,136 ## &gt; ======== ## &gt; rows total 11,224 ## rename: renamed one variable (ring_color) ## select: dropped 3 variables (Beschrijving, BeschrijvingUK, Aktief) ## left_join: added one column (crbirding_color) ## &gt; rows only in x 88 ## &gt; rows only in y ( 5) ## &gt; matched rows 11,136 ## &gt; ======== ## &gt; rows total 11,224 ## rename: renamed one variable (inscription_color) Effects of the mapping: birds %&gt;% distinct(ring_color, RingKleurCode, inscription_color, InscriptieKleurCode) ## distinct: removed 11,219 rows (&gt;99%), 5 rows remaining The bird_shorthand should be composed of: 1. color of the ring 3. inscription For example, B-BBAP is a dark blue ring (see issue #67). We add ring color to bird_shorthand: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, ring_color), by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(!is.na(sovon_bird_shorthand)) %&gt;% mutate(ring_color = if_else( sovon_bird_date_begin == max(sovon_bird_date_begin), ring_color, NA_character_ )) %&gt;% bind_rows(crbirding_birds %&gt;% filter(is.na(sovon_bird_shorthand))) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) %&gt;% mutate( sovon_bird_shorthand_color = case_when( !is.na(sovon_bird_shorthand) &amp; !is.na(ring_color) ~ paste0( ring_color, &quot;-&quot;, sovon_bird_shorthand ), TRUE ~ sovon_bird_shorthand ), sovon_bird_shorthand_pt_color = case_when( !is.na(sovon_bird_shorthand_pt) &amp; !is.na(ring_color) ~ paste0( ring_color, &quot;-&quot;, sovon_bird_shorthand_pt ), TRUE ~ sovon_bird_shorthand_pt ) ) %&gt;% ungroup() ## select: dropped 16 variables (first_Nummer, NummerNieuw, NummerDesc, Nummer, Plaats, ) ## left_join: added one column (ring_color) ## &gt; rows only in x 0 ## &gt; rows only in y ( 0) ## &gt; matched rows 12,464 ## &gt; ======== ## &gt; rows total 12,464 ## group_by: one grouping variable (sovon_bird_reference) ## filter (grouped): removed 762 rows (6%), 11,702 rows remaining ## mutate (grouped): changed 478 values (4%) of &#39;ring_color&#39; (478 new NA) ## filter: removed 11,702 rows (94%), 762 rows remaining ## mutate (grouped): new variable &#39;sovon_bird_shorthand_color&#39; (character) with 11,670 unique values and 6% NA ## new variable &#39;sovon_bird_shorthand_pt_color&#39; (character) with 11,670 unique values and 6% NA ## ungroup: no grouping variables As inscription color would be lost in cr-birding database, we add it as a note: inscription color: followed by the EURING Exchange Code 2000+ standard color code: crbirding_birds &lt;- crbirding_birds %&gt;% # filter(str_sub(sovon_bird_shorthand_color, start = 2, end = 2) == &quot;-&quot;) %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, inscription_color), by = &quot;sovon_bird_reference&quot;) %&gt;% mutate(sovon_bird_notes = if_else( str_sub(sovon_bird_shorthand_color, start = 2, end = 2) == &quot;-&quot;, if_else(is.na(sovon_bird_notes), str_c(&quot;inscription color: &quot;, inscription_color, &quot;.&quot;), str_c(sovon_bird_notes, str_c(&quot;inscription color: &quot;, inscription_color, &quot;.&quot;), sep = &quot; &quot;)), sovon_bird_notes)) ## select: dropped 16 variables (first_Nummer, NummerNieuw, NummerDesc, Nummer, Plaats, ) ## left_join: added one column (inscription_color) ## &gt; rows only in x 0 ## &gt; rows only in y ( 0) ## &gt; matched rows 12,464 ## &gt; ======== ## &gt; rows total 12,464 ## mutate: changed 11,803 values (95%) of &#39;sovon_bird_notes&#39; (10329 fewer NA) Some examples from birds ringed thrice or more: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 2) %&gt;% select( sovon_bird_reference, ring_color, inscription_color, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_notes, sovon_bird_date_begin, sovon_bird_date_end, everything() ) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 4 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 12,186 rows (98%), 278 rows remaining ## select: columns reordered (sovon_bird_reference, ring_color, inscription_color, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, ) Based on INBO experts knowledge, we can assign color of rings and inscriptions for a significant number of old, changed rings as well. All rings with a 4-letter long inscription where the third letter is an A are blue rings with white inscription (see https://github.com/inbo/cr-birding/issues/84#issuecomment-478938321). Rings still not mapped satisfying this condition: old_rings_with_A &lt;- crbirding_birds %&gt;% filter( !str_detect(sovon_bird_shorthand_color, &quot;\\\\-&quot;) &amp; str_detect(sovon_bird_shorthand, &quot;[A-Z]&quot;) &amp; str_length(sovon_bird_shorthand) == 4 &amp; str_sub(sovon_bird_shorthand, 3, 3) == &quot;A&quot; ) ## filter: removed 12,092 rows (97%), 372 rows remaining old_rings_with_A Assign colors: old_rings_with_A &lt;- old_rings_with_A %&gt;% mutate( sovon_bird_shorthand_color = paste0(&quot;B-&quot;, sovon_bird_shorthand_color), sovon_bird_shorthand_pt_color = paste0(&quot;B-&quot;, sovon_bird_shorthand_pt_color), sovon_bird_notes = if_else(is.na(sovon_bird_notes), &quot;inscription color: W.&quot;, str_c(sovon_bird_notes, &quot;inscription color: W.&quot;, sep = &quot; &quot;)) ) %&gt;% select( sovon_bird_reference, ring_color, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_notes, sovon_bird_date_begin, sovon_bird_date_end, everything() ) ## mutate: changed 372 values (100%) of &#39;sovon_bird_notes&#39; (302 fewer NA) ## changed 372 values (100%) of &#39;sovon_bird_shorthand_color&#39; (0 new NA) ## changed 372 values (100%) of &#39;sovon_bird_shorthand_pt_color&#39; (0 new NA) ## select: columns reordered (sovon_bird_reference, ring_color, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, sovon_bird_shorthand, ) old_rings_with_A Apply changes to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(old_rings_with_A, by = c( &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_date_begin&quot;, &quot;sovon_bird_date_end&quot; ) ) %&gt;% bind_rows(old_rings_with_A) %&gt;% select(names(crbirding_birds)) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) ## anti_join: added no columns ## &gt; rows only in x 12,092 ## &gt; rows only in y ( 0) ## &gt; matched rows ( 372) ## &gt; ======== ## &gt; rows total 12,092 ## select: no changes Some examples from birds ringed thrice or more: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 2) %&gt;% select( sovon_bird_reference, ring_color, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_notes, sovon_bird_date_begin, sovon_bird_date_end, everything() ) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 4 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 12,186 rows (98%), 278 rows remaining ## select: columns reordered (sovon_bird_reference, ring_color, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, sovon_bird_shorthand, ) Rings still without color: rings_color_still_unknown &lt;- crbirding_birds %&gt;% filter(!str_detect(sovon_bird_shorthand_color, &quot;\\\\-&quot;)) ## filter: removed 12,270 rows (98%), 194 rows remaining rings_color_still_unknown %&gt;% select( sovon_bird_reference, ring_color, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, everything() ) ## select: columns reordered (sovon_bird_reference, ring_color, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, sovon_bird_shorthand, ) Some ring inscriptions contain a B at third position: rings_color_still_unknown_with_B_third_pos &lt;- rings_color_still_unknown %&gt;% filter(str_sub(sovon_bird_shorthand, 3, 3) == &quot;B&quot;) ## filter: removed 106 rows (55%), 88 rows remaining rings_color_still_unknown_with_B_third_pos INBO experts explained us that the rings containing a B at third position are virtual rings (see issue #81#issuecomment-478954317). It has been suggested to remove them and not exporting them (see issues #81#issuecomment-698964036). We remove them: crbirding_birds &lt;- crbirding_birds %&gt;% filter(! sovon_bird_reference %in% rings_color_still_unknown_with_B_third_pos$sovon_bird_reference ) ## filter: removed 88 rows (1%), 12,376 rows remaining And we remove related observations as well: obs_and_acts &lt;- obs_and_acts %&gt;% filter(! sovon_bird_reference %in% rings_color_still_unknown_with_B_third_pos$sovon_bird_reference) ## filter: removed 181 rows (&lt;1%), 150,650 rows remaining The rings left are foreign rings. rings_color_still_unknown_foreign &lt;- crbirding_birds %&gt;% filter(!str_detect(sovon_bird_shorthand_pt_color, &quot;\\\\-&quot;)) ## filter: removed 12,270 rows (99%), 106 rows remaining rings_color_still_unknown_foreign We assign fictive color to them to ease the submission to cr-birding database. We assign them blue as ring color (see issue #84): rings_color_still_unknown_foreign &lt;- rings_color_still_unknown_foreign %&gt;% mutate( sovon_bird_notes = ifelse(is.na(sovon_bird_notes), &quot;foreign_color_ring.&quot;, str_c(sovon_bird_notes, &quot;foreign_color_ring.&quot;, sep = &quot; &quot; ) ), sovon_bird_shorthand_color = paste0( &quot;B-&quot;, sovon_bird_shorthand_color ), sovon_bird_shorthand_pt_color = paste0( &quot;B-&quot;, sovon_bird_shorthand_pt_color ) ) ## mutate: changed 106 values (100%) of &#39;sovon_bird_notes&#39; (101 fewer NA) ## changed 106 values (100%) of &#39;sovon_bird_shorthand_color&#39; (0 new NA) ## changed 106 values (100%) of &#39;sovon_bird_shorthand_pt_color&#39; (0 new NA) crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(rings_color_still_unknown_foreign, by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot;, &quot;sovon_bird_date_begin&quot;, &quot;sovon_bird_date_end&quot; ) ) %&gt;% bind_rows(rings_color_still_unknown_foreign) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin ) ## anti_join: added no columns ## &gt; rows only in x 12,270 ## &gt; rows only in y ( 0) ## &gt; matched rows ( 106) ## &gt; ======== ## &gt; rows total 12,270 After mapping: crbirding_birds %&gt;% filter(sovon_bird_reference %in% rings_color_still_unknown_foreign$sovon_bird_reference) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, everything() ) ## filter: removed 12,156 rows (98%), 220 rows remaining ## select: columns reordered (sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, sovon_bird_date_begin, ) Did we assigned a color to all rings? crbirding_birds %&gt;% filter(is.na(sovon_bird_shorthand_color) | str_detect(sovon_bird_shorthand_pt_color, &quot;\\\\-&quot;)) %&gt;% nrow() == nrow(crbirding_birds) ## filter: no rows removed ## [1] TRUE We will overwrite the columns sovon_bird_shorthand and sovon_bird_shorthand_pt and remove the help columns sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color and ring_color at the end of the processing. 5.2.14 Position of the color ring and inscription orientation SOVON allows us to add two columns called position_color_ring and direction_color_ring in order to save: 1. the position of the color ring, left or right leg 2. the direction of the color rings inscription, upwards or downwards In case of birds with one color ring only, SOVON doesnt save these fields. However, INBO experts find them important as it can help a lot when identifying mistakes in reading. For more details, see issue #61. As for colors, these informations are only available for the very last ring of each bird. Overview: birds %&gt;% group_by(Plaats) %&gt;% count() ## group_by: one grouping variable (Plaats) ## count: now 7 rows and 2 columns, one group variable remaining (Plaats) We map all values of ring position and inscription reading direction: ring_position_table &lt;- ring_position_table %&gt;% mutate( sovon_bird_ring_position = case_when( str_sub(Code, start = 1, end = 1) == &quot;L&quot; ~ &quot;LB&quot;, str_sub(Code, start = 1, end = 1) == &quot;R&quot; ~ &quot;RB&quot;, TRUE ~ NA_character_ ), sovon_bird_ring_direction = case_when( str_sub(Code, start = -1, end = -1) == &quot;D&quot; ~ &quot;D&quot;, str_sub(Code, start = -1, end = -1) == &quot;U&quot; ~ &quot;U&quot;, TRUE ~ NA_character_ ) ) %&gt;% select( Code, sovon_bird_ring_position, sovon_bird_ring_direction, everything() ) ## mutate: new variable &#39;sovon_bird_ring_position&#39; (character) with 3 unique values and 25% NA ## new variable &#39;sovon_bird_ring_direction&#39; (character) with 3 unique values and 25% NA ## select: columns reordered (Code, sovon_bird_ring_position, sovon_bird_ring_direction, Beschrijving, BeschrijvingUK, ) ring_position_table where LB and RB stay for left tarsus and right tarsus respectively. We map the ring position and direction of ring inscription in birds: birds &lt;- birds %&gt;% left_join(ring_position_table %&gt;% select(Code, sovon_bird_ring_position), by = c(&quot;Plaats&quot; = &quot;Code&quot;) ) %&gt;% left_join(ring_position_table %&gt;% select(Code, sovon_bird_ring_direction), by = c(&quot;Plaats&quot; = &quot;Code&quot;) ) ## select: dropped 4 variables (sovon_bird_ring_direction, Beschrijving, BeschrijvingUK, Aktief) ## left_join: added one column (sovon_bird_ring_position) ## &gt; rows only in x 977 ## &gt; rows only in y ( 2) ## &gt; matched rows 10,247 ## &gt; ======== ## &gt; rows total 11,224 ## select: dropped 4 variables (sovon_bird_ring_position, Beschrijving, BeschrijvingUK, Aktief) ## left_join: added one column (sovon_bird_ring_direction) ## &gt; rows only in x 977 ## &gt; rows only in y ( 2) ## &gt; matched rows 10,247 ## &gt; ======== ## &gt; rows total 11,224 Effects of the mapping: birds %&gt;% distinct(Plaats, sovon_bird_ring_position, sovon_bird_ring_direction) ## distinct: removed 11,217 rows (&gt;99%), 7 rows remaining Map these values from birds to crbirding_birds, taking into account that the fields sovon_bird_ring_position and sovon_bird_ring_direction are available only for the very last color ring of each bird: crbirding_birds &lt;- crbirding_birds %&gt;% filter(!is.na(sovon_bird_shorthand)) %&gt;% left_join(birds %&gt;% select( sovon_bird_reference, sovon_bird_ring_position, sovon_bird_ring_direction ), by = &quot;sovon_bird_reference&quot; ) %&gt;% group_by(sovon_bird_reference) %&gt;% mutate( sovon_bird_ring_position = if_else( sovon_bird_date_begin == max(sovon_bird_date_begin), sovon_bird_ring_position, NA_character_ ), sovon_bird_ring_direction = if_else( sovon_bird_date_begin == max(sovon_bird_date_begin), sovon_bird_ring_direction, NA_character_ ) ) %&gt;% ungroup() %&gt;% bind_rows(crbirding_birds %&gt;% filter(is.na(sovon_bird_shorthand))) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) ## filter: removed 762 rows (6%), 11,614 rows remaining ## select: dropped 17 variables (first_Nummer, NummerNieuw, NummerDesc, Nummer, Plaats, ) ## left_join: added 2 columns (sovon_bird_ring_position, sovon_bird_ring_direction) ## &gt; rows only in x 0 ## &gt; rows only in y ( 88) ## &gt; matched rows 11,614 ## &gt; ======== ## &gt; rows total 11,614 ## group_by: one grouping variable (sovon_bird_reference) ## mutate (grouped): changed 469 values (4%) of &#39;sovon_bird_ring_position&#39; (469 new NA) ## changed 446 values (4%) of &#39;sovon_bird_ring_direction&#39; (446 new NA) ## ungroup: no grouping variables ## filter: removed 11,614 rows (94%), 762 rows remaining Some examples from birds ringed more than twice: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% filter(n &gt; 2) %&gt;% select( sovon_bird_reference, sovon_bird_ring_position, sovon_bird_ring_direction, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, everything() ) %&gt;% head(n = 100) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 4 unique values and 0% NA ## filter (grouped): removed 12,098 rows (98%), 278 rows remaining ## select: columns reordered (sovon_bird_reference, sovon_bird_ring_position, sovon_bird_ring_direction, sovon_bird_shorthand, sovon_bird_date_begin, ) 5.2.15 Mapping of sovon_bird_ring_number We can now use metal_ring_missing in order to add the metal ring number as sovon_bird_ring_number. Still, note that only the very last metal ring number is saved in our color-oriented database. We will use it in place of older metal rings. Experts could improve it in crbirding database later. crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, sovon_bird_ring_number) %&gt;% rename(metal_ring_number = sovon_bird_ring_number), by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% group_by(sovon_bird_reference) %&gt;% mutate(sovon_bird_ring_number = case_when( metal_ring_missing == FALSE ~ metal_ring_number, metal_ring_missing == TRUE ~ NA_character_ )) %&gt;% select(-metal_ring_number) %&gt;% ungroup() ## select: dropped 18 variables (first_Nummer, NummerNieuw, NummerDesc, Nummer, Plaats, ) ## rename: renamed one variable (metal_ring_number) ## left_join: added one column (metal_ring_number) ## &gt; rows only in x 0 ## &gt; rows only in y ( 88) ## &gt; matched rows 12,376 ## &gt; ======== ## &gt; rows total 12,376 ## group_by: one grouping variable (sovon_bird_reference) ## mutate (grouped): new variable &#39;sovon_bird_ring_number&#39; (character) with 11,061 unique values and 3% NA ## select: dropped one variable (metal_ring_number) ## ungroup: no grouping variables Show an example by selecting birds wich lost their own metal rings: crbirding_birds %&gt;% filter(metal_ring_missing == TRUE) %&gt;% select(sovon_bird_reference) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% select( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_ring_number, metal_ring_missing, sovon_bird_rings_changed, everything() ) ## filter: removed 12,153 rows (98%), 223 rows remaining ## select: dropped 14 variables (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, ) ## left_join: added 14 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, ) ## &gt; rows only in x 0 ## &gt; rows only in y (11,879) ## &gt; matched rows 497 (includes duplicates) ## &gt; ======== ## &gt; rows total 497 ## select: columns reordered (sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_ring_number, metal_ring_missing, ) Add note about absence of metal ring based on original values in column MetaaalringNummer and the fields sovon_bird_reference, sovon_bird_ring_number: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select( sovon_bird_reference, MetaalringNummer ), by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% mutate(sovon_bird_notes = case_when( is.na(sovon_bird_ring_number) &amp; metal_ring_missing == FALSE &amp; (MetaalringNummer %in% c(&quot;?&quot;, &quot;onbekend&quot;) | is.na(MetaalringNummer)) ~ ifelse(is.na(sovon_bird_notes), &quot;bird_ring_number not available.&quot;, str_c(sovon_bird_notes, &quot;bird_ring_number not available.&quot;, sep = &quot; &quot;) ), is.na(sovon_bird_ring_number) &amp; metal_ring_missing == FALSE &amp; MetaalringNummer == &quot;none&quot; ~ ifelse(is.na(sovon_bird_notes), &quot;bird_ring_number not present.&quot;, str_c(sovon_bird_notes, &quot;bird_ring_number not present.&quot;, sep = &quot; &quot;) ), TRUE ~ sovon_bird_notes )) %&gt;% select(-MetaalringNummer) ## select: dropped 18 variables (first_Nummer, NummerNieuw, NummerDesc, Nummer, Plaats, ) ## left_join: added one column (MetaalringNummer) ## &gt; rows only in x 0 ## &gt; rows only in y ( 88) ## &gt; matched rows 12,376 ## &gt; ======== ## &gt; rows total 12,376 ## mutate: changed 51 values (&lt;1%) of &#39;sovon_bird_notes&#39; (0 new NA) ## select: dropped one variable (MetaalringNummer) Notice that in these cases the ring number is unknown although we are sure it exists. We left sovon_bird_ring_number empty as suggested by SOVON experts (see comment on issue #100) without modifying the value of bird_rings_changed. This is how sovon_bird_notes has been updated, limited to birds where changes could happen: crbirding_birds %&gt;% filter(is.na(sovon_bird_ring_number)) %&gt;% filter(metal_ring_missing == FALSE) %&gt;% select(sovon_bird_reference) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot; ) %&gt;% select(-sovon_bird_shorthand) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) ## filter: removed 12,057 rows (97%), 319 rows remaining ## filter: removed 223 rows (70%), 96 rows remaining ## select: dropped 14 variables (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, ) ## left_join: added 14 columns (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, ) ## &gt; rows only in x 0 ## &gt; rows only in y (12,276) ## &gt; matched rows 148 (includes duplicates) ## &gt; ======== ## &gt; rows total 148 ## select: dropped one variable (sovon_bird_shorthand) 5.2.16 Euring Present values: birds %&gt;% distinct(EuringCode) ## distinct: removed 11,213 rows (&gt;99%), 11 rows remaining We assign the euring codes by applying the following mapping: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% distinct(sovon_bird_reference, EuringCode), by = &quot;sovon_bird_reference&quot; ) %&gt;% mutate(sovon_bird_euring = recode(EuringCode, &quot;5920&quot; = &quot;05920&quot;, &quot;5910&quot; = &quot;05910&quot;, &quot;5926&quot; = &quot;05926&quot;, &quot;5922&quot; = &quot;06009&quot;, # 5922 used for hybrid gulls &quot;05922&quot; = &quot;06009&quot;, # 05922 used for hybrid gulls &quot;zz&quot; = &quot;04560&quot;, # pied avocets &quot;zzz&quot; = &quot;00720&quot; # great cormorants )) %&gt;% ungroup() ## distinct: no rows removed ## left_join: added one column (EuringCode) ## &gt; rows only in x 0 ## &gt; rows only in y ( 88) ## &gt; matched rows 12,376 ## &gt; ======== ## &gt; rows total 12,376 ## mutate: new variable &#39;sovon_bird_euring&#39; (character) with 6 unique values and 0% NA ## ungroup: no grouping variables Effects of mapping: crbirding_birds %&gt;% distinct(EuringCode, sovon_bird_euring) ## distinct: removed 12,365 rows (&gt;99%), 11 rows remaining We remove the help column EuringCode from crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% select(-EuringCode) ## select: dropped one variable (EuringCode) 5.2.17 Scheme Actual values: birds %&gt;% distinct(MetaalringLandCode) ## distinct: removed 11,218 rows (&gt;99%), 6 rows remaining We apply the following mapping: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, MetaalringLandCode), by = &quot;sovon_bird_reference&quot; ) %&gt;% mutate(sovon_bird_scheme = recode(MetaalringLandCode, &quot;BE&quot; = &quot;BLB&quot;, &quot;FR&quot; = &quot;FRP&quot;, &quot;NL&quot; = &quot;NLA&quot;, &quot;PT&quot; = &quot;POL&quot;, &quot;UK&quot; = &quot;GBT&quot; )) %&gt;% mutate(sovon_bird_scheme = case_when( is.na(sovon_bird_ring_number) ~ NA_character_, TRUE ~ sovon_bird_scheme )) ## select: dropped 18 variables (first_Nummer, NummerNieuw, NummerDesc, Nummer, Plaats, ) ## left_join: added one column (MetaalringLandCode) ## &gt; rows only in x 0 ## &gt; rows only in y ( 88) ## &gt; matched rows 12,376 ## &gt; ======== ## &gt; rows total 12,376 ## mutate: new variable &#39;sovon_bird_scheme&#39; (character) with 6 unique values and 5% NA ## mutate: changed 276 values (2%) of &#39;sovon_bird_scheme&#39; (276 new NA) Effects of mapping: crbirding_birds %&gt;% filter(!is.na(sovon_bird_ring_number)) %&gt;% distinct(MetaalringLandCode, sovon_bird_scheme) ## filter: removed 319 rows (3%), 12,057 rows remaining ## distinct: removed 12,052 rows (&gt;99%), 5 rows remaining We remove the help column MetaalringLandCode from crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% select(-MetaalringLandCode) ## select: dropped one variable (MetaalringLandCode) 5.2.18 Bird sex Bird sex is translated to English. Letter M (Dutch word mannetje) will not change so no need to convert it: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, GeslachtCode), by = &quot;sovon_bird_reference&quot; ) %&gt;% mutate(sovon_bird_sex = recode(GeslachtCode, &quot;V&quot; = &quot;F&quot;, ## V(rouwtje) -&gt;F(emale) &quot;O&quot; = &quot;U&quot; ## O(nbekend) -&gt; U(nknown) )) ## select: dropped 18 variables (first_Nummer, NummerNieuw, NummerDesc, Nummer, Plaats, ) ## left_join: added one column (GeslachtCode) ## &gt; rows only in x 0 ## &gt; rows only in y ( 88) ## &gt; matched rows 12,376 ## &gt; ======== ## &gt; rows total 12,376 ## mutate: new variable &#39;sovon_bird_sex&#39; (character) with 3 unique values and 0% NA Effects of mapping: crbirding_birds %&gt;% distinct(GeslachtCode, sovon_bird_sex) ## distinct: removed 12,373 rows (&gt;99%), 3 rows remaining We remove the help column GeslachtCode from crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% select(-GeslachtCode) ## select: dropped one variable (GeslachtCode) 5.2.19 Bird age ringing For mapping the age while applying color rings, we have to follow the Euring standard: see online pdf document at page 14. Bird age at the moment of any observation can be found in column LeeftijdCode of obs_and_acts. Values present: obs_and_acts %&gt;% distinct(LeeftijdCode) ## distinct: removed 150,642 rows (&gt;99%), 8 rows remaining We apply a recoding in order to standardize INBOs vocabulary to the EURING standard: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_bird_age_obs = recode(LeeftijdCode, &quot;PU&quot; = &quot;1&quot;, &quot;AD&quot; = &quot;A&quot;, &quot;J1&quot; = &quot;3&quot;, &quot;I4&quot; = &quot;5&quot;, &quot;I3&quot; = &quot;7&quot;, &quot;I2&quot; = &quot;9&quot;, &quot;I5&quot; = &quot;B&quot;, .missing = NA_character_ )) ## mutate: new variable &#39;sovon_bird_age_obs&#39; (character) with 8 unique values and 40% NA The age can be added to crbirding_birds by matching sovon_bird_date_begin of crbirding_birds and Datum of obs_and_acts for each sovon_bird_reference. First we check that this strategy ends up with a one-to-one relation: crbirding_birds %&gt;% left_join(obs_and_acts %&gt;% ## remove rows with Datum equal to NA or field observations filter(!is.na(sovon_bird_age_obs) &amp; (!is.na(vang) | !is.na(vangl) | !is.na(rngkl) | !is.na(rngme) | !is.na(klgev) | !is.na(klweg) | !is.na(meweg) | !is.na(ziek) # for FHOV,YCAF,FAAG )), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot; ) ) %&gt;% nrow() == nrow(crbirding_birds) ## filter: removed 138,324 rows (92%), 12,326 rows remaining ## left_join: added 40 columns (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## &gt; rows only in x 152 ## &gt; rows only in y ( 103) ## &gt; matched rows 12,224 ## &gt; ======== ## &gt; rows total 12,376 ## [1] TRUE Apply mapping: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(obs_and_acts %&gt;% ## remove rows with Datum equal to NA or field observations filter(!is.na(sovon_bird_age_obs) &amp; (!is.na(vang) | !is.na(vangl) | !is.na(rngkl) | !is.na(rngme) | !is.na(klgev) | !is.na(klweg) | !is.na(meweg) | !is.na(ziek) # for FHOV,YCAF,FAAG )) %&gt;% select(sovon_bird_reference, Datum, sovon_bird_age_obs), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot; ) ) ## filter: removed 138,324 rows (92%), 12,326 rows remaining ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## left_join: added one column (sovon_bird_age_obs) ## &gt; rows only in x 152 ## &gt; rows only in y ( 103) ## &gt; matched rows 12,224 ## &gt; ======== ## &gt; rows total 12,376 It can happen that there are birds without age while ringing. This happens typically while changing a ring, i.e. birds with more than one ring: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(sovon_bird_reference %in% (crbirding_birds %&gt;% filter(is.na(sovon_bird_age_obs)) %&gt;% pull(sovon_bird_reference))) %&gt;% rename(n_rings = n) %&gt;% group_by(n_rings) %&gt;% count() ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 4 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 12,224 rows (99%), 152 rows remaining ## filter: removed 12,043 rows (97%), 333 rows remaining ## rename: renamed one variable (n_rings) ## group_by: one grouping variable (n_rings) ## count: now 3 rows and 2 columns, one group variable remaining (n_rings) This is considered not a problem by SOVON ITer (see 113#issuecomment-605295649). Birds without sovon_bird_age_obs while ringing once should be checked: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(sovon_bird_reference %in% (crbirding_birds %&gt;% filter(is.na(sovon_bird_age_obs)) %&gt;% pull(sovon_bird_reference))) %&gt;% rename(n_rings = n) %&gt;% filter(n_rings == 1) ## group_by: one grouping variable (sovon_bird_reference) ## add_tally (grouped): new variable &#39;n&#39; (integer) with 4 unique values and 0% NA ## ungroup: no grouping variables ## filter: removed 12,224 rows (99%), 152 rows remaining ## filter: removed 12,043 rows (97%), 333 rows remaining ## rename: renamed one variable (n_rings) ## filter: removed all rows (100%) We rename sovon_bird_age_obs to sovon_bird_age_ringing in crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% rename(sovon_bird_age_ringing = sovon_bird_age_obs) ## rename: renamed one variable (sovon_bird_age_ringing) As examples, the bird age mapping of birds (color) ringed thrice or more: bird_reference_triplet &lt;- crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% count() %&gt;% filter(n &gt;= 3) %&gt;% pull(sovon_bird_reference) ## group_by: one grouping variable (sovon_bird_reference) ## count: now 11,136 rows and 2 columns, one group variable remaining (sovon_bird_reference) ## filter (grouped): removed 11,047 rows (99%), 89 rows remaining crbirding_birds %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_age_ringing ) %&gt;% filter(sovon_bird_reference %in% bird_reference_triplet) ## select: dropped 15 variables (sovon_bird_shorthand_pt, sovon_bird_date_end, sovon_bird_notes, sovon_bird_rings_changed, metal_ring_missing, ) ## filter: removed 12,098 rows (98%), 278 rows remaining 5.2.20 Bird ID Bird identifiers will be provided by SOVON. NA is given: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_id = NA) ## mutate: new variable &#39;sovon_bird_id&#39; (logical) with one unique value and 100% NA 5.2.21 Bird BTO Bird BTO will be provided by SOVON. NA is given: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_bto = NA) ## mutate: new variable &#39;sovon_bird_bto&#39; (logical) with one unique value and 100% NA 5.2.22 Bird name Some birds, the ones with a GPS tracker, have a name saved in this file. The names are saved in column individual_remarks: uvabits_file &lt;- &quot;https://raw.githubusercontent.com/inbo/bird-tracking/8a7a2c91d54b486d90a97f85cfaa30cede67315d/data/interim/individuals.csv&quot; uvabits_names &lt;- read_csv(uvabits_file, col_types = cols( .default = col_character(), individual_id = col_double(), mass = col_double(), track_session_id = col_double(), device_info_serial = col_double(), tracker_id = col_double(), track_session_start_date = col_datetime(format = &quot;&quot;), track_session_end_date = col_datetime(format = &quot;&quot;), track_session_start_latitude = col_double(), track_session_start_longitude = col_double() ) ) uvabits_names &lt;- uvabits_names %&gt;% select(individual_id, ring_number, individual_remarks, everything()) ## select: columns reordered (individual_id, ring_number, individual_remarks, key_name, station_name, ) uvabits_names We couple the birds to the correspondent names by color ring: bird_ref_uvabits &lt;- crbirding_birds %&gt;% left_join(uvabits_names %&gt;% select(colour_ring, individual_remarks) %&gt;% filter(!is.na(colour_ring)), by = c(&quot;sovon_bird_shorthand&quot; = &quot;colour_ring&quot;) ) %&gt;% rename(sovon_bird_name = individual_remarks) %&gt;% filter(!is.na(sovon_bird_name)) %&gt;% select(sovon_bird_reference, sovon_bird_name) ## select: dropped 16 variables (individual_id, ring_number, key_name, station_name, species_latin_name, ) ## filter: removed 4 rows (2%), 240 rows remaining ## left_join: added one column (individual_remarks) ## &gt; rows only in x 12,221 ## &gt; rows only in y ( 85) ## &gt; matched rows 155 ## &gt; ======== ## &gt; rows total 12,376 ## rename: renamed one variable (sovon_bird_name) ## filter: removed 12,228 rows (99%), 148 rows remaining ## select: dropped 20 variables (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, ) And we assign the names by joining on sovon_bird_reference: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(bird_ref_uvabits, by = &quot;sovon_bird_reference&quot;) ## left_join: added one column (sovon_bird_name) ## &gt; rows only in x 12,134 ## &gt; rows only in y ( 0) ## &gt; matched rows 242 ## &gt; ======== ## &gt; rows total 12,376 The complete mapping of names: crbirding_birds %&gt;% filter(!is.na(sovon_bird_name)) %&gt;% select(sovon_bird_reference, sovon_bird_name, sovon_bird_shorthand) ## filter: removed 12,134 rows (98%), 242 rows remaining ## select: dropped 19 variables (sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, sovon_bird_rings_changed, ) 5.2.23 Bird birth year This field will be filled by SOVON. NA is given: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_birth_year = NA) ## mutate: new variable &#39;sovon_bird_birth_year&#39; (logical) with one unique value and 100% NA 5.3 Finalize user data We have now sufficient information to define the role of any user in crbirding_users. 5.3.1 Add user role to crbirding_users Based on sovon_bird_date_begin we can retrieve the observations linked to applying rings. We retrieve the ringers by joining crbirding_users and obs_and_acts by WaarnemerNummer: ringers_number &lt;- crbirding_birds %&gt;% select(sovon_bird_reference, sovon_bird_date_begin) %&gt;% left_join(obs_and_acts %&gt;% ## remove rows with Datum equal to NA or field observations filter(!is.na(sovon_bird_age_obs) &amp; is.na(veld) &amp; is.na(dood) &amp; is.na(br) &amp; (!is.na(vang) | !is.na(vangl) | !is.na(rngkl) | !is.na(rngme) | !is.na(klgev) | !is.na(klweg) | !is.na(meweg) | !is.na(ziek) # for FHOV,YCAF,FAAG )) %&gt;% select(sovon_bird_reference, Datum, WaarnemerNummer), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot;) ) %&gt;% filter(!is.na(WaarnemerNummer)) %&gt;% distinct(WaarnemerNummer) %&gt;% pull(WaarnemerNummer) ## select: dropped 21 variables (sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_end, sovon_bird_notes, sovon_bird_rings_changed, ) ## filter: removed 138,417 rows (92%), 12,233 rows remaining ## select: dropped 39 variables (Nummer, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, ) ## left_join: added one column (WaarnemerNummer) ## &gt; rows only in x 240 ## &gt; rows only in y ( 98) ## &gt; matched rows 12,136 ## &gt; ======== ## &gt; rows total 12,376 ## filter: removed 240 rows (2%), 12,136 rows remaining ## distinct: removed 12,100 rows (&gt;99%), 36 rows remaining message(paste( &quot;Number of ringers:&quot;, length(ringers_number) )) ## Number of ringers: 36 We assign a R (ringer) to them, O (observer) otherwise: crbirding_users &lt;- crbirding_users %&gt;% mutate(user_role = ifelse(user_reference %in% ringers_number, &quot;R&quot;, &quot;O&quot; )) ## mutate: new variable &#39;user_role&#39; (character) with 2 unique values and 0% NA Number of ringers and observers: crbirding_users %&gt;% group_by(user_role) %&gt;% count() ## group_by: one grouping variable (user_role) ## count: now 2 rows and 2 columns, one group variable remaining (user_role) 5.4 Save modified temporary observation data We overwrite the temporary observation data based on the added columns: write_tsv( obs_and_acts, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), na = &quot;&quot;, append = FALSE ) 5.5 Save modified ring position and direction table We save the updated table containing color ring position and inscription direction in data/interim: write_tsv( ring_position_table, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;ring_position_table.tsv&quot;), na = &quot;&quot;, append = FALSE ) 5.6 Save final user data The desired order of columns in crbirding_users: cr_users_cols &lt;- c( &quot;user_id&quot;, &quot;user_reference&quot;, &quot;user_email&quot;, &quot;user_first_name&quot;, &quot;user_last_name&quot;, &quot;user_address&quot;, &quot;user_postal_code&quot;, &quot;user_place&quot;, &quot;user_country&quot;, &quot;user_language&quot;, &quot;user_role&quot; ) Are all required columns present? all(cr_users_cols %in% names(crbirding_users)) &amp; length(cr_users_cols) == ncol(crbirding_users) ## [1] TRUE We overwrite crbirding_users.csv with added information: write_csv(crbirding_users, path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.csv&quot;), na = &quot;&quot; ) 5.7 Save final ring data We overwrite the columns sovon_bird_shorthand and sovon_bird_shorthand_pt and remove the help columns metal_ring_missing, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color and color_combination: crbirding_birds &lt;- crbirding_birds %&gt;% mutate( sovon_bird_shorthand = sovon_bird_shorthand_color, sovon_bird_shorthand_pt = sovon_bird_shorthand_pt_color ) %&gt;% select(-c( ends_with(&quot;color&quot;), starts_with(&quot;color&quot;), metal_ring_missing )) ## mutate: changed 11,614 values (94%) of &#39;sovon_bird_shorthand&#39; (0 new NA) ## changed 11,614 values (94%) of &#39;sovon_bird_shorthand_pt&#39; (0 new NA) ## select: dropped 5 variables (metal_ring_missing, ring_color, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, inscription_color) SOVON is interested in color ring versions with a dot if dots are present, even if their purpose is just improving readability. We can overwrite sovon_bird_shorthand with control column sovon_bird_shorthand_pt: crbirding_birds &lt;- crbirding_birds %&gt;% select(-sovon_bird_shorthand) %&gt;% rename(sovon_bird_shorthand = sovon_bird_shorthand_pt) ## select: dropped one variable (sovon_bird_shorthand) ## rename: renamed one variable (sovon_bird_shorthand) Remove prefix sovon_: names(crbirding_birds) &lt;- str_remove_all(names(crbirding_birds), pattern = &quot;sovon_&quot; ) names(crbirding_birds) ## [1] &quot;bird_reference&quot; &quot;bird_shorthand&quot; &quot;bird_date_begin&quot; ## [4] &quot;bird_date_end&quot; &quot;bird_notes&quot; &quot;bird_rings_changed&quot; ## [7] &quot;bird_ring_position&quot; &quot;bird_ring_direction&quot; &quot;bird_ring_number&quot; ## [10] &quot;bird_euring&quot; &quot;bird_scheme&quot; &quot;bird_sex&quot; ## [13] &quot;bird_age_ringing&quot; &quot;bird_id&quot; &quot;bird_bto&quot; ## [16] &quot;bird_name&quot; &quot;bird_birth_year&quot; Remove time and timezone information from bird_date_begin and bird_date_end: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(bird_date_begin = as.Date(bird_date_begin), bird_date_end = as.Date(bird_date_end)) ## mutate: converted &#39;bird_date_begin&#39; from double to Date (0 new NA) ## converted &#39;bird_date_end&#39; from double to Date (0 new NA) The desired order of columns in crbirding_birds: cr_birds_cols &lt;- c( &quot;bird_id&quot;, &quot;bird_reference&quot;, &quot;bird_euring&quot;, &quot;bird_bto&quot;, &quot;bird_shorthand&quot;, &quot;bird_scheme&quot;, &quot;bird_ring_number&quot;, &quot;bird_name&quot;, &quot;bird_sex&quot;, &quot;bird_birth_year&quot;, &quot;bird_date_begin&quot;, &quot;bird_date_end&quot;, &quot;bird_rings_changed&quot;, &quot;bird_age_ringing&quot;, &quot;bird_ring_position&quot;, &quot;bird_ring_direction&quot;, &quot;bird_notes&quot; ) Are all required columns present? all(cr_birds_cols %in% names(crbirding_birds)) &amp; length(cr_birds_cols) == ncol(crbirding_birds) ## [1] TRUE Set column order: crbirding_birds &lt;- crbirding_birds %&gt;% select(all_of(cr_birds_cols)) ## select: columns reordered (bird_id, bird_reference, bird_euring, bird_bto, bird_shorthand, ) Preview data: crbirding_birds %&gt;% head(n = 100) Save finale birds info as text file (comma separated value): write_csv( crbirding_birds, path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_birds.csv&quot;), na = &quot;&quot; ) "],["4_observations.html", "6 Map observation data 6.1 Read data 6.2 Map color observation data 6.3 Save final observation data", " 6 Map observation data 6.1 Read data 6.1.1 Read temporary observation data We start from the temporary observation data saved as TSV file in data\\interim: obs_and_acts &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), col_types = cols( .default = col_character(), sovon_bird_reference = col_double(), Nummer = col_double(), Datum = col_datetime(format = &quot;&quot;), WaarnemerNummer = col_double(), PlaatsLengtegraadGraden = col_double(), PlaatsLengtegraadMinuten = col_double(), PlaatsLengtegraadSeconden = col_double(), PlaatsBreedtegraadGraden = col_double(), PlaatsBreedtegraadMinuten = col_double(), PlaatsBreedtegraadSeconden = col_double(), BevestigingDatum = col_datetime(format = &quot;&quot;), AanmaakDatum = col_datetime(format = &quot;&quot;), WijzigDatum = col_datetime(format = &quot;&quot;) ) ) 6.1.2 Read action data Import action codes and meaning: actions_meaning &lt;- read_tsv(here::here(&quot;data&quot;, &quot;input&quot;, &quot;actions_meaning.tsv&quot;)) ## Parsed with column specification: ## cols( ## Code = col_character(), ## Beschrijving = col_character(), ## BeschrijvingUK = col_character(), ## CodeExtern = col_character(), ## CodeExternUK = col_character(), ## Kolom = col_character() ## ) 6.1.3 Read processed ring data We import finalized ring data from ./data/processed: crbirding_birds &lt;- read_csv( here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_birds.csv&quot;), col_types = cols( .default = col_character(), bird_id = col_logical(), bird_reference = col_double(), bird_bto = col_logical(), bird_birth_year = col_logical(), bird_date_begin = col_datetime(format = &quot;&quot;), bird_date_end = col_datetime(format = &quot;&quot;) ) ) 6.1.4 Read temporary ring data We will need some columns from original INBO ring data. We import the temporary ring data as well: birds &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;birds.tsv&quot;), col_types = cols( .default = col_character() ) ) 6.1.5 Read ring position data We import mapping of ring position and inscription reading direction: ring_position_table &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;ring_position_table.tsv&quot;), na = &quot;&quot;, col_types = cols( .default = col_character(), Aktief = col_logical() ) ) 6.1.6 Read processed user data We import finalized user data from ./data/processed: crbirding_users &lt;- read_csv( here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.csv&quot;), col_types = cols( .default = col_character(), user_id = col_logical(), user_reference = col_double() ) ) 6.1.7 Read list workers in bird shelters workers_bird_shelters &lt;- read_tsv( here::here(&quot;data&quot;, &quot;input&quot;, &quot;workers_in_bird_shelters.tsv&quot;), col_types = cols( .default = col_character(), user_id = col_logical(), user_reference = col_double() ) ) 6.2 Map color observation data 6.2.1 Extract action codes Actions present in obs_and_acts : acts &lt;- actions_meaning$Code acts &lt;- acts[acts %in% names(obs_and_acts)] acts ## [1] &quot;rngkl&quot; &quot;rngme&quot; &quot;klgev&quot; &quot;br&quot; &quot;vang&quot; &quot;dood&quot; &quot;klweg&quot; &quot;veld&quot; &quot;meweg&quot; ## [10] &quot;me&quot; &quot;vangl&quot; &quot;ziek&quot; Combinations of actions present in observations: action_combinations &lt;- obs_and_acts %&gt;% select(acts) %&gt;% distinct() ## select: dropped 30 variables (sovon_bird_reference, Nummer, Datum, EuringCode, LeeftijdCode, ) ## distinct: removed 150,620 rows (&gt;99%), 30 rows remaining action_combinations 6.2.2 Observation ID The field sovon_observation_id is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_id = NA) ## mutate: new variable &#39;sovon_observation_id&#39; (logical) with one unique value and 100% NA 6.2.3 Observation reference The observation reference is an unique identifier assigned to each observation. This field exists already: Nummer. obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_reference = Nummer) ## mutate: new variable &#39;sovon_observation_reference&#39; (double) with 150,650 unique values and 0% NA 6.2.4 Observation date The date is saved in column Datum. We copy it in required column sovon_observation_date: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_date = Datum) ## mutate: new variable &#39;sovon_observation_date&#39; (double) with 7,120 unique values and 0% NA 6.2.5 Observation time There is no observation time in obs_and_acts. NA is given to sovon_observation_time: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_time = NA) ## mutate: new variable &#39;sovon_observation_time&#39; (logical) with one unique value and 100% NA 6.2.6 Observation latitude Observations with missing or partially missing latitude information: obs_missing_latitude_longitude &lt;- obs_and_acts %&gt;% filter(is.na(PlaatsBreedtegraadGraden) | is.na(PlaatsBreedtegraadMinuten) | is.na(PlaatsBreedtegraadSeconden) | is.na(PlaatsLengtegraadGraden) | is.na(PlaatsLengtegraadMinuten) | is.na(PlaatsLengtegraadSeconden)) %&gt;% select( Nummer, KleurringNummer, Datum, starts_with(&quot;PlaatsBreedtegraad&quot;), starts_with(&quot;PlaatsLengtegraad&quot;), PlaatsGemeente, PlaatsToponym ) ## filter: removed 150,642 rows (&gt;99%), 8 rows remaining ## select: dropped 33 variables (sovon_bird_reference, EuringCode, LeeftijdCode, KleurringPlaats, MetaalringNummer_obs, ) obs_missing_latitude_longitude The absolute observation latitude should be converted to decimal degrees: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_lat = case_when( !is.na(PlaatsBreedtegraadGraden) &amp; !is.na(PlaatsBreedtegraadMinuten) &amp; !is.na(PlaatsBreedtegraadSeconden) ~ conv_unit( str_c(PlaatsBreedtegraadGraden, PlaatsBreedtegraadMinuten, PlaatsBreedtegraadSeconden, sep = &quot; &quot; ), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), !is.na(PlaatsBreedtegraadGraden) &amp; !is.na(PlaatsBreedtegraadMinuten) &amp; is.na(PlaatsBreedtegraadSeconden) ~ conv_unit( str_c(PlaatsBreedtegraadGraden, PlaatsBreedtegraadMinuten, 0, sep = &quot; &quot; ), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), !is.na(PlaatsBreedtegraadGraden) &amp; is.na(PlaatsBreedtegraadMinuten) &amp; is.na(PlaatsBreedtegraadSeconden) ~ conv_unit( str_c(PlaatsBreedtegraadGraden, 0, 0, sep = &quot; &quot;), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), TRUE ~ NA_character_ ) ) ## mutate: new variable &#39;sovon_observation_lat&#39; (character) with 660 unique values and &lt;1% NA By field PlaatsBreedtegraadRichtingCode we can know whether the observation took place in the northern or southern hemisphere. In case of southern hemisphere, the latitude value should be negative. Values of PlaatsBreedtegraadRichtingCode and number of observations: obs_and_acts %&gt;% group_by(PlaatsBreedtegraadRichtingCode) %&gt;% count() ## group_by: one grouping variable (PlaatsBreedtegraadRichtingCode) ## count: now 2 rows and 2 columns, one group variable remaining (PlaatsBreedtegraadRichtingCode) If present, the observations with valid PlaatsBreedtegraadGraden but without PlaatsBreedtegraadRichtingCode should be further evaluated: obs_and_acts %&gt;% filter(is.na(PlaatsBreedtegraadRichtingCode) &amp; !is.na(PlaatsBreedtegraadGraden)) %&gt;% select(Nummer, starts_with(&quot;PlaatsBreedte&quot;), PlaatsGemeente, PlaatsToponym) ## filter: removed all rows (100%) ## select: dropped 40 variables (sovon_bird_reference, Datum, EuringCode, LeeftijdCode, KleurringNummer, ) Assign negative latitude if PlaatsBreedtegraadRichtingCode is equal to S: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_lat = case_when( PlaatsBreedtegraadRichtingCode == &quot;N&quot; ~ sovon_observation_lat, PlaatsBreedtegraadRichtingCode == &quot;S&quot; &amp; !is.na(sovon_observation_lat) ~ paste0(&quot;-&quot;, sovon_observation_lat), TRUE ~ sovon_observation_lat ) ) ## mutate: no changes 6.2.7 Observation longitude Absolute value of the observation longitude should be converted to decimal degrees: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_lng = case_when( !is.na(PlaatsLengtegraadGraden) &amp; !is.na(PlaatsLengtegraadMinuten) &amp; !is.na(PlaatsLengtegraadSeconden) ~ conv_unit( str_c(PlaatsLengtegraadGraden, PlaatsLengtegraadMinuten, PlaatsLengtegraadSeconden, sep = &quot; &quot; ), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), !is.na(PlaatsLengtegraadGraden) &amp; !is.na(PlaatsLengtegraadMinuten) &amp; is.na(PlaatsLengtegraadSeconden) ~ conv_unit( str_c(PlaatsLengtegraadGraden, PlaatsLengtegraadMinuten, 0, sep = &quot; &quot; ), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), !is.na(PlaatsLengtegraadGraden) &amp; is.na(PlaatsLengtegraadMinuten) &amp; is.na(PlaatsLengtegraadSeconden) ~ conv_unit( str_c(PlaatsLengtegraadGraden, 0, 0, sep = &quot; &quot;), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), TRUE ~ NA_character_ ) ) ## mutate: new variable &#39;sovon_observation_lng&#39; (character) with 596 unique values and &lt;1% NA By field PlaatsLengtegraadRichtingCode we can know whether the observation took place in the western or eastern hemisphere. In case of western hemisphere, the longitude value should be negative. Values of PlaatsLengtegraadRichtingCode and number of observations: obs_and_acts %&gt;% group_by(PlaatsLengtegraadRichtingCode) %&gt;% count() ## group_by: one grouping variable (PlaatsLengtegraadRichtingCode) ## count: now 3 rows and 2 columns, one group variable remaining (PlaatsLengtegraadRichtingCode) If present, the observations with valid PlaatsLengtegraadGraden but without PlaatsLengtegraadRichtingCode should be further evaluated: obs_and_acts %&gt;% filter(is.na(PlaatsLengtegraadRichtingCode) &amp; !is.na(PlaatsLengtegraadGraden)) %&gt;% select(Nummer, starts_with(&quot;PlaatsLengte&quot;), PlaatsGemeente, PlaatsToponym) ## filter: removed all rows (100%) ## select: dropped 41 variables (sovon_bird_reference, Datum, EuringCode, LeeftijdCode, KleurringNummer, ) Assign negative longitude if PlaatsLengtegraadRichtingCode is equal to W: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_lng = case_when( PlaatsLengtegraadRichtingCode == &quot;E&quot; ~ sovon_observation_lng, PlaatsLengtegraadRichtingCode == &quot;W&quot; &amp; !is.na(sovon_observation_lng) ~ paste0(&quot;-&quot;, sovon_observation_lng), TRUE ~ sovon_observation_lng ) ) ## mutate: changed 12,182 values (8%) of &#39;sovon_observation_lng&#39; (0 new NA) 6.2.8 Observation location Aggregate information about observation location. We follow the following structure: PlaatsGemeente [+ , + PlaatsToponym [+ : + PlaatsToponymDetail]]: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_location = ifelse(!is.na(PlaatsToponym), str_c(PlaatsGemeente, PlaatsToponym, sep = &quot;, &quot; ), paste(PlaatsGemeente) ) ) %&gt;% mutate( sovon_observation_location = ifelse(!is.na(PlaatsToponymDetail), str_c(sovon_observation_location, PlaatsToponymDetail, sep = &quot;: &quot; ), paste(sovon_observation_location) ) ) ## mutate: new variable &#39;sovon_observation_location&#39; (character) with 2,225 unique values and 0% NA ## mutate: changed 20,283 values (13%) of &#39;sovon_observation_location&#39; (0 new NA) 6.2.9 Check bird The field sovon_check_bird is provided by SOVON. NA is given: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_check_bird = NA) ## mutate: new variable &#39;sovon_check_bird&#39; (logical) with one unique value and 100% NA 6.2.10 User ID The field sovon_user_id is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_user_id = NA) ## mutate: new variable &#39;sovon_user_id&#39; (logical) with one unique value and 100% NA 6.2.11 User reference The field sovon_user_reference links observations to users and it is equal to field user_reference in user data: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_user_reference = WaarnemerNummer) ## mutate: new variable &#39;sovon_user_reference&#39; (double) with 2,009 unique values and 0% NA 6.2.12 Observer The field sovon_melder is equal to user_first_name and user_last_name in users: obs_and_acts &lt;- obs_and_acts %&gt;% left_join( crbirding_users %&gt;% select(user_reference, user_first_name, user_last_name), by = c(&quot;WaarnemerNummer&quot; = &quot;user_reference&quot;) ) %&gt;% mutate(sovon_melder = case_when( is.na(user_first_name) &amp; !is.na(user_last_name) ~ user_last_name, !is.na(user_first_name) &amp; is.na(user_last_name) ~ user_first_name, !is.na(user_first_name) &amp; !is.na(user_last_name) ~ str_c(user_first_name, user_last_name, sep = &quot; &quot;), is.na(user_first_name) &amp; is.na(user_last_name) ~ NA_character_ )) %&gt;% select(-c(user_first_name, user_last_name)) ## select: dropped 8 variables (user_id, user_email, user_address, user_postal_code, user_place, ) ## left_join: added 2 columns (user_first_name, user_last_name) ## &gt; rows only in x 0 ## &gt; rows only in y ( 29) ## &gt; matched rows 150,650 ## &gt; ========= ## &gt; rows total 150,650 ## mutate: new variable &#39;sovon_melder&#39; (character) with 2,007 unique values and 0% NA ## select: dropped 2 variables (user_first_name, user_last_name) 6.2.13 Observer e-mail The field sovon_melder_email is equal to user_email in users: obs_and_acts &lt;- obs_and_acts %&gt;% left_join( crbirding_users %&gt;% select(user_reference, user_email), by = c(&quot;WaarnemerNummer&quot; = &quot;user_reference&quot;) ) %&gt;% mutate(sovon_melder_email = user_email) ## select: dropped 9 variables (user_id, user_first_name, user_last_name, user_address, user_postal_code, ) ## left_join: added one column (user_email) ## &gt; rows only in x 0 ## &gt; rows only in y ( 29) ## &gt; matched rows 150,650 ## &gt; ========= ## &gt; rows total 150,650 ## mutate: new variable &#39;sovon_melder_email&#39; (character) with 1,200 unique values and 62% NA 6.2.14 Reporter - ringer number The field sovon_melder_ringersnummer is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_melder_ringersnummer = NA) ## mutate: new variable &#39;sovon_melder_ringersnummer&#39; (logical) with one unique value and 100% NA 6.2.15 Ring number The field sovon_ring_number contains information about the metal ring number, in the same format as in field bird_ring_number of crbirding_birds. As explained in the mapping of field bird_ring_number of crbirding_birds, INBO database is a color ring database. This field is not accurately mapped and we will leave it empty. obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_ring_number = NA_character_) ## mutate: new variable &#39;sovon_ring_number&#39; (character) with one unique value and 100% NA 6.2.16 Observation status Adding the status (based on EURING) information arises by the need of mapping the observations with action code br and vang: actions_meaning %&gt;% filter(Code %in% c(&quot;br&quot;, &quot;vang&quot;)) ## filter: removed 11 rows (85%), 2 rows remaining The actions br and vang refer to status breeding in EURING system. Based on the scheme at page 16 of EURING Exchange Code 2000+ document and based on discussion in this issue, we define the following mapping for field status_full_grown_bird: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_status_full_grown_bird = case_when( !is.na(br) | !is.na(vang) ~ &quot;N&quot;, LeeftijdCode == &quot;PU&quot; ~ &quot;-&quot;, TRUE ~ &quot;U&quot; )) ## mutate: new variable &#39;sovon_status_full_grown_bird&#39; (character) with 3 unique values and 0% NA 6.2.17 Observation condition The SOVON field observation_condition is NOT mapped following the EURING Exchange Code 2000+ document. SOVON experts provided us the following list of conditions (see #126): 1: healthy 2: sick/wounded 3: dead (less than week) 4: dead (more than week) 5: dead (unknown if freshly dead) 6: released after rehabilitation So, we do an initial mapping of following actions as follows (in order of priority): dood, klgev, megev: observation_condition = 5 ziek (or observations of bird shelter workers): observation_condition = 2 rngkl, rngme, vang, vangl, veld, me, meweg, klweg, br: observation_condition = 1 obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_condition = case_when( dood == &quot;dood&quot; ~ 5, klgev == &quot;klgev&quot; ~ 5, ziek == &quot;ziek&quot; | sovon_user_reference %in% workers_bird_shelters$user_reference ~ 2, !is.na(rngkl) | !is.na(rngme) | !is.na(vang) | !is.na(vangl) | !is.na(veld) | !is.na(me) | !is.na(meweg) | !is.na(klweg) | !is.na(br) ~ 1 )) ## mutate: new variable &#39;sovon_observation_condition&#39; (double) with 3 unique values and 0% NA Releasing after rehabilitation can be detected by the notes in field Opmerking for the observations of bird shelter workers. This is due to the fact that some of these observations are linked to ringing actions, other are linked to veld actions thus making the detection of release by actions troublesome. Assign condition value 6 to the release after rehabilitation: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_condition = if_else( # observation of a bird shelter worker sovon_user_reference %in% workers_bird_shelters$user_reference &amp; # bird is not dead is.na(dood) &amp; # no empty note !is.na(Opmerking) &amp; # note mentions the release in Dutch str_detect(Opmerking, pattern = &quot;gelost|vrijlating&quot;) &amp; # note does not mention the unrelease !str_detect(Opmerking, pattern = &quot;niet gelost&quot;), 6, sovon_observation_condition )) ## mutate: changed 1,293 values (1%) of &#39;sovon_observation_condition&#39; (0 new NA) Overview of notes and actions of observations with sovon_observation_condition = 6 (released after rehabilitation): obs_and_acts %&gt;% filter(sovon_observation_condition == 6) %&gt;% select( Opmerking, acts ) %&gt;% select_if(function(x) any(!is.na(x))) %&gt;% distinct() ## filter: removed 149,357 rows (99%), 1,293 rows remaining ## select: dropped 46 variables (sovon_bird_reference, Nummer, Datum, EuringCode, LeeftijdCode, ) ## select_if: dropped 6 variables (klgev, br, vang, dood, meweg, ) ## distinct: removed 1,243 rows (96%), 50 rows remaining Preview of mapping of sovon_observation_condition: obs_and_acts %&gt;% select( sovon_observation_reference, sovon_bird_reference, sovon_observation_date, sovon_observation_condition, acts ) %&gt;% head(n = 100) ## select: dropped 43 variables (Nummer, Datum, EuringCode, LeeftijdCode, KleurringNummer, ) 6.2.18 MRI: metal ring information Metal ring information is an integer between 0 and 9. A table can be found at page 8 of EURING Exchange Code 2000+ document. However, SOVON uses this field to map the observations referring to the applying of any kind of ring, either color or metal, as their database is purely focussed on color rings and due to a missing field in the EURING Exchange Code 2000+ specific for color rings. INBO experts explained us that all color rings are applied on tarsus, MRI: 2, while metal ring position is on tarsus or above or unknown, MRI: 1. However, the value 2 is not allowed by SOVON (see comment in issue 47). Values allowed: 1, 4 and 5, where 4 is used for adding a color and/or metal ring, while 5 for changing Mapping decision rules: Default: MRI 4 Very first ringing of a bird (no matter if rngme only, rngkl only or rngme + rngkl): MRI 1 Changing a metal and/or color ring: MRI 5 This last condition holds true even if the color ring is changed while adding a metal ring or viceversa. We initialize sovon_MRI by assigning default value 4: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_MRI = 4) ## mutate: new variable &#39;sovon_MRI&#39; (double) with one unique value and 0% NA Very first ringing gets sovon_MRI = 1: obs_and_acts &lt;- obs_and_acts %&gt;% group_by(sovon_bird_reference) %&gt;% mutate(sovon_MRI = if_else( Datum == min(Datum) &amp; (rngkl == &quot;rngkl&quot; | rngme == &quot;rngme&quot;), 1, sovon_MRI )) %&gt;% arrange(sovon_bird_reference, Datum) %&gt;% ungroup() ## group_by: one grouping variable (sovon_bird_reference) ## mutate (grouped): changed 11,199 values (7%) of &#39;sovon_MRI&#39; (70 new NA) ## ungroup: no grouping variables Preview: obs_and_acts %&gt;% filter(sovon_MRI == 1) %&gt;% select( sovon_observation_reference, sovon_bird_reference, sovon_observation_date, sovon_MRI, acts ) %&gt;% select_if(function(x) any(!is.na(x))) %&gt;% head(n = 100) ## filter: removed 139,521 rows (93%), 11,129 rows remaining ## select: dropped 44 variables (Nummer, Datum, EuringCode, LeeftijdCode, KleurringNummer, ) ## select_if: dropped 9 variables (klgev, br, vang, dood, klweg, ) Adding a color ring while metal ring is alrady present is mapped as 4, which is the default value. Same for adding a metal ring while color ring already present. Based on crbirding_birds MRI is 5 if previous bird_shorthand is not empty and different from actual bird_shorthand and no klweg action is coupled to the observation. As said in previous chapter while mapping ring data, we dont have track of changing metal rings, only loosing it (actions meweg). We then assume to add a new one at next catching action. But adding a metal ring while not changing color ring means MRI equal to 4, default value, if color ring is changed then it is 5: this demonstrates that MRI value 5 depends only on value of bird_shorthand as only color rings can be changed in our mapping. If the ringer, while catching, realizes the absence of color ring (klweg), then the color ring is added, not changed, i.e. MRI equal 4 as metal ring is still present.If metal ring is absent as well, then it would be impossible to identify the bird and it would count as a new bird with an observation coupled to rngkl + rngme actions. MRI_5_bird_ref_and_dates &lt;- crbirding_birds %&gt;% group_by(bird_reference) %&gt;% mutate(previous_bird_shorthand = lag(bird_shorthand)) %&gt;% filter(!is.na(previous_bird_shorthand) &amp; previous_bird_shorthand != bird_shorthand) %&gt;% select(bird_reference, bird_date_begin) %&gt;% ungroup() %&gt;% mutate(set_MRI_5 = 5) ## group_by: one grouping variable (bird_reference) ## mutate (grouped): new variable &#39;previous_bird_shorthand&#39; (character) with 530 unique values and 95% NA ## filter (grouped): removed 12,038 rows (97%), 338 rows remaining ## select: dropped 16 variables (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## ungroup: no grouping variables ## mutate: new variable &#39;set_MRI_5&#39; (double) with one unique value and 0% NA obs_and_acts &lt;- obs_and_acts %&gt;% left_join(MRI_5_bird_ref_and_dates, by = c( &quot;sovon_bird_reference&quot; = &quot;bird_reference&quot;, &quot;Datum&quot; = &quot;bird_date_begin&quot; ) ) %&gt;% mutate(sovon_MRI = if_else(!is.na(set_MRI_5) &amp; is.na(klweg) &amp; is.na(veld), set_MRI_5, sovon_MRI )) ## left_join: added one column (set_MRI_5) ## &gt; rows only in x 150,308 ## &gt; rows only in y ( 0) ## &gt; matched rows 342 ## &gt; ========= ## &gt; rows total 150,650 ## mutate: changed 331 values (&lt;1%) of &#39;sovon_MRI&#39; (0 new NA) Preview changes: obs_and_acts %&gt;% filter(sovon_MRI == 5) %&gt;% select( sovon_observation_reference, sovon_bird_reference, sovon_observation_date, sovon_MRI, acts ) %&gt;% select_if(function(x) any(!is.na(x))) ## filter: removed 150,319 rows (&gt;99%), 331 rows remaining ## select: dropped 45 variables (Nummer, Datum, EuringCode, LeeftijdCode, KleurringNummer, ) ## select_if: dropped 7 variables (rngkl, klgev, br, dood, klweg, ) The presence of action ziek in combination with sovon_MRI 5 is due to the three rings discussed in previous chapter: FHOV, YCAF, FAAG. 6.2.19 Bird age The field sovon_bird_age_obs should be filled with the age of the bird as mentioned by the observer. This field has been created in previous chapter: obs_and_acts %&gt;% distinct(sovon_bird_age_obs) ## distinct: removed 150,642 rows (&gt;99%), 8 rows remaining 6.2.20 Bird sex The field sovon_bird_sex should be filled with the sex of the bird as mentioned by the observer. This field is not present in obs_and_acts, so we assign value U (unknown): obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_bird_sex = &quot;U&quot;) ## mutate: new variable &#39;sovon_bird_sex&#39; (character) with one unique value and 0% NA 6.2.21 Capture The field sovon_observation_is_capture can be filled by evaluating the link of observations to actions vang, vangl, rngkl or rngme: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_is_capture = if_else( !is.na(vang) | !is.na(vangl) | !is.na(rngkl) | !is.na(rngme), &quot;Y&quot;, &quot;N&quot; )) ## mutate: new variable &#39;sovon_observation_is_capture&#39; (character) with 2 unique values and 0% NA 6.2.22 Bird ID The field sovon_bird_id is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_bird_id = NA) ## mutate: new variable &#39;sovon_bird_id&#39; (logical) with one unique value and 100% NA 6.2.23 Bird ring position and inscription direction Similarly to the mapping in ring data, we map the ring position and inscription reading direction in observations: obs_and_acts &lt;- obs_and_acts %&gt;% left_join(ring_position_table %&gt;% select(Code, sovon_bird_ring_position), by = c(&quot;KleurringPlaats&quot; = &quot;Code&quot;) ) %&gt;% left_join(ring_position_table %&gt;% select(Code, sovon_bird_ring_direction), by = c(&quot;KleurringPlaats&quot; = &quot;Code&quot;) ) ## select: dropped 4 variables (sovon_bird_ring_direction, Beschrijving, BeschrijvingUK, Aktief) ## left_join: added one column (sovon_bird_ring_position) ## &gt; rows only in x 133,683 ## &gt; rows only in y ( 2) ## &gt; matched rows 16,967 ## &gt; ========= ## &gt; rows total 150,650 ## select: dropped 4 variables (sovon_bird_ring_position, Beschrijving, BeschrijvingUK, Aktief) ## left_join: added one column (sovon_bird_ring_direction) ## &gt; rows only in x 133,683 ## &gt; rows only in y ( 2) ## &gt; matched rows 16,967 ## &gt; ========= ## &gt; rows total 150,650 Effects of the mapping: obs_and_acts %&gt;% distinct(KleurringPlaats, sovon_bird_ring_position, sovon_bird_ring_direction) ## distinct: removed 150,643 rows (&gt;99%), 7 rows remaining 6.2.24 Observation notes We copy the notes in Opmerking to SOVON field sovon_observation_notes: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_notes = Opmerking) ## mutate: new variable &#39;sovon_observation_notes&#39; (character) with 11,032 unique values and 70% NA We add a dot at the end of the notes if not present already: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( !is.na(sovon_observation_notes) &amp; str_length(sovon_observation_notes) &gt; 0, if_else(str_sub(sovon_observation_notes, -1) != &quot;.&quot;, str_c(sovon_observation_notes, &quot;.&quot;, sep = &quot;&quot;), sovon_observation_notes ), sovon_observation_notes ) ) ## mutate: changed 44,415 values (29%) of &#39;sovon_observation_notes&#39; (0 new NA) We also add the prefix \"INBO original notes: \": obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( !is.na(sovon_observation_notes) &amp; str_length(sovon_observation_notes) &gt; 0, str_c(&quot;INBO original notes: &quot;, sovon_observation_notes, sep = &quot; &quot;), sovon_observation_notes ) ) ## mutate: changed 44,579 values (30%) of &#39;sovon_observation_notes&#39; (0 new NA) We add the note no_color_ring. to observations linked to action klweg and/or me: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( is.na(klweg) &amp; is.na(me), sovon_observation_notes, if_else(is.na(sovon_observation_notes), &quot;no_color_ring.&quot;, str_c(&quot;no_color_ring.&quot;, sovon_observation_notes, sep = &quot; &quot;) ) ) ) ## mutate: changed 392 values (&lt;1%) of &#39;sovon_observation_notes&#39; (302 fewer NA) Preview: obs_and_acts %&gt;% filter(!is.na(klweg) | !is.na(me)) %&gt;% select(, klweg, me, sovon_observation_notes) %&gt;% head() ## filter: removed 150,258 rows (&gt;99%), 392 rows remaining ## select: dropped 64 variables (sovon_bird_reference, Nummer, Datum, EuringCode, LeeftijdCode, ) We add the note no_metal_ring. to observations linked to action meweg: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( !is.na(meweg), if_else(is.na(sovon_observation_notes), &quot;no_metal_ring.&quot;, paste(&quot;no_metal_ring.&quot;, sovon_observation_notes, sep = &quot; &quot;) ), sovon_observation_notes ) ) ## mutate: changed 125 values (&lt;1%) of &#39;sovon_observation_notes&#39; (87 fewer NA) Preview: obs_and_acts %&gt;% filter(!is.na(meweg)) %&gt;% select(sovon_observation_notes) %&gt;% distinct() %&gt;% head() ## filter: removed 150,525 rows (&gt;99%), 125 rows remaining ## select: dropped 66 variables (sovon_bird_reference, Nummer, Datum, EuringCode, LeeftijdCode, ) ## distinct: removed 100 rows (80%), 25 rows remaining 6.3 Save final observation data Select the required columns, starting with prefix sovon_: crbirding_observations &lt;- obs_and_acts %&gt;% select(starts_with(&quot;sovon&quot;)) ## select: dropped 42 variables (Nummer, Datum, EuringCode, LeeftijdCode, KleurringNummer, ) Remove prefix sovon_: names(crbirding_observations) &lt;- str_remove_all(names(crbirding_observations), pattern = &quot;sovon_&quot;) Remove time and timezone information from bird_date_begin and bird_date_end: crbirding_observations &lt;- crbirding_observations %&gt;% mutate(observation_date = as.Date(observation_date)) ## mutate: converted &#39;observation_date&#39; from double to Date (0 new NA) The desired order of columns in crbirding_observations: cr_obs_cols &lt;- c( &quot;user_id&quot;, &quot;user_reference&quot;, &quot;bird_id&quot;, &quot;bird_reference&quot;, &quot;observation_id&quot;, &quot;observation_reference&quot;, &quot;observation_date&quot;, &quot;observation_time&quot;, &quot;observation_lat&quot;, &quot;observation_lng&quot;, &quot;observation_location&quot;, &quot;observation_is_capture&quot;, &quot;observation_notes&quot;, &quot;check_bird&quot;, &quot;MRI&quot;, &quot;melder&quot;, &quot;melder_email&quot;, &quot;melder_ringersnummer&quot;, &quot;ring_number&quot;, &quot;observation_condition&quot;, &quot;status_full_grown_bird&quot;, &quot;bird_age_obs&quot;, &quot;bird_sex&quot;, &quot;bird_ring_position&quot;, &quot;bird_ring_direction&quot; ) Are all required columns present? all(cr_obs_cols %in% names(crbirding_observations)) &amp; length(cr_obs_cols) == ncol(crbirding_observations) ## [1] TRUE Set column order: crbirding_observations &lt;- crbirding_observations %&gt;% select(all_of(cr_obs_cols)) ## select: columns reordered (user_id, user_reference, bird_id, bird_reference, observation_id, ) Preview data (without personal observer data for privcay reasons): crbirding_observations %&gt;% select(-c(melder, melder_email)) %&gt;% head(n = 10) ## select: dropped 2 variables (melder, melder_email) Save to text file (comma separated value): write_csv( crbirding_observations, path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_observations.csv&quot;), na = &quot;&quot; ) "],["5_map_to_previous_output.html", "7 Compare to data transfer of 2019 and preserve IDs 7.1 Read data 7.2 Users 7.3 Map birds 7.4 Map observations", " 7 Compare to data transfer of 2019 and preserve IDs SOVON asks us to preserve IDs used in mapped data as sent in April 2019. 7.1 Read data First, we need to read the data we sent them in April 2019. crbirding_users_2019 &lt;- read_csv(here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users_20190410.csv&quot;), col_types = cols( .default = col_character(), user_id = col_logical(), user_reference = col_number()), na = &quot;&quot;) crbirding_birds_2019 &lt;- read_csv(here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_birds_20190410.csv&quot;), col_types = cols( .default = col_character(), bird_id = col_logical(), bird_reference = col_number(), bird_bto = col_logical(), bird_birth_year = col_logical(), bird_date_begin = col_datetime( format = &quot;%d-%m-%Y&quot;), bird_date_end = col_datetime( format = &quot;%d-%m-%Y&quot;)), na = &quot;&quot;) crbirding_observations_2019 &lt;- read_csv(here::here( &quot;data&quot;, &quot;processed&quot;, &quot;crbirding_observations_20190410.csv&quot;), col_types = cols( .default = col_character(), user_id = col_logical(), user_reference = col_number(), bird_id = col_logical(), bird_reference = col_number(), observation_id = col_logical(), observation_reference = col_number(), observation_date = col_datetime( format = &quot;%d-%m-%Y&quot;), observation_time = col_logical(), check_bird = col_logical(), MRI = col_number(), melder_ringersnummer = col_logical(), condition = col_number() ), na = &quot;&quot;) We read also the data we mapped just now. crbirding_users &lt;- read_csv(here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.csv&quot;), col_types = cols( .default = col_character(), user_id = col_logical(), user_reference = col_number()), na = &quot;&quot;) crbirding_birds &lt;- read_csv(here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_birds.csv&quot;), col_types = cols( .default = col_character(), bird_id = col_logical(), bird_reference = col_number(), bird_bto = col_logical(), bird_birth_year = col_logical(), bird_date_begin = col_datetime( format = &quot;&quot;), bird_date_end = col_datetime( format = &quot;&quot;)), na = &quot;&quot;) crbirding_observations &lt;- read_csv(here::here( &quot;data&quot;, &quot;processed&quot;, &quot;crbirding_observations.csv&quot;), col_types = cols( .default = col_character(), user_id = col_logical(), user_reference = col_number(), bird_id = col_logical(), bird_reference = col_number(), observation_id = col_logical(), observation_reference = col_number(), observation_date = col_datetime( format = &quot;&quot;), observation_time = col_logical(), check_bird = col_logical(), MRI = col_number(), melder_ringersnummer = col_logical(), observation_condition = col_number() ), na = &quot;&quot;) To improve the comparison of bird data, we read also raw observations: obs_and_acts &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), col_types = cols( .default = col_character(), sovon_bird_reference = col_double(), Nummer = col_double(), Datum = col_datetime(format = &quot;&quot;), WaarnemerNummer = col_double(), PlaatsLengtegraadGraden = col_double(), PlaatsLengtegraadMinuten = col_double(), PlaatsLengtegraadSeconden = col_double(), PlaatsBreedtegraadGraden = col_double(), PlaatsBreedtegraadMinuten = col_double(), PlaatsBreedtegraadSeconden = col_double(), BevestigingDatum = col_datetime(format = &quot;&quot;), AanmaakDatum = col_datetime(format = &quot;&quot;), WijzigDatum = col_datetime(format = &quot;&quot;) ) ) 7.2 Users Number of new users based on new user_reference (email and other private info not shown): crbirding_users %&gt;% filter(!user_reference %in% crbirding_users_2019$user_reference) %&gt;% select(user_reference, user_country, user_role) ## filter: removed 1,861 rows (91%), 177 rows remaining ## select: dropped 8 variables (user_id, user_email, user_first_name, user_last_name, user_address, ) Old user_reference IDs not anymore present (email and other private info not shown): crbirding_users_2019 %&gt;% filter(!user_reference %in% crbirding_users$user_reference) %&gt;% select(user_reference, user_country, user_role) ## filter: removed 1,861 rows (&gt;99%), one row remaining ## select: dropped 8 variables (user_id, user_email, user_first_name, user_last_name, user_address, ) Users from 2019 where some changes have been applied: same_ref_ids &lt;- crbirding_users %&gt;% filter(user_reference %in% crbirding_users_2019$user_reference) %&gt;% pull(user_reference) ## filter: removed 177 rows (9%), 1,861 rows remaining ids_users_with_changes &lt;- crbirding_users_2019 %&gt;% filter(user_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_users, by = names(crbirding_users)) %&gt;% pull(user_reference) ## filter: removed one row (&lt;1%), 1,861 rows remaining ## anti_join: added no columns ## &gt; rows only in x 7 ## &gt; rows only in y ( 184) ## &gt; matched rows (1,854) ## &gt; ======= ## &gt; rows total 7 ids_users_with_changes ## [1] 880 529 1609 1913 712 1786 542 7.3 Map birds Before mapping birds, we have to modify the color rings in crbirding_birds_2019 by applying the syntax discussed in #107 and #67. SOVON asks to follow this syntax: ring color + hyphen (-) + inscription without inscription color, e.g. W-EAAM instead of WN(EAAM). First, check that all color rings from 2019 have two letters before bracket (: crbirding_birds_2019 %&gt;% filter(is.na(bird_shorthand) | str_sub(bird_shorthand, start = 3, end = 3) == &quot;(&quot;) %&gt;% nrow == nrow(crbirding_birds_2019) ## filter: no rows removed ## [1] TRUE We proceed then to modify the color rings: crbirding_birds_2019 &lt;- crbirding_birds_2019 %&gt;% mutate(bird_shorthand = if_else( !is.na(bird_shorthand), str_c(str_sub(bird_shorthand, start = 1, end = 1), &quot;-&quot;, str_extract(bird_shorthand, pattern = &quot;(?&lt;=\\\\()(.*?)(?=\\\\))&quot;)), bird_shorthand )) ## mutate: changed 10,126 values (93%) of &#39;bird_shorthand&#39; (0 new NA) Preview: crbirding_birds_2019 %&gt;% select(bird_shorthand) %&gt;% filter(!is.na(bird_shorthand)) %&gt;% head(n = 100) ## select: dropped 16 variables (bird_id, bird_reference, bird_euring, bird_bto, bird_scheme, ) ## filter: removed 724 rows (7%), 10,126 rows remaining Now we can proceed mapping birds data. 7.3.1 Map bird_reference In INBO ring table, birds were uniquely identified by their very first ring (data were spread and untidy). We added a bird_reference field to gather information about multiple rings and link them to the same bird. This means that this field cannot be used to compare the actual INBO data with the data of 2019. We have to compare data by the very first color ring. As the dot for readibility is only preserved for the very last ring, it can be better to compare data by removing it from bird shorthand. We create an auxiliary column called inscription for both crbirding_birds and crbirding_birds_2019: crbirding_birds_2019 &lt;- crbirding_birds_2019 %&gt;% mutate(inscription = if_else(!is.na(bird_shorthand), str_extract( str_remove(bird_shorthand, &quot;\\\\.&quot;), &quot;(?&lt;=\\\\-)[A-Z0-9]*&quot;), NA_character_)) ## mutate: new variable &#39;inscription&#39; (character) with 10,014 unique values and 7% NA crbirding_birds &lt;- crbirding_birds %&gt;% mutate(inscription = if_else(!is.na(bird_shorthand), str_extract( str_remove(bird_shorthand, &quot;\\\\.&quot;), &quot;(?&lt;=\\\\-)[A-Z0-9]*&quot;), NA_character_)) ## mutate: new variable &#39;inscription&#39; (character) with 11,486 unique values and 6% NA We add the first color ring inscription as additional column, first_color_ring: crbirding_birds_first_color_ring &lt;- crbirding_birds %&gt;% select(bird_reference, inscription, bird_date_begin) %&gt;% group_by(bird_reference) %&gt;% filter(!is.na(inscription)) %&gt;% mutate(first_color_ring = if_else( bird_date_begin == min(bird_date_begin, na.rm = TRUE), inscription, NA_character_)) %&gt;% ungroup() %&gt;% filter(!is.na(first_color_ring)) %&gt;% distinct(bird_reference, first_color_ring) %&gt;% right_join(crbirding_birds, by = c(&quot;bird_reference&quot;)) ## select: dropped 15 variables (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## group_by: one grouping variable (bird_reference) ## filter (grouped): removed 762 rows (6%), 11,614 rows remaining ## mutate (grouped): new variable &#39;first_color_ring&#39; (character) with 11,137 unique values and 4% NA ## ungroup: no grouping variables ## filter: removed 478 rows (4%), 11,136 rows remaining ## distinct: no rows removed ## right_join: added 17 columns (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## &gt; rows only in x ( 0) ## &gt; rows only in y 0 ## &gt; matched rows 12,376 ## &gt; ======== ## &gt; rows total 12,376 All birds should get a valid first_color_ring column. Exceptions: crbirding_birds_first_color_ring %&gt;% filter(is.na(first_color_ring)) ## filter: removed all rows (100%) We do the same with ring data from 2019: crbirding_birds_first_color_ring_2019 &lt;- crbirding_birds_2019 %&gt;% select(bird_reference, inscription, bird_date_begin) %&gt;% group_by(bird_reference) %&gt;% filter(!is.na(inscription)) %&gt;% mutate(first_color_ring = if_else( bird_date_begin == min(bird_date_begin,na.rm = TRUE), inscription, NA_character_)) %&gt;% ungroup() %&gt;% filter(!is.na(first_color_ring)) %&gt;% distinct(bird_reference, first_color_ring) %&gt;% right_join(crbirding_birds_2019, by = c(&quot;bird_reference&quot;)) ## select: dropped 15 variables (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## group_by: one grouping variable (bird_reference) ## filter (grouped): removed 724 rows (7%), 10,126 rows remaining ## mutate (grouped): new variable &#39;first_color_ring&#39; (character) with 9,686 unique values and 4% NA ## ungroup: no grouping variables ## filter: removed 441 rows (4%), 9,685 rows remaining ## distinct: no rows removed ## right_join: added 17 columns (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## &gt; rows only in x ( 0) ## &gt; rows only in y 0 ## &gt; matched rows 10,850 ## &gt; ======== ## &gt; rows total 10,850 Even in this case all birds should get a valid first_color_ring column. Exceptions: crbirding_birds_first_color_ring_2019 %&gt;% filter(is.na(first_color_ring)) ## filter: removed all rows (100%) Now we can map the new bird_reference to the bird_reference of 2019: crbirding_birds_mapping_bird_reference &lt;- crbirding_birds_first_color_ring %&gt;% distinct(bird_reference, first_color_ring) %&gt;% left_join(crbirding_birds_first_color_ring_2019 %&gt;% distinct(bird_reference, first_color_ring) %&gt;% rename(bird_reference_2019 = bird_reference), by = &quot;first_color_ring&quot;) %&gt;% select(first_color_ring, everything()) ## distinct: removed 1,240 rows (10%), 11,136 rows remaining ## distinct: removed 1,165 rows (11%), 9,685 rows remaining ## rename: renamed one variable (bird_reference_2019) ## left_join: added one column (bird_reference_2019) ## &gt; rows only in x 1,504 ## &gt; rows only in y ( 53) ## &gt; matched rows 9,632 ## &gt; ======== ## &gt; rows total 11,136 ## select: columns reordered (first_color_ring, bird_reference, bird_reference_2019) head(crbirding_birds_mapping_bird_reference, n = 100) We add bird_reference_2019 to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% left_join((crbirding_birds_mapping_bird_reference %&gt;% select(bird_reference, bird_reference_2019)), by = &quot;bird_reference&quot;) %&gt;% select(bird_id, bird_reference, bird_reference_2019, everything()) ## select: dropped one variable (first_color_ring) ## left_join: added one column (bird_reference_2019) ## &gt; rows only in x 0 ## &gt; rows only in y ( 0) ## &gt; matched rows 12,376 ## &gt; ======== ## &gt; rows total 12,376 ## select: columns reordered (bird_id, bird_reference, bird_reference_2019, bird_euring, bird_bto, ) Number of birds present in 2019 but with bird_reference not equal to bird_reference_2019 : crbirding_birds %&gt;% filter(!is.na(bird_reference_2019)) %&gt;% filter(bird_reference != bird_reference_2019) %&gt;% nrow ## filter: removed 1,538 rows (12%), 10,838 rows remaining ## filter: removed 1,530 rows (14%), 9,308 rows remaining ## [1] 9308 This is not surprising as bird_reference has been defined as a progressive number, so it is sufficient the change of one bird reference to modify all the other references coming after. First change appears at: crbirding_birds %&gt;% filter(!is.na(bird_reference_2019)) %&gt;% filter(bird_reference != bird_reference_2019) %&gt;% filter(bird_reference == min(bird_reference)) %&gt;% select(bird_reference, bird_reference_2019, bird_shorthand) ## filter: removed 1,538 rows (12%), 10,838 rows remaining ## filter: removed 1,530 rows (14%), 9,308 rows remaining ## filter: removed 9,306 rows (&gt;99%), 2 rows remaining ## select: dropped 16 variables (bird_id, bird_euring, bird_bto, bird_scheme, bird_ring_number, ) 7.3.2 New bird_reference Some birds were not present in data transfer of April 2019, so the bird_reference cannot be mapped to bird_reference_2019. This case includes: New birds: birds ringed for the very first time after the previous data transfer in April 2019. Birds with modified first color ring: birds whose very first color ring has been corrected or added. This case is due to the fact that the first color ring is the real unique identifier in INBO ring table tblKleurring crbirding_birds %&gt;% anti_join(crbirding_birds_2019, by = c(&quot;bird_reference_2019&quot; = &quot;bird_reference&quot;)) ## anti_join: added no columns ## &gt; rows only in x 1,538 ## &gt; rows only in y ( 54) ## &gt; matched rows (10,838) ## &gt; ======== ## &gt; rows total 1,538 Based on column bird_date_begin (see above) we can see that most but not all rings have been placed after 2019-04-10, date of previous export. It can also occur that there are old rings which have been added to database after that date, so they are actually new rings, database speaking. So, to check which rings have been entered before 2019-04-10 we use column AanmaakDatum in raw observation data: supected_new_birds_before_export_date &lt;- crbirding_birds %&gt;% filter(is.na(bird_reference_2019)) %&gt;% left_join(crbirding_birds_first_color_ring %&gt;% distinct(bird_reference, first_color_ring), by = &quot;bird_reference&quot;) %&gt;% select(bird_reference, first_color_ring) %&gt;% left_join(obs_and_acts, by = c(&quot;first_color_ring&quot; = &quot;KleurringNummer&quot;)) %&gt;% select(bird_reference, first_color_ring, AanmaakDatum) %&gt;% group_by(bird_reference, first_color_ring) %&gt;% filter(AanmaakDatum == min(AanmaakDatum)) %&gt;% ungroup() %&gt;% filter(AanmaakDatum &lt; as_datetime(&quot;2019-04-10&quot;)) %&gt;% left_join(crbirding_birds, by = c(&quot;bird_reference&quot;)) ## filter: removed 10,838 rows (88%), 1,538 rows remaining ## distinct: removed 1,240 rows (10%), 11,136 rows remaining ## left_join: added one column (first_color_ring) ## &gt; rows only in x 0 ## &gt; rows only in y (9,632) ## &gt; matched rows 1,538 ## &gt; ======= ## &gt; rows total 1,538 ## select: dropped 18 variables (bird_id, bird_reference_2019, bird_euring, bird_bto, bird_shorthand, ) ## left_join: added 41 columns (sovon_bird_reference, Nummer, Datum, EuringCode, LeeftijdCode, ) ## &gt; rows only in x 4 ## &gt; rows only in y (145,631) ## &gt; matched rows 5,241 (includes duplicates) ## &gt; ========= ## &gt; rows total 5,245 ## select: dropped 40 variables (sovon_bird_reference, Nummer, Datum, EuringCode, LeeftijdCode, ) ## group_by: 2 grouping variables (bird_reference, first_color_ring) ## filter (grouped): removed 3,629 rows (69%), 1,616 rows remaining ## ungroup: no grouping variables ## filter: removed 1,614 rows (&gt;99%), 2 rows remaining ## left_join: added 18 columns (bird_id, bird_reference_2019, bird_euring, bird_bto, bird_shorthand, ) ## &gt; rows only in x 0 ## &gt; rows only in y (12,374) ## &gt; matched rows 2 ## &gt; ======== ## &gt; rows total 2 supected_new_birds_before_export_date To better retrieve potential matches to birds from 2019s export, we check birds from 2019 not included in actual data: crbirding_birds_first_color_ring_2019 %&gt;% anti_join(crbirding_birds_first_color_ring, by = &quot;first_color_ring&quot;) ## anti_join: added no columns ## &gt; rows only in x 54 ## &gt; rows only in y ( 1,538) ## &gt; matched rows (10,796) ## &gt; ======== ## &gt; rows total 54 As expected most of these rings are the so called virtual rings that we have decided to not include in new export (see #81-issuecomment-698964036). If we exclude them from this overview, the following birds remain: crbirding_birds_first_color_ring_2019 %&gt;% filter(str_sub(first_color_ring, start = 3, end = 3) != &quot;B&quot;) %&gt;% anti_join(crbirding_birds_first_color_ring, by = &quot;first_color_ring&quot;) ## filter: removed 67 rows (1%), 10,783 rows remaining ## anti_join: added no columns ## &gt; rows only in x 4 ## &gt; rows only in y ( 1,555) ## &gt; matched rows (10,779) ## &gt; ======== ## &gt; rows total 4 The ring ALOB is not the first ring in the new data, but it replaces the ring LPAV. We match it and assign bird_reference_2019 to this ring: bird_reference_ALOB &lt;- crbirding_birds %&gt;% filter(inscription == &quot;ALOB&quot;) %&gt;% pull(bird_reference) ## filter: removed 12,375 rows (&gt;99%), one row remaining bird_reference_ALOB_2019 &lt;- crbirding_birds_2019 %&gt;% filter(inscription == &quot;ALOB&quot;) %&gt;% pull(bird_reference) ## filter: removed 10,849 rows (&gt;99%), one row remaining crbirding_birds &lt;- crbirding_birds %&gt;% mutate(bird_reference_2019 = if_else(bird_reference == bird_reference_ALOB, bird_reference_ALOB_2019, bird_reference_2019)) ## mutate: changed 2 values (&lt;1%) of &#39;bird_reference_2019&#39; (0 new NA) The ring EAU has been removed from the database at the preprocessing stage (see section about the removal of some rings). Based on metal ring (bird_ring_number) information, date of ringing (bird_date_begin) and other fields we can see that the ring FMOV is the same as ring FMOU from 2019 export: all( crbirding_birds_2019 %&gt;% filter(bird_shorthand == &quot;B-FM.OU&quot;) %&gt;% select(bird_date_begin, bird_ring_number, bird_age_ringing, bird_ring_position) %&gt;% pull() == (crbirding_birds %&gt;% filter(bird_shorthand == &quot;B-FM.OV&quot;) %&gt;% select(bird_date_begin, bird_ring_number, bird_age_ringing, bird_ring_position) %&gt;% pull())) ## filter: removed 10,849 rows (&gt;99%), one row remaining ## select: dropped 14 variables (bird_id, bird_reference, bird_euring, bird_bto, bird_shorthand, ) ## filter: removed 12,375 rows (&gt;99%), one row remaining ## select: dropped 15 variables (bird_id, bird_reference, bird_reference_2019, bird_euring, bird_bto, ) ## [1] TRUE So, we can assign bird_reference_2019 to this ring: bird_reference_FMOV &lt;- crbirding_birds %&gt;% filter(inscription == &quot;FMOV&quot;) %&gt;% pull(bird_reference) ## filter: removed 12,375 rows (&gt;99%), one row remaining bird_reference_FMOU_2019 &lt;- crbirding_birds_2019 %&gt;% filter(inscription == &quot;FMOU&quot;) %&gt;% pull(bird_reference) ## filter: removed 10,849 rows (&gt;99%), one row remaining crbirding_birds &lt;- crbirding_birds %&gt;% mutate(bird_reference_2019 = if_else(bird_reference == bird_reference_FMOV, bird_reference_FMOU_2019, bird_reference_2019)) ## mutate: changed one value (&lt;1%) of &#39;bird_reference_2019&#39; (1 fewer NA) Show changes in column bird_reference_2019: crbirding_birds %&gt;% filter(bird_reference %in% c(bird_reference_ALOB, bird_reference_FMOV)) %&gt;% select(bird_reference, bird_reference_2019, bird_shorthand) ## filter: removed 12,373 rows (&gt;99%), 3 rows remaining ## select: dropped 16 variables (bird_id, bird_euring, bird_bto, bird_scheme, bird_ring_number, ) 7.3.3 Use bird_reference from 2019 as primary key To ease the work of SOVON It team and as discussed in issue 128 we reuse the old bird references (bird_reference_2019) as primary key in crbirding_birds where present, being careful to change the foreign key in crbirding_observations as well. We do it by using a helping column, new_bird_reference filled with old bird references where possible and with the new ones plus 20000 to ensure unicity: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(new_bird_reference = if_else(!is.na(bird_reference_2019), bird_reference_2019, bird_reference + 20000)) ## mutate: new variable &#39;new_bird_reference&#39; (double) with 11,136 unique values and 0% NA Is new_bird_reference unique? nrow(crbirding_birds %&gt;% distinct(bird_reference, new_bird_reference)) == nrow(crbirding_birds %&gt;% distinct(bird_reference)) ## distinct: removed 1,240 rows (10%), 11,136 rows remaining ## distinct: removed 1,240 rows (10%), 11,136 rows remaining ## [1] TRUE We can now add the new_bird_reference to observations as well: crbirding_observations &lt;- crbirding_observations %&gt;% left_join(crbirding_birds %&gt;% distinct(bird_reference, new_bird_reference), by = &quot;bird_reference&quot;) ## distinct: removed 1,240 rows (10%), 11,136 rows remaining ## left_join: added one column (new_bird_reference) ## &gt; rows only in x 0 ## &gt; rows only in y ( 0) ## &gt; matched rows 150,650 ## &gt; ========= ## &gt; rows total 150,650 Again, double checking that new_bird_reference is unique: nrow(crbirding_observations %&gt;% distinct(bird_reference, new_bird_reference)) == nrow(crbirding_observations %&gt;% distinct(bird_reference)) ## distinct: removed 139,514 rows (93%), 11,136 rows remaining ## distinct: removed 139,514 rows (93%), 11,136 rows remaining ## [1] TRUE Now we can safely copy the values of new_bird_reference to bird_reference and remove the help columns bird_reference_2019 and inscription: crbirding_birds &lt;- crbirding_birds %&gt;% select(-c(bird_reference, bird_reference_2019, inscription)) %&gt;% rename(bird_reference = new_bird_reference) %&gt;% # reorder columns select(bird_id, bird_reference, everything()) ## select: dropped 3 variables (bird_reference, bird_reference_2019, inscription) ## rename: renamed one variable (bird_reference) ## select: columns reordered (bird_id, bird_reference, bird_euring, bird_bto, bird_shorthand, ) crbirding_observations &lt;- crbirding_observations %&gt;% select(-bird_reference) %&gt;% rename(bird_reference = new_bird_reference) %&gt;% # reorder columns select(user_id, user_reference, bird_id, bird_reference, everything()) ## select: dropped one variable (bird_reference) ## rename: renamed one variable (bird_reference) ## select: columns reordered (user_id, user_reference, bird_id, bird_reference, observation_id, ) crbirding_birds_2019 &lt;- crbirding_birds_2019 %&gt;% select(-c(inscription)) ## select: dropped one variable (inscription) 7.3.4 Changed bird_euring crbirding_birds %&gt;% # remove new rings filter(bird_reference - 20000 &lt; 0) %&gt;% anti_join(crbirding_birds_2019, by = c(&quot;bird_reference&quot;, &quot;bird_euring&quot;)) %&gt;% select(bird_reference, bird_euring) %&gt;% left_join(crbirding_birds_2019 %&gt;% rename(bird_euring_2019 = bird_euring) %&gt;% select(bird_reference, bird_euring_2019), by = (&quot;bird_reference&quot;)) ## filter: removed 1,537 rows (12%), 10,839 rows remaining ## anti_join: added no columns ## &gt; rows only in x 9 ## &gt; rows only in y ( 61) ## &gt; matched rows (10,830) ## &gt; ======== ## &gt; rows total 9 ## select: dropped 15 variables (bird_id, bird_bto, bird_shorthand, bird_scheme, bird_ring_number, ) ## rename: renamed one variable (bird_euring_2019) ## select: dropped 15 variables (bird_id, bird_bto, bird_shorthand, bird_scheme, bird_ring_number, ) ## left_join: added one column (bird_euring_2019) ## &gt; rows only in x 0 ## &gt; rows only in y (10,841) ## &gt; matched rows 9 ## &gt; ======== ## &gt; rows total 9 7.3.5 Changed bird_shorthand Birds with changed ring history: bird_ref_changed_shorthand &lt;- crbirding_birds %&gt;% # remove new rings filter(bird_reference - 20000 &lt; 0) %&gt;% select(bird_reference, bird_shorthand) %&gt;% anti_join(crbirding_birds_2019, by = c(&quot;bird_reference&quot;, &quot;bird_shorthand&quot;)) %&gt;% distinct(bird_reference) ## filter: removed 1,537 rows (12%), 10,839 rows remaining ## select: dropped 15 variables (bird_id, bird_euring, bird_bto, bird_scheme, bird_ring_number, ) ## anti_join: added no columns ## &gt; rows only in x 50 ## &gt; rows only in y ( 77) ## &gt; matched rows (10,789) ## &gt; ======== ## &gt; rows total 50 ## distinct: removed 21 rows (42%), 29 rows remaining bird_ref_changed_shorthand bird_shorthand history in crbirding_birds: crbirding_birds %&gt;% filter(bird_reference %in% bird_ref_changed_shorthand$bird_reference) %&gt;% select(bird_reference, bird_shorthand, bird_date_begin, bird_date_end) %&gt;% arrange(bird_reference) ## filter: removed 12,314 rows (99%), 62 rows remaining ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_scheme, bird_ring_number, ) Values of bird_shorthand in crbirding_birds_2019: crbirding_birds_2019 %&gt;% filter(bird_reference %in% bird_ref_changed_shorthand$bird_reference) %&gt;% select(bird_reference, bird_shorthand, bird_date_begin, bird_date_end) %&gt;% # add &quot;_2019&quot; to make sure we are speaking of 2019&#39;s export data rename_all(paste0, &quot;_2019&quot;) %&gt;% arrange(bird_reference_2019) ## filter: removed 10,813 rows (&gt;99%), 37 rows remaining ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_scheme, bird_ring_number, ) ## rename_all: renamed 4 variables (bird_reference_2019, bird_shorthand_2019, bird_date_begin_2019, bird_date_end_2019) Most of these changes are due to change the color rings. 7.3.6 Changed bird_scheme Rings with changed bird_scheme: changed_bird_scheme &lt;- crbirding_birds %&gt;% # remove new rings filter(bird_reference - 20000 &lt; 0) %&gt;% anti_join(crbirding_birds_2019, by = c(&quot;bird_reference&quot;, &quot;bird_scheme&quot;)) %&gt;% select(bird_reference, bird_reference, bird_scheme, bird_date_begin, bird_date_end) %&gt;% left_join(crbirding_birds_2019 %&gt;% rename(bird_scheme_2019 = bird_scheme) %&gt;% select(bird_reference, bird_scheme_2019, bird_date_begin, bird_date_end), by = (c(&quot;bird_reference&quot;, &quot;bird_date_begin&quot;, &quot;bird_date_end&quot;))) %&gt;% filter(!is.na(bird_scheme_2019) | !is.na(bird_scheme)) %&gt;% select(bird_reference, bird_scheme, bird_scheme_2019, everything()) ## filter: removed 1,537 rows (12%), 10,839 rows remaining ## anti_join: added no columns ## &gt; rows only in x 4,401 ## &gt; rows only in y (4,412) ## &gt; matched rows (6,438) ## &gt; ======= ## &gt; rows total 4,401 ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_shorthand, bird_ring_number, ) ## rename: renamed one variable (bird_scheme_2019) ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_shorthand, bird_ring_number, ) ## left_join: added one column (bird_scheme_2019) ## &gt; rows only in x 53 ## &gt; rows only in y (6,502) ## &gt; matched rows 4,348 ## &gt; ======= ## &gt; rows total 4,401 ## filter: removed 13 rows (&lt;1%), 4,388 rows remaining ## select: columns reordered (bird_reference, bird_scheme, bird_scheme_2019, bird_date_begin, bird_date_end) changed_bird_scheme Mapping values: changed_bird_scheme %&gt;% group_by(bird_scheme, bird_scheme_2019) %&gt;% count() ## group_by: 2 grouping variables (bird_scheme, bird_scheme_2019) ## count: now 4 rows and 3 columns, 2 group variables remaining (bird_scheme, bird_scheme_2019) 7.3.7 Changed bird_ring_number Rings with changed bird_ring_number: changed_bird_ring_number &lt;- crbirding_birds %&gt;% # remove new rings filter(bird_reference - 20000 &lt; 0) %&gt;% anti_join(crbirding_birds_2019, by = c(&quot;bird_reference&quot;, &quot;bird_ring_number&quot;)) %&gt;% select(bird_reference, bird_ring_number, bird_date_begin, bird_date_end) %&gt;% left_join(crbirding_birds_2019 %&gt;% rename(bird_ring_number_2019 = bird_ring_number) %&gt;% select(bird_reference, bird_ring_number_2019, bird_date_begin, bird_date_end), by = (c(&quot;bird_reference&quot;, &quot;bird_date_begin&quot;, &quot;bird_date_end&quot;))) %&gt;% filter(!is.na(bird_ring_number_2019) | !is.na(bird_ring_number)) %&gt;% select(contains(&quot;reference&quot;), contains(&quot;number&quot;), contains(&quot;date&quot;)) ## filter: removed 1,537 rows (12%), 10,839 rows remaining ## anti_join: added no columns ## &gt; rows only in x 110 ## &gt; rows only in y ( 145) ## &gt; matched rows (10,729) ## &gt; ======== ## &gt; rows total 110 ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## rename: renamed one variable (bird_ring_number_2019) ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## left_join: added one column (bird_ring_number_2019) ## &gt; rows only in x 25 ## &gt; rows only in y (10,765) ## &gt; matched rows 85 ## &gt; ======== ## &gt; rows total 110 ## filter: removed 15 rows (14%), 95 rows remaining ## select: columns reordered (bird_reference, bird_ring_number, bird_ring_number_2019, bird_date_begin, bird_date_end) changed_bird_ring_number 7.3.8 Changed bird_name Rings with changed bird_name: changed_bird_name &lt;- crbirding_birds %&gt;% # remove new rings filter(bird_reference - 20000 &lt; 0) %&gt;% anti_join(crbirding_birds_2019, by = c(&quot;bird_reference&quot;, &quot;bird_name&quot;)) %&gt;% select(bird_reference, bird_name, bird_date_begin, bird_date_end) %&gt;% left_join(crbirding_birds_2019 %&gt;% rename(bird_name_2019 = bird_name) %&gt;% select(bird_reference, bird_name_2019, bird_date_begin, bird_date_end), by = (c(&quot;bird_reference&quot;, &quot;bird_date_begin&quot;, &quot;bird_date_end&quot;))) %&gt;% filter(!is.na(bird_name_2019) | !is.na(bird_name)) %&gt;% select(bird_reference, contains(&quot;name&quot;), contains(&quot;date&quot;)) ## filter: removed 1,537 rows (12%), 10,839 rows remaining ## anti_join: added no columns ## &gt; rows only in x 2 ## &gt; rows only in y ( 53) ## &gt; matched rows (10,837) ## &gt; ======== ## &gt; rows total 2 ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## rename: renamed one variable (bird_name_2019) ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## left_join: added one column (bird_name_2019) ## &gt; rows only in x 2 ## &gt; rows only in y (10,850) ## &gt; matched rows 0 ## &gt; ======== ## &gt; rows total 2 ## filter: no rows removed ## select: columns reordered (bird_reference, bird_name, bird_name_2019, bird_date_begin, bird_date_end) changed_bird_name 7.3.9 Changed bird_sex Rings with changed bird_sex: changed_bird_sex &lt;- crbirding_birds %&gt;% # remove new rings filter(bird_reference - 20000 &lt; 0) %&gt;% anti_join(crbirding_birds_2019, by = c(&quot;bird_reference&quot;, &quot;bird_sex&quot;)) %&gt;% select(bird_reference, bird_sex, bird_date_begin, bird_date_end) %&gt;% left_join(crbirding_birds_2019 %&gt;% rename(bird_sex_2019 = bird_sex) %&gt;% select(bird_reference, bird_sex_2019, bird_date_begin, bird_date_end), by = (c(&quot;bird_reference&quot;, &quot;bird_date_begin&quot;, &quot;bird_date_end&quot;))) %&gt;% filter(!is.na(bird_sex_2019) | !is.na(bird_sex)) %&gt;% select(contains(&quot;reference&quot;), contains(&quot;sex&quot;), contains(&quot;date&quot;)) ## filter: removed 1,537 rows (12%), 10,839 rows remaining ## anti_join: added no columns ## &gt; rows only in x 55 ## &gt; rows only in y ( 105) ## &gt; matched rows (10,784) ## &gt; ======== ## &gt; rows total 55 ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## rename: renamed one variable (bird_sex_2019) ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## left_join: added one column (bird_sex_2019) ## &gt; rows only in x 4 ## &gt; rows only in y (10,799) ## &gt; matched rows 51 ## &gt; ======== ## &gt; rows total 55 ## filter: no rows removed ## select: columns reordered (bird_reference, bird_sex, bird_sex_2019, bird_date_begin, bird_date_end) changed_bird_sex 7.3.10 Changed bird_date_begin Rings with changed bird_date_begin excluding the birds with new rings: same_rings &lt;- crbirding_birds %&gt;% # remove new rings filter(bird_reference - 20000 &lt; 0) %&gt;% select(bird_reference, bird_shorthand, bird_date_begin, bird_date_end) %&gt;% inner_join(crbirding_birds_2019 %&gt;% select(bird_reference, bird_date_begin_2019 = bird_date_begin, bird_shorthand, bird_date_end_2019 = bird_date_end), by = c(&quot;bird_reference&quot;, &quot;bird_shorthand&quot;)) ## filter: removed 1,537 rows (12%), 10,839 rows remaining ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_scheme, bird_ring_number, ) ## select: renamed 2 variables (bird_date_begin_2019, bird_date_end_2019) and dropped 13 variables ## inner_join: added 2 columns (bird_date_begin_2019, bird_date_end_2019) ## &gt; rows only in x ( 50) ## &gt; rows only in y ( 77) ## &gt; matched rows 11,032 (includes duplicates) ## &gt; ======== ## &gt; rows total 11,032 changed_bird_date_begin_end &lt;- same_rings %&gt;% group_by(bird_reference) %&gt;% filter(!bird_date_begin %in% bird_date_begin_2019 | !bird_date_end %in% bird_date_end_2019) %&gt;% filter(!is.na(bird_date_begin) &amp; !is.na(bird_date_begin_2019) &amp; !is.na(bird_date_end) &amp; !is.na(bird_date_end_2019)) %&gt;% distinct(bird_reference) ## group_by: one grouping variable (bird_reference) ## filter (grouped): removed 10,954 rows (99%), 78 rows remaining ## filter (grouped): removed 77 rows (99%), one row remaining ## distinct (grouped): no rows removed changed_bird_date_begin_end Actual color ring history: changed_bird_date_begin_end %&gt;% left_join(crbirding_birds, by = &quot;bird_reference&quot;) %&gt;% select(bird_reference, bird_shorthand, bird_date_begin, bird_date_end) ## left_join: added 16 columns (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## &gt; rows only in x 0 ## &gt; rows only in y (12,373) ## &gt; matched rows 3 (includes duplicates) ## &gt; ======== ## &gt; rows total 3 ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_scheme, bird_ring_number, ) Color ring history data from 2019: changed_bird_date_begin_end %&gt;% left_join(crbirding_birds_2019, by = &quot;bird_reference&quot;) %&gt;% select(bird_reference, bird_shorthand, bird_date_begin, bird_date_end) ## left_join: added 16 columns (bird_id, bird_euring, bird_bto, bird_shorthand, bird_scheme, ) ## &gt; rows only in x 0 ## &gt; rows only in y (10,846) ## &gt; matched rows 4 (includes duplicates) ## &gt; ======== ## &gt; rows total 4 ## select: dropped 13 variables (bird_id, bird_euring, bird_bto, bird_scheme, bird_ring_number, ) 7.3.11 Save bird data with updated bird_reference We save crbirding_birds with the updated unique identifiers in bird_reference: crbirding_birdss &lt;- crbirding_birds %&gt;% mutate( bird_date_begin = as.Date(bird_date_begin), bird_date_end = as.Date(bird_date_end)) %&gt;% write_csv(path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_birds.csv&quot;), na = &quot;&quot; ) ## mutate: converted &#39;bird_date_begin&#39; from double to Date (0 new NA) ## converted &#39;bird_date_end&#39; from double to Date (0 new NA) 7.4 Map observations Number of new observations based on new observation_reference (email and other private info not shown): crbirding_observations %&gt;% filter(!observation_reference %in% crbirding_observations_2019$observation_reference) %&gt;% nrow() ## filter: removed 134,917 rows (90%), 15,733 rows remaining ## [1] 15733 Old observations not anymore present (all columns info from 2019 data): crbirding_observations_2019 %&gt;% filter(!observation_reference %in% crbirding_observations$observation_reference) %&gt;% select(-contains(&quot;melder&quot;)) ## filter: removed 134,917 rows (&gt;99%), 117 rows remaining ## select: dropped 3 variables (melder, melder_email, melder_ringersnummer) Save in same_ref_ids the observation reference of observations present in both data.frames: same_ref_ids &lt;- crbirding_observations %&gt;% filter(observation_reference %in% crbirding_observations_2019$observation_reference) %&gt;% pull(observation_reference) ## filter: removed 15,733 rows (10%), 134,917 rows remaining 7.4.1 Changed geospatial information Details of observations with changes in latitude (observation_lat) and/or longitude (observation_lng): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;observation_lat&quot;, &quot;observation_lng&quot;)) %&gt;% select(observation_reference, observation_lat, observation_lng) %&gt;% rename(observation_lat_2019 = observation_lat, observation_lng_2019 = observation_lng) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, observation_lat, observation_lng), by = &quot;observation_reference&quot;) %&gt;% select(observation_reference, observation_lat_2019, observation_lat, observation_lng_2019, observation_lng) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 11,216 ## &gt; rows only in y ( 26,949) ## &gt; matched rows (123,701) ## &gt; ========= ## &gt; rows total 11,216 ## select: dropped 22 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## rename: renamed 2 variables (observation_lat_2019, observation_lng_2019) ## select: dropped 22 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## left_join: added 2 columns (observation_lat, observation_lng) ## &gt; rows only in x 0 ## &gt; rows only in y (139,434) ## &gt; matched rows 11,216 ## &gt; ========= ## &gt; rows total 11,216 ## select: columns reordered (observation_reference, observation_lat_2019, observation_lat, observation_lng_2019, observation_lng) Notice how these are observations where the longitude direction was not mapped properly during export of 2019 (see issue #105). Details of observations with changes in location (column observation_location): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;observation_location&quot;)) %&gt;% select(observation_reference, observation_location) %&gt;% rename(observation_location_2019 = observation_location) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, observation_location), by = &quot;observation_reference&quot;) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 147 ## &gt; rows only in y ( 15,880) ## &gt; matched rows (134,770) ## &gt; ========= ## &gt; rows total 147 ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## rename: renamed one variable (observation_location_2019) ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## left_join: added one column (observation_location) ## &gt; rows only in x 0 ## &gt; rows only in y (150,503) ## &gt; matched rows 147 ## &gt; ========= ## &gt; rows total 147 7.4.2 Changed temporal information Details of observations with changes in temporal information (column observation_date): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;observation_date&quot;)) %&gt;% select(observation_reference, observation_date) %&gt;% rename(observation_date_2019 = observation_date) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, observation_date), by = &quot;observation_reference&quot;) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 5 ## &gt; rows only in y ( 15,738) ## &gt; matched rows (134,912) ## &gt; ========= ## &gt; rows total 5 ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## rename: renamed one variable (observation_date_2019) ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## left_join: added one column (observation_date) ## &gt; rows only in x 0 ## &gt; rows only in y (150,645) ## &gt; matched rows 5 ## &gt; ========= ## &gt; rows total 5 7.4.3 Changed user information Details of observations with changes in user detail(no details about users shown, just user_reference): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;user_reference&quot;, &quot;melder&quot;, &quot;melder_email&quot;)) %&gt;% select(observation_reference, user_reference) %&gt;% rename(user_reference_2019 = user_reference) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, user_reference), by = &quot;observation_reference&quot;) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 71 ## &gt; rows only in y ( 15,804) ## &gt; matched rows (134,846) ## &gt; ========= ## &gt; rows total 71 ## select: dropped 23 variables (user_id, bird_id, bird_reference, observation_id, observation_date, ) ## rename: renamed one variable (user_reference_2019) ## select: dropped 23 variables (user_id, bird_id, bird_reference, observation_id, observation_date, ) ## left_join: added one column (user_reference) ## &gt; rows only in x 0 ## &gt; rows only in y (150,579) ## &gt; matched rows 71 ## &gt; ========= ## &gt; rows total 71 Most user_reference are the same as in 2019: it means that changes are in the columns hidden for privacy reasons. These user ids are indeed the ones stored above in variable ids_users_with_changes in the Users section. 7.4.4 Changed metal ring information Details of observations with changes in metal ring information (columns MRI and ring_number): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;MRI&quot;, &quot;ring_number&quot;)) %&gt;% select(observation_reference, MRI, ring_number) %&gt;% rename(MRI_2019 = MRI, ring_number_2019 = ring_number) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, MRI, ring_number), by = &quot;observation_reference&quot;) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 5 ## &gt; rows only in y ( 15,738) ## &gt; matched rows (134,912) ## &gt; ========= ## &gt; rows total 5 ## select: dropped 22 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## rename: renamed 2 variables (MRI_2019, ring_number_2019) ## select: dropped 22 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## left_join: added 2 columns (MRI, ring_number) ## &gt; rows only in x 0 ## &gt; rows only in y (150,645) ## &gt; matched rows 5 ## &gt; ========= ## &gt; rows total 5 7.4.5 Changed condition First we rename column condition of crbirding_observation_2019 to new column name observation_condition: crbirding_observations_2019 &lt;- crbirding_observations_2019 %&gt;% rename(observation_condition = condition) ## rename: renamed one variable (observation_condition) Details of observations with changes in condition: crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;observation_condition&quot;)) %&gt;% select(observation_reference, observation_condition) %&gt;% rename(observation_condition_2019 = observation_condition) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, observation_condition), by = &quot;observation_reference&quot;) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 134,917 ## &gt; rows only in y (150,650) ## &gt; matched rows ( 0) ## &gt; ========= ## &gt; rows total 134,917 ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## rename: renamed one variable (observation_condition_2019) ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## left_join: added one column (observation_condition) ## &gt; rows only in x 0 ## &gt; rows only in y ( 15,733) ## &gt; matched rows 134,917 ## &gt; ========= ## &gt; rows total 134,917 A lot of changes expected as the mapping codes used for observation_condition changed. 7.4.6 Changed status First we rename column status of crbirding_observation_2019 to new column name status_full_grown_bird: crbirding_observations_2019 &lt;- crbirding_observations_2019 %&gt;% rename(status_full_grown_bird = status) ## rename: renamed one variable (status_full_grown_bird) Details of observations with changes in status (column status_full_grown_bird): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;status_full_grown_bird&quot;)) %&gt;% select(observation_reference, status_full_grown_bird) %&gt;% rename(status_full_grown_bird_2019 = status_full_grown_bird) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, status_full_grown_bird), by = &quot;observation_reference&quot;) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 21 ## &gt; rows only in y ( 15,754) ## &gt; matched rows (134,896) ## &gt; ========= ## &gt; rows total 21 ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## rename: renamed one variable (status_full_grown_bird_2019) ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## left_join: added one column (status_full_grown_bird) ## &gt; rows only in x 0 ## &gt; rows only in y (150,629) ## &gt; matched rows 21 ## &gt; ========= ## &gt; rows total 21 7.4.7 Changed bird age Details of observations with changes in bird age at time of observation (column bird_age_obs): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;bird_age_obs&quot;)) %&gt;% select(observation_reference, bird_age_obs) %&gt;% rename(bird_age_obs_2019 = bird_age_obs) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, bird_age_obs), by = &quot;observation_reference&quot;) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 21 ## &gt; rows only in y ( 15,754) ## &gt; matched rows (134,896) ## &gt; ========= ## &gt; rows total 21 ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## rename: renamed one variable (bird_age_obs_2019) ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## left_join: added one column (bird_age_obs) ## &gt; rows only in x 0 ## &gt; rows only in y (150,629) ## &gt; matched rows 21 ## &gt; ========= ## &gt; rows total 21 7.4.8 Changed bird sex Details of observations with changes in bird sex at time of observation (column bird_sex): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;bird_sex&quot;)) %&gt;% select(observation_reference, bird_sex) %&gt;% rename(bird_sex_2019 = bird_sex) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, bird_sex), by = &quot;observation_reference&quot;) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 0 ## &gt; rows only in y ( 15,733) ## &gt; matched rows (134,917) ## &gt; ========= ## &gt; rows total 0 ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## rename: renamed one variable (bird_sex_2019) ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## left_join: added one column (bird_sex) ## &gt; rows only in x 0 ## &gt; rows only in y (150,650) ## &gt; matched rows 0 ## &gt; ========= ## &gt; rows total 0 7.4.9 Changed bird ring position Details of observations with changes in bird ring position (column bird_ring_position) or direction (bird_ring_direction): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;bird_ring_position&quot;, &quot;bird_ring_direction&quot;)) %&gt;% select(observation_reference, bird_ring_position, bird_ring_direction) %&gt;% rename(bird_ring_position_2019 = bird_ring_position, bird_ring_direction_2019 = bird_ring_direction) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, bird_ring_position, bird_ring_direction), by = &quot;observation_reference&quot;) %&gt;% select(observation_reference, bird_ring_position_2019, bird_ring_position, bird_ring_direction_2019, bird_ring_direction) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 0 ## &gt; rows only in y ( 15,733) ## &gt; matched rows (134,917) ## &gt; ========= ## &gt; rows total 0 ## select: dropped 22 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## rename: renamed 2 variables (bird_ring_position_2019, bird_ring_direction_2019) ## select: dropped 22 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## left_join: added 2 columns (bird_ring_position, bird_ring_direction) ## &gt; rows only in x 0 ## &gt; rows only in y (150,650) ## &gt; matched rows 0 ## &gt; ========= ## &gt; rows total 0 ## select: columns reordered (observation_reference, bird_ring_position_2019, bird_ring_position, bird_ring_direction_2019, bird_ring_direction) 7.4.10 Changed notes Details of observations with changes in observation notes (column observation_notes): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;observation_notes&quot;)) %&gt;% select(observation_reference, observation_notes) %&gt;% rename(observation_notes_2019 = observation_notes) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, observation_notes), by = &quot;observation_reference&quot;) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 39,847 ## &gt; rows only in y (55,580) ## &gt; matched rows (95,070) ## &gt; ======== ## &gt; rows total 39,847 ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## rename: renamed one variable (observation_notes_2019) ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## left_join: added one column (observation_notes) ## &gt; rows only in x 0 ## &gt; rows only in y (110,803) ## &gt; matched rows 39,847 ## &gt; ========= ## &gt; rows total 39,847 7.4.11 Changed capture information Details of observations with changes in capture information (column observation_is_capture): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;observation_reference&quot;, &quot;observation_is_capture&quot;)) %&gt;% select(observation_reference, observation_is_capture) %&gt;% rename(observation_is_capture_2019 = observation_is_capture) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, observation_is_capture), by = &quot;observation_reference&quot;) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 0 ## &gt; rows only in y ( 15,733) ## &gt; matched rows (134,917) ## &gt; ========= ## &gt; rows total 0 ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## rename: renamed one variable (observation_is_capture_2019) ## select: dropped 23 variables (user_id, user_reference, bird_id, bird_reference, observation_id, ) ## left_join: added one column (observation_is_capture) ## &gt; rows only in x 0 ## &gt; rows only in y (150,650) ## &gt; matched rows 0 ## &gt; ========= ## &gt; rows total 0 7.4.12 Changed bird reference Details of observations with changes in bird reference (column bird_reference): crbirding_observations_2019 %&gt;% filter(observation_reference %in% same_ref_ids) %&gt;% anti_join(crbirding_observations, by = c(&quot;bird_reference&quot;, &quot;observation_reference&quot;)) %&gt;% select(observation_reference, bird_reference) %&gt;% rename(bird_reference_2019 = bird_reference) %&gt;% left_join(crbirding_observations %&gt;% select(observation_reference, bird_reference), by = &quot;observation_reference&quot;) ## filter: removed 117 rows (&lt;1%), 134,917 rows remaining ## anti_join: added no columns ## &gt; rows only in x 33 ## &gt; rows only in y ( 15,766) ## &gt; matched rows (134,884) ## &gt; ========= ## &gt; rows total 33 ## select: dropped 23 variables (user_id, user_reference, bird_id, observation_id, observation_date, ) ## rename: renamed one variable (bird_reference_2019) ## select: dropped 23 variables (user_id, user_reference, bird_id, observation_id, observation_date, ) ## left_join: added one column (bird_reference) ## &gt; rows only in x 0 ## &gt; rows only in y (150,617) ## &gt; matched rows 33 ## &gt; ========= ## &gt; rows total 33 The huge number of changes of bird_reference has been discussed in previous session related to crbirding_birds. "]]
