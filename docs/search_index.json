[
["index.html", "Mapping INBO color ring data to SOVON format 1 Intro", " Mapping INBO color ring data to SOVON format Damiano Oldoni 2020-03-23 1 Intro This document contains and describes all the steps in mapping INBO color ring data to SOVON format. By running this document in R, it will create all the necessary data files. Settings to access INBO database are necessary. Load libraries: library(DBI) # To connect to database library(odbc) # To connect to database library(tidyverse) # To do datascience library(stringi) # To perform string operations library(tidylog) # To provide feedback on dplyr functions library(tidyselect) # To select columns smartly library(measurements) # To convert measurement units library(here) # To find files library(lubridate) # To ease working with dates The output of the data processing consists of three dataframes saved as comma separated files (csv) in folder data/processed/: crbirding_users: user data crbirding_birds: ring data crbirding_observations: observation data "],
["1_preprocessing.html", "2 Extract data from INBO kleurring database 2.1 Connection to INBO database 2.2 Import data 3 Pre-processing 3.1 Preview raw data 3.2 Check primary key consistency 3.3 Remove hard returns 3.4 Check spaces in birds 3.5 Check duplicates WaarnemingNummer-AktieCode 3.6 Merge observations and actions 3.7 Check spaces in obs_and_acts 3.8 Check presence action code 3.9 Remove data labelled as FOUT 3.10 Check color rings: uppercase 3.11 Check keys KleurringNummer (obs) - Nummer (birds) 3.12 Check duplicates in date of applying rings 3.13 Add rngme if not present 3.14 Check age while applying rings 3.15 Check bird sex inconsistencies 3.16 Handle information about metal ring number 3.17 Solve GPS tracker IDs 3.18 Check inconsistencies between users and observers 3.19 Remove data of common shelduck 3.20 Remove rings BGAH and BRAB 3.21 Check date of dood 3.22 Save preprocessed data", " 2 Extract data from INBO kleurring database 2.1 Connection to INBO database Get connection settings from config.yml (not included to the reposiory) and connect to database: meeuwen &lt;- config::get(&quot;meeuwen&quot;) conn &lt;- dbConnect(odbc::odbc(), driver = meeuwen$driver, server = meeuwen$server, database = meeuwen$database, port = meeuwen$port, trusted_connection = meeuwen$trusted_connection ) 2.2 Import data 2.2.1 Extract user data First, we extract data about users from INBO kleurring database: users &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.tblWaarnemer&quot;) %&gt;% as_tibble() 2.2.2 Extract color ring data birds &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.tblKleurring&quot;) %&gt;% as_tibble() We extract the color table in order to know the meaning of the color abbreviations in fields RingKleurCode and InscriptieKleurCode in birds. color_table &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.cdeKleur&quot;) %&gt;% as_tibble() color_table We also extract the ring position (left or right leg) and the inscription orientation: ring_position_table &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.cdeRingPlaats&quot;) %&gt;% as_tibble() ring_position_table 2.2.3 Extract observation data INBOâ€™s observation data contain a text type field: Opmerking. Text type is deprecated and an error will be returned if we perform the standard SQL query &quot;SELECT * FROM dbo.tblWaarneming&quot;. So, we need an ad-hoc query: obs &lt;- dbGetQuery( conn, &quot;SELECT Nummer, Datum, EuringCode, LeeftijdCode, KleurringNummer, KleurringPlaats, MetaalringNummer, MetaalringPlaats, PlaatsGemeente, PlaatsToponym, PlaatsToponymDetail, Convert(nvarchar(4000),Opmerking) as Opmerking, WaarnemerNummer, PlaatsLengtegraadGraden, PlaatsLengtegraadMinuten, PlaatsLengtegraadSeconden, PlaatsBreedtegraadGraden, PlaatsBreedtegraadMinuten, PlaatsBreedtegraadSeconden, PlaatsLengtegraadRichtingCode, PlaatsBreedtegraadRichtingCode, PlaatsLandCode, MetaalringLandCode, BevestigingDatum, PlaatsProvincie, AanmaakDatum, WijzigDatum FROM dbo.tblWaarneming&quot; ) %&gt;% as_tibble() Table tblWaarnemingAktie is also important because contains informations about the actions taken at each observation: obs_actions &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.tblWaarnemingAktie&quot;) The action codes are described in table dbo.cdeAktie: actions_meaning &lt;- dbGetQuery(conn, &quot;SELECT * FROM dbo.cdeAktie&quot;) actions_meaning Close connection to server: dbDisconnect(conn) 2.2.4 Import control data From UVABIT repository, we copied a text file containing the mapping of GPS ids: map_gps_path &lt;- here::here(&quot;data&quot;, &quot;input&quot;, &quot;map_gps_id_to_color_ring.tsv&quot;) map_gps &lt;- read_tsv(map_gps_path) %&gt;% mutate(sovon_bird_notes = &quot;uvabits_gps_tag.&quot;) map_gps %&gt;% head() This file will be used later in this same document. 3 Pre-processing 3.1 Preview raw data For privcay reasons users data cannot be shown. Users data refer to the following fields: colnames(users) ## [1] &quot;Nummer&quot; &quot;Familienaam&quot; &quot;Voornaam&quot; &quot;Adres&quot; ## [5] &quot;Postcode&quot; &quot;Gemeente&quot; &quot;Email&quot; &quot;Telefoon&quot; ## [9] &quot;Wachtwoord&quot; &quot;Gebruikersnaam&quot; &quot;LandCode&quot; &quot;TelefoonMobiel&quot; ## [13] &quot;TelefoonWerk&quot; Preview birds data: birds %&gt;% head() Preview observations data: obs %&gt;% head() Preview observation actions data: obs_actions %&gt;% head() 3.2 Check primary key consistency The primary key of each table shuold never be left empty and should contain unique values. 3.2.1 Users Primary key: column Nummer. Users with empty values: users %&gt;% filter(is.na(Nummer)) Users with not unique values of Nummer: users %&gt;% group_by(Nummer) %&gt;% count() %&gt;% filter(n &gt; 1) 3.2.2 Birds Primary key: column Nummer. Birds with empty values: birds %&gt;% filter(is.na(Nummer)) Birds with not unique values of Nummer: birds %&gt;% group_by(Nummer) %&gt;% count() %&gt;% filter(n &gt; 1) 3.2.3 Observations Primary key: column Nummer. Observations with empty values: obs %&gt;% filter(is.na(Nummer)) Observations with not unique values of Nummer: obs %&gt;% group_by(Nummer) %&gt;% count() %&gt;% filter(n &gt; 1) 3.2.4 Actions Primary key: column Nummer. Actions with empty values: obs_actions %&gt;% filter(is.na(Nummer)) Observations with not unique values of Nummer: obs_actions %&gt;% group_by(Nummer) %&gt;% count() %&gt;% filter(n &gt; 1) 3.3 Remove hard returns 3.3.1 Remove hard returns in users Remove hard returns \\r\\n in users: users &lt;- users %&gt;% mutate_if(is.character, ~ str_replace_all(., &quot;[\\\\r\\\\n]&quot;, &quot;&quot;)) 3.3.2 Remove hard returns in birds Remove hard returns \\r\\n in birds: birds &lt;- birds %&gt;% mutate_if(is.character, ~ str_replace_all(., &quot;[\\\\r\\\\n]&quot;, &quot;&quot;)) 3.3.3 Remove hard returns in observations Remove hard returns \\r\\n in observations: obs &lt;- obs %&gt;% mutate_if(is.character, ~ str_replace_all(., &quot;[\\\\r\\\\n]&quot;, &quot;&quot;)) 3.4 Check spaces in birds No spaces should be present in any column of birds: map_dfr(birds, ~ mutate(birds, space_detect = str_detect(., pattern = &quot; &quot;))) %&gt;% filter(space_detect == TRUE) Remove all spaces: birds &lt;- birds %&gt;% mutate_all(list(~ str_replace_all(., &quot; &quot;, &quot;&quot;))) 3.5 Check duplicates WaarnemingNummer-AktieCode The action acronym is contained in column AktieCode. Observations and their actions are linked via columns WaarnemingNummer (in actions) and Nummer (in obs). No duplicates WaarnemingNummer-AktieCode should exist: obs_actions %&gt;% group_by(WaarnemingNummer, AktieCode) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) Otherwise they should be removed: obs_actions &lt;- obs_actions %&gt;% distinct(WaarnemingNummer, AktieCode, .keep_all = TRUE) 3.6 Merge observations and actions In order to ease the mapping of birds and observations, we first remove columns will be never used: obs_actions &lt;- obs_actions %&gt;% select(-c( Nummer, AanmaakDatum, WijzigDatum )) Then we spread action codes to columns: obs_actions &lt;- obs_actions %&gt;% pivot_wider(names_from = AktieCode, values_from = AktieCode) The following combinations occurr: combinations_actions &lt;- obs_actions %&gt;% select(-WaarnemingNummer) %&gt;% distinct() combinations_actions Actions present in database: acts &lt;- names(combinations_actions) acts ## [1] &quot;rngme&quot; &quot;rngkl&quot; &quot;veld&quot; &quot;dood&quot; &quot;vang&quot; &quot;klgev&quot; &quot;br&quot; &quot;vangl&quot; ## [9] &quot;klweg&quot; &quot;me&quot; &quot;meweg&quot; &quot;ziek&quot; Actions described in actions_meaning never used: actions_meaning %&gt;% filter(!Code %in% acts) We add action code columns to observations in order to have a unique dataframe for observations: obs_and_acts &lt;- obs %&gt;% left_join(obs_actions, by = c(&quot;Nummer&quot; = &quot;WaarnemingNummer&quot;)) Preview: head(obs_and_acts, n = 100) 3.7 Check spaces in obs_and_acts No spaces should be present in character columns of obs_and_acts except for columns related to place description (Plaats*), datums (*Datum) and notes (Opmerking): map_dfr(obs_and_acts %&gt;% select_if(is.character) %&gt;% select(-c( starts_with(&quot;Plaats&quot;), Opmerking, ends_with(&quot;Datum&quot;) )), ~ mutate(obs_and_acts, space_detect = str_detect(., pattern = &quot; &quot;))) %&gt;% filter(space_detect == TRUE) %&gt;% arrange(Nummer) Remove spaces if present: obs_and_acts &lt;- obs_and_acts %&gt;% mutate_at( vars(-c( starts_with(&quot;Plaats&quot;), ends_with(&quot;Datum&quot;), one_of(&quot;Opmerking&quot;, &quot;Nummer&quot;, &quot;WaarnemerNummer&quot;) )), funs(str_replace(., &quot; &quot;, &quot;&quot;)) ) 3.8 Check presence action code All observations should also have an action code: no_actions &lt;- obs_and_acts %&gt;% filter_at(vars_select(names(obs_and_acts), one_of(acts)), all_vars(is.na(.))) no_actions Observation without it will be removed: obs_and_acts &lt;- obs_and_acts %&gt;% filter(!Nummer %in% no_actions$Nummer) 3.9 Remove data labelled as FOUT There are observations judged as error. They are marked byKleurringNummmer equal to FOUT: obs_and_acts %&gt;% filter(KleurringNummer == &quot;FOUT&quot;) The value FOUT is also present in birds: birds %&gt;% filter(Nummer == &quot;FOUT&quot;) These data are related to observations judged not correct (FOUT: error) by the INBO experts and administrator of the database. Thus, at the moment, we remove these data (discussion about this issue here) from observations: obs_and_acts &lt;- obs_and_acts %&gt;% filter(KleurringNummer != &quot;FOUT&quot;) and from birds: birds &lt;- birds %&gt;% filter(Nummer != &quot;FOUT&quot;) 3.10 Check color rings: uppercase Bird color rings codes are uppercase. Exceptions: birds %&gt;% filter(Nummer != toupper(Nummer) | NummerNieuw != toupper(NummerNieuw) | NummerDesc != toupper(NummerDesc)) are converted to uppercase: birds &lt;- birds %&gt;% mutate( Nummer = toupper(Nummer), NummerNieuw = toupper(NummerNieuw), NummerDesc = toupper(NummerDesc) ) The same holds true for KleurringNummer in obs_and_acts. Exceptions: obs_and_acts %&gt;% filter(KleurringNummer != toupper(KleurringNummer)) %&gt;% distinct(KleurringNummer) are transformed to uppercase: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(KleurringNummer = toupper(KleurringNummer)) 3.11 Check keys KleurringNummer (obs) - Nummer (birds) All values in KleurringNummer should be present in birds$Nummer. Exceptions: obs_and_acts %&gt;% filter(!KleurringNummer %in% birds$Nummer) %&gt;% distinct(KleurringNummer) We remove them: KleurringNummer_remove &lt;- obs_and_acts %&gt;% filter(!KleurringNummer %in% birds$Nummer) %&gt;% distinct(KleurringNummer) %&gt;% pull() obs_and_acts &lt;- obs_and_acts %&gt;% filter(!KleurringNummer %in% KleurringNummer_remove) Finally, we search for birds (Nummer in birds) not linked to any observation (KleurringNummer in obs_and_acts): birds %&gt;% filter(!Nummer %in% obs_and_acts$KleurringNummer) We remove them: birds &lt;- birds %&gt;% filter(Nummer %in% obs_and_acts$KleurringNummer) 3.12 Check duplicates in date of applying rings Detect duplicates in date of applying (the very first) color ring (action code rngkl): duplicates_ringing_rngkl &lt;- obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% group_by(KleurringNummer, Datum, rngkl) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) duplicates_ringing_rngkl and metal ring (action code rngme): duplicates_ringing_rngme &lt;- obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% group_by(KleurringNummer, Datum, rngme) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) duplicates_ringing_rngme 3.13 Add rngme if not present Some metal rings are not linked to an observation with action rngme, so we have no date for them: no_rngme &lt;- birds %&gt;% filter(!is.na(MetaalringNummer)) %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(rngme)) %&gt;% select(KleurringNummer, Datum), by = c(&quot;Nummer&quot; = &quot;KleurringNummer&quot;) ) %&gt;% filter(is.na(Datum)) %&gt;% select(Nummer, MetaalringNummer) %&gt;% rename(KleurringNummer = Nummer) %&gt;% arrange(KleurringNummer) no_rngme Experts are sure that these metal rings have been applied while applying the color ring (see comment on issue #33). So, we can add action rngme to observations coupled to action rngkl for these rings: obs_and_acts &lt;- obs_and_acts %&gt;% left_join(no_rngme %&gt;% select(KleurringNummer) %&gt;% mutate(add_rngme = TRUE), by = &quot;KleurringNummer&quot; ) %&gt;% mutate(rngme = case_when( rngkl == &quot;rngkl&quot; &amp; add_rngme == TRUE ~ &quot;rngme&quot;, TRUE ~ rngme )) %&gt;% select(-add_rngme) Be sure this solution provides a date for all metal rings: obs_and_acts %&gt;% filter(is.na(rngme) | rngme == &quot;rngme&quot;) %&gt;% nrow() == nrow(obs_and_acts) ## [1] TRUE 3.14 Check age while applying rings For each bird, observations with same date should refer to same bird age. Exceptions: exceptions_age &lt;- obs_and_acts %&gt;% filter(!is.na(LeeftijdCode)) %&gt;% # filter(!is.na(rngkl) | !is.na(rngme)) %&gt;% distinct(KleurringNummer, Datum, LeeftijdCode, WaarnemerNummer) %&gt;% group_by(KleurringNummer, Datum, WaarnemerNummer) %&gt;% count() %&gt;% filter(n &gt; 1) %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(LeeftijdCode)) %&gt;% select( Nummer, KleurringNummer, Datum, WaarnemerNummer, LeeftijdCode, one_of(actions_meaning$Code) )) %&gt;% select(-n) %&gt;% select( Nummer, KleurringNummer, Datum, LeeftijdCode, WaarnemerNummer, one_of(actions_meaning$Code) ) exceptions_age Are these exceptions field observations (veld action)? exceptions_age %&gt;% filter(veld == &quot;veld&quot;) %&gt;% nrow() == nrow(exceptions_age) ## [1] TRUE If yes, then we leave them as they are related to age estimations as given by observers. 3.15 Check bird sex inconsistencies All birds should have a sex, which could be one of M (mannetje), V (vrouwtje), O (onbekend): distinct(birds, GeslachtCode) Exceptions: birds %&gt;% filter(is.na(GeslachtCode)) %&gt;% distinct(Nummer, NummerNieuw, NummerDesc, GeslachtCode) For all birds a one-to-one relation bird - sex should hold true: birds %&gt;% distinct(Nummer, GeslachtCode) %&gt;% nrow() == nrow(birds) ## [1] TRUE 3.16 Handle information about metal ring number There are columns containing metal ring related information in birds: names(birds)[which(str_detect(names(birds), &quot;Metaalring&quot;))] ## [1] &quot;MetaalringNummer&quot; &quot;MetaalringPlaats&quot; &quot;MetaalringLandCode&quot; and obs_and_acts: names(obs_and_acts)[which(str_detect(names(obs_and_acts), &quot;Metaalring&quot;))] ## [1] &quot;MetaalringNummer&quot; &quot;MetaalringPlaats&quot; &quot;MetaalringLandCode&quot; This is not only redundant: inconsistencies are detected. Some examples: birds %&gt;% filter(Nummer %in% c(&quot;AAAA&quot;, &quot;AAAR&quot;, &quot;AAAT&quot;, &quot;AAAW&quot;)) %&gt;% rename(&quot;metal_ring_from_birds&quot; = &quot;MetaalringNummer&quot;) %&gt;% left_join(obs_and_acts %&gt;% rename(&quot;metal_ring_from_obs&quot; = &quot;MetaalringNummer&quot;), by = c(&quot;Nummer&quot; = &quot;KleurringNummer&quot;) ) %&gt;% distinct(Nummer, metal_ring_from_birds, metal_ring_from_obs) Based on expertsâ€™ knowledge only the metal ring information in birds is correct. We rename the columns related to metal ring information from obs_and_acts by adding suffix _obs: obs_and_acts &lt;- obs_and_acts %&gt;% rename_at( vars(starts_with(&quot;Metaalring&quot;)), ~ paste0(., &quot;_obs&quot;) ) 3.17 Solve GPS tracker IDs Some birds have a suspect Nummer which is formed by letters GPS or GP followed by some numbers. These are a kind of GPS IDs which should not be in columns related to color rings: birds %&gt;% filter(str_detect(Nummer, pattern = &quot;(^(GP)\\\\d+)|(^(GPS)\\\\d+)&quot;)) %&gt;% select(Nummer) The right mapping is saved in map_gps: map_gps %&gt;% head() We import the color rings in new column first_Nummer. For all other rings will be first_nummer = Nummer as they are the very first rings: birds &lt;- birds %&gt;% # create column first_Nummer with right color rings for the GPS or GP** rings left_join(map_gps, by = c(&quot;Nummer&quot; = &quot;gps_id&quot;)) %&gt;% # set first_Numer equal to Nummer in all other cases mutate(first_Nummer = ifelse(is.na(color_ring), Nummer, color_ring )) %&gt;% select(Nummer, first_Nummer, everything()) Check whether not corrected rings (GP*** or GPS***) are still present: birds %&gt;% filter(str_detect(first_Nummer, pattern = &quot;(^(GP)\\\\d+)|(^(GPS)\\\\d+)&quot;)) %&gt;% select(first_Nummer, NummerNieuw) Mapping example: the bird with Nummer equal to GP130 is mapped as follows: birds %&gt;% filter(Nummer == &quot;GP130&quot;) %&gt;% select(Nummer, first_Nummer, sovon_bird_notes) Column first_Nummer should contain unique elements. Check for exceptions: birds %&gt;% group_by(first_Nummer) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) %&gt;% select(-n) Exceptions, if exist, are due to double entry, one with the original color ring, a second one with GPS tracker ID. Such exceptions, if present, should be handled separately while mapping bird_shorthand in document 3_birds.Rmd. 3.18 Check inconsistencies between users and observers We have to be sure that all observations have a valid observator reference, i.e. an ID contained in column Nummer of users. Observations without an observator reference: obs_and_acts %&gt;% filter(is.na(WaarnemerNummer)) All observator references in obs_and_acts should be present in users: observers_ids &lt;- unique( obs_and_acts %&gt;% filter(!is.na(WaarnemerNummer)) %&gt;% distinct(WaarnemerNummer) %&gt;% pull() ) all(observers_ids %in% users$Nummer) ## [1] TRUE 3.19 Remove data of common shelduck Data related to common shelduck, Tadorna tadorna, are not updated: INOB experts suggest to remove them from the mapping. More details here. Euring scheme: 01730. We retrieve the values of field Nummer from birds related to this species: common_shellduck_nummer &lt;- birds %&gt;% filter(EuringCode == &quot;01730&quot;) %&gt;% pull(Nummer) Number of birds to remove: length(common_shellduck_nummer) ## [1] 80 We remove data from birds: birds &lt;- birds %&gt;% filter(EuringCode != &quot;01730&quot; | is.na(EuringCode)) and from obs_and_acts: obs_and_acts &lt;- obs_and_acts %&gt;% filter(!KleurringNummer %in% common_shellduck_nummer | is.na(KleurringNummer)) 3.20 Remove rings BGAH and BRAB The rings BGAH and BRAB should be removed, as explained in this comment on issue 89. No information about EURING code can be found: birds %&gt;% filter(Nummer %in% c(&quot;BGAH&quot;, &quot;BRAB&quot;)) We remove them from birds: birds &lt;- birds %&gt;% filter(!Nummer %in% c(&quot;BGAH&quot;, &quot;BRAB&quot;)) Observations related to these two rings: obs_and_acts %&gt;% filter(KleurringNummer %in% c(&quot;BGAH&quot;, &quot;BRAB&quot;)) will be also removed: obs_and_acts &lt;- obs_and_acts %&gt;% filter(!KleurringNummer %in% c(&quot;BGAH&quot;, &quot;BRAB&quot;)) 3.21 Check date of dood Observations with action dood should be the very last for each observation sequence containing this action: obs_after_death &lt;- obs_and_acts %&gt;% filter(dood == &quot;dood&quot;) %&gt;% select(KleurringNummer, Datum) %&gt;% rename(dood_datum = Datum) %&gt;% left_join(obs_and_acts, by = &quot;KleurringNummer&quot;) %&gt;% filter(dood_datum &lt; Datum) %&gt;% select(Nummer, KleurringNummer, Datum, dood_datum, acts, everything()) %&gt;% arrange(KleurringNummer, Datum) obs_after_death Observation after dood are removed: obs_and_acts &lt;- obs_and_acts %&gt;% filter(!Nummer %in% obs_after_death$Nummer) Finally, we perform a last check: a ring should not be linked to two observations, one with action dood and one with action klgev: obs_and_acts %&gt;% filter(dood == &quot;dood&quot; | klgev == &quot;klgev&quot;) %&gt;% group_by(KleurringNummer) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) 3.22 Save preprocessed data After data cleaning we save the data as TSVs in .data/interim: write_tsv(users, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;users.tsv&quot;), na = &quot;&quot;) write_tsv(birds, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;birds.tsv&quot;), na = &quot;&quot;) write_tsv( obs_and_acts, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), na = &quot;&quot; ) We save the tables containing action codes, colors and ring places in ./data/input as it could be useful in following mapping steps: # Save action codes write_tsv( actions_meaning, path = here::here(&quot;data&quot;, &quot;input&quot;, &quot;actions_meaning.tsv&quot;), na = &quot;&quot; ) # Save colors write_tsv( color_table, path = here::here(&quot;data&quot;, &quot;input&quot;, &quot;color_table.tsv&quot;), na = &quot;&quot; ) # Save ring position write_tsv( ring_position_table, path = here::here(&quot;data&quot;, &quot;input&quot;, &quot;ring_position_table.tsv&quot;), na = &quot;&quot; ) "],
["2_users.html", "4 Map user data 4.1 Read temporary user data 4.2 Map user data 4.3 Save user data", " 4 Map user data 4.1 Read temporary user data We start from the user temporary data saved in TSV file users.tsv in folder data\\interim: users &lt;- read_tsv(here::here(&quot;data&quot;, &quot;interim&quot;, &quot;users.tsv&quot;), col_types = cols( .default = col_character(), Nummer = col_double(), Wachtwoord = col_logical() ) ) Number of users: nrow(users) ## [1] 1980 4.2 Map user data We map the original fields to SOVON fields denoted by prefix sovon_. 4.2.1 E-mail users &lt;- users %&gt;% mutate(sovon_user_email = Email) 4.2.2 First name users &lt;- users %&gt;% mutate(sovon_user_first_name = Voornaam) 4.2.3 Last name users &lt;- users %&gt;% mutate(sovon_user_last_name = Familienaam) 4.2.4 Address users &lt;- users %&gt;% mutate(sovon_user_address = Adres) 4.2.5 Place users &lt;- users %&gt;% mutate(sovon_user_place = Gemeente) 4.2.6 Postal code users &lt;- users %&gt;% mutate(sovon_user_postal_code = Postcode) 4.2.7 Country Countries present: users %&gt;% distinct(LandCode) users &lt;- users %&gt;% mutate(sovon_user_country = LandCode) 4.2.8 User ID User identifiers are provided by SOVON. NA is given. users &lt;- users %&gt;% mutate(sovon_user_id = NA) 4.2.9 User reference We use the unique ID in Nummer: users &lt;- users %&gt;% mutate(sovon_user_reference = Nummer) 4.2.10 User language This field is not present in users. We leave it empty: users &lt;- users %&gt;% mutate(sovon_user_language = NA_character_) 4.3 Save user data Export the SOVON fields to crbirding_users: crbirding_users &lt;- users %&gt;% select(starts_with(&quot;sovon_&quot;)) Remove prefix sovon_: names(crbirding_users) &lt;- str_remove( names(crbirding_users), pattern = &quot;sovon_&quot; ) The desired order of columns in crbirding_users: cr_users_cols &lt;- c( &quot;user_id&quot;, &quot;user_reference&quot;, &quot;user_email&quot;, &quot;user_first_name&quot;, &quot;user_last_name&quot;, &quot;user_address&quot;, &quot;user_postal_code&quot;, &quot;user_place&quot;, &quot;user_country&quot;, &quot;user_language&quot;, &quot;user_role&quot; ) Fields still not mapped: cr_users_cols[which(!cr_users_cols %in% names(crbirding_users))] ## [1] &quot;user_role&quot; The field user_role cannot be filled at the moment: it will be mapped at the end of the next chapter. Set column order: crbirding_users &lt;- crbirding_users %&gt;% select(cr_users_cols[cr_users_cols != &quot;user_role&quot;]) Preview data (e-mail, first and last names removed for privacy reasons): crbirding_users %&gt;% select(-c(user_email, user_first_name, user_last_name)) %&gt;% head(n = 10) Save to csv file crbirding_users.csv in ./data/processed/ as asked by SOVON: crbirding_users %&gt;% write_csv( path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.csv&quot;), na = &quot;&quot; ) "],
["3_birds.html", "5 Map ring data 5.1 Read temporary ring data 5.2 Map color ring data 5.3 Finalize user data 5.4 Save modified temporary observation data 5.5 Save modified ring position and direction table 5.6 Save final user data 5.7 Save final ring data", " 5 Map ring data 5.1 Read temporary ring data Import temporary bird data from birds.tsv: birds &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;birds.tsv&quot;), col_types = cols( .default = col_character() ) ) 5.1.1 Read observation data Import temporary observation data from obs_and_actions.tsv: obs_and_acts &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), col_types = cols( .default = col_character(), Nummer = col_double(), Datum = col_datetime(format = &quot;&quot;), WaarnemerNummer = col_double(), PlaatsLengtegraadGraden = col_double(), PlaatsLengtegraadMinuten = col_double(), PlaatsLengtegraadSeconden = col_double(), PlaatsBreedtegraadGraden = col_double(), PlaatsBreedtegraadMinuten = col_double(), PlaatsBreedtegraadSeconden = col_double(), BevestigingDatum = col_datetime(format = &quot;&quot;), AanmaakDatum = col_datetime(format = &quot;&quot;), WijzigDatum = col_datetime(format = &quot;&quot;) ) ) 5.1.2 Read action data Import action codes and relative meaning: actions_meaning &lt;- read_tsv(here::here(&quot;data&quot;, &quot;input&quot;, &quot;actions_meaning.tsv&quot;)) 5.1.3 Read ring position data ring_position_table &lt;- read_tsv( here::here(&quot;data&quot;, &quot;input&quot;, &quot;ring_position_table.tsv&quot;) ) 5.1.4 Read user data Import user data as we have still to map the field user_role: crbirding_users &lt;- read_csv( here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.csv&quot;) ) 5.1.5 Read color data Import ring color codes and relative meaning: color_table &lt;- read_tsv(here::here(&quot;data&quot;, &quot;input&quot;, &quot;color_table.tsv&quot;)) 5.2 Map color ring data 5.2.1 Extract action codes Actions present in obs_and_acts : acts &lt;- actions_meaning$Code acts &lt;- acts[acts %in% names(obs_and_acts)] acts ## [1] &quot;rngkl&quot; &quot;rngme&quot; &quot;klgev&quot; &quot;br&quot; &quot;vang&quot; &quot;dood&quot; &quot;klweg&quot; &quot;veld&quot; ## [9] &quot;meweg&quot; &quot;me&quot; &quot;vangl&quot; &quot;ziek&quot; 5.2.2 Bird reference &amp; bird shorthand In SOVON table crbirding_birds each row identifies a ring. By assigning a bird reference as unique integer to a bird they can link any color ring to the bird it belongs to. birds &lt;- birds %&gt;% mutate(sovon_bird_reference = seq_len(nrow(birds))) %&gt;% select( sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, everything() ) head(birds) Birds with lack of unicity of sovon_bird_reference: birds %&gt;% group_by(first_Nummer) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) %&gt;% select( sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, Nummer ) In such cases we assign the lower sovon_bird_reference: birds &lt;- birds %&gt;% group_by(first_Nummer) %&gt;% mutate(sovon_bird_reference = min(sovon_bird_reference)) %&gt;% ungroup() Check: birds %&gt;% group_by(first_Nummer) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) %&gt;% select( sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, Nummer ) We add column sovon_bird_reference to obs_and_acts as it will be needed to map the dates of ringing. The link is made by the columns Nummer (birds data) and KleurringNummer (observation data): obs_and_acts &lt;- obs_and_acts %&gt;% left_join(birds %&gt;% select(Nummer, sovon_bird_reference), by = c(&quot;KleurringNummer&quot; = &quot;Nummer&quot;) ) %&gt;% select(sovon_bird_reference, everything()) Check whether there are observations without link to any bird: filter(obs_and_acts, is.na(sovon_bird_reference)) We will also add column first_Nummer from birds to observations as well: obs_and_acts &lt;- obs_and_acts %&gt;% left_join( birds %&gt;% select(sovon_bird_reference, first_Nummer, Nummer), by = c(&quot;sovon_bird_reference&quot;, &quot;KleurringNummer&quot; = &quot;Nummer&quot; ) ) The reconstruction of the series of color rings for each bird is made by using columns first_Nummer (very first color ring), NummerNieuw (very last color ring) and the information from spreadsheets of experts. We will collect the needed information in a new dataframe, called crbirding_birds which will grow up to become the end product containing the ring data to deliver to SOVON. First step is to gather first_Nummer and NummerNieuw in new column sovon_bird_shorthand: crbirding_birds &lt;- birds %&gt;% select( sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc, sovon_bird_notes ) %&gt;% pivot_longer( cols = c(first_Nummer, NummerNieuw), names_to = &quot;col_nummer&quot;, values_to = &quot;sovon_bird_shorthand&quot; ) %&gt;% select(-col_nummer) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, NummerDesc, sovon_bird_notes) We can also assign the color ring version with point (sovon_bird_shorthand_pt) by matching columns sovon_bird_shorthand and NummerDesc where possible. Note that sovon_bird_shorthand_pt may contain points, but for old rings it is equal to sovon_bird_shorthand: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_shorthand_pt = ifelse( str_remove_all( string = NummerDesc, pattern = &quot;\\\\.&quot; ) == sovon_bird_shorthand, NummerDesc, sovon_bird_shorthand )) %&gt;% distinct() %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_notes) ## to map correctly MKAU (sovon_bird_reference: 4531) ## group_by(sovon_bird_reference, sovon_bird_shorthand) %&gt;% ## filter(sovon_bird_shorthand == ## sovon_bird_shorthand[which.max(nchar(sovon_bird_shorthand))]) %&gt;% ## ungroup() Example of mapping: the bird with sovon_bird_reference 14 is associated to the following two rings: birds %&gt;% filter(sovon_bird_reference == 14) %&gt;% select(sovon_bird_reference, first_Nummer, NummerNieuw, NummerDesc) and will be mapped as follows: crbirding_birds %&gt;% filter(sovon_bird_reference == 14) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt) 5.2.3 Bird ringing date The date of applying a ring should be mapped as sovon_bird_date_begin. The date of applying the first ring can be found in data frame obs_and_acts in the column Datum for actions rngkl (code action of applying very first color ring): obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select( sovon_bird_reference, first_Nummer, Datum, rngkl ) %&gt;% head(n = 10) 5.2.3.1 Date of applying first ring We can add automatically the date of the very first ring for each bird (sovon_bird_reference), based on date of action code rngkl. In fact, there should be just one observation with action rngkl for each bird (sovon_bird_reference). Exceptions: exceptions_one_bird_one_rngkl &lt;- obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) %&gt;% filter(!is.na(rngkl)) %&gt;% left_join(crbirding_birds %&gt;% select(sovon_bird_reference, sovon_bird_shorthand), by = &quot;sovon_bird_reference&quot; ) %&gt;% # distinct() %&gt;% select(-n) exceptions_one_bird_one_rngkl In case exceptions are present, they should best be solved at database level. In any case, we will manage them later. Assign the date of first ringing: crbirding_birds &lt;- obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select(sovon_bird_reference, first_Nummer, Datum) %&gt;% group_by(sovon_bird_reference, first_Nummer) %&gt;% summarize(sovon_bird_date_begin = min(Datum)) %&gt;% right_join(crbirding_birds, by = c(&quot;sovon_bird_reference&quot;, &quot;first_Nummer&quot; = &quot;sovon_bird_shorthand&quot; ) ) %&gt;% rename(sovon_bird_shorthand = first_Nummer) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_notes ) %&gt;% ungroup() Some examples (birds with sovon_bird_reference 1, 14 and 4107): crbirding_birds %&gt;% filter(sovon_bird_reference %in% c(1, 14, 4107)) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) Check date of birds in exceptions: crbirding_birds %&gt;% filter(sovon_bird_shorthand %in% exceptions_one_bird_one_rngkl$sovon_bird_shorthand) And in case solve: if (nrow(exceptions_one_bird_one_rngkl) &gt; 0) { crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_date_begin = case_when( sovon_bird_shorthand == &quot;MKAU&quot; ~ sovon_bird_date_begin, sovon_bird_shorthand == &quot;CZOZ&quot; ~ as.POSIXct(NA_character_), TRUE ~ sovon_bird_date_begin )) } Summary of rings with date (sovon_bird_date_begin): crbirding_birds %&gt;% mutate(date_is_present = !is.na(sovon_bird_date_begin)) %&gt;% group_by(date_is_present) %&gt;% count() 5.2.3.2 Date of applying last ring The rings without date are the rings of birds ringed more than once. birds_multiple_rings &lt;- crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) birds_multiple_rings Not only, the structure of our database limits to 2 the maximum number of rings linked to the same bird, as two are the columns containing such information (Nummer and NummerNieuw). Check: birds_two_rings &lt;- crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 2) all(birds_two_rings$sovon_bird_reference == birds_multiple_rings$sovon_bird_reference) ## [1] TRUE Experts explained us that the very first and the very last ring are mapped in birds. By consulting the spreadsheet of the experts we will later fill the gap by adding intermediate rings. We can try to retrieve the date of applying last ring based on observations/actions with code vang (caught at the nest) or vangl (caught otherwise). Birds ringed twice and linked to one vang/vangl action only: bird_one_vang &lt;- obs_and_acts %&gt;% filter(sovon_bird_reference %in% birds_multiple_rings$sovon_bird_reference &amp; (!is.na(vang) | !is.na(vangl))) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 1) %&gt;% rename(sovon_bird_date_begin = Datum) %&gt;% select(-n) %&gt;% arrange(sovon_bird_reference) bird_one_vang %&gt;% select_if(function(x) any(!is.na(x))) As you cannot change a ring to a bird without catching him, we can use these unique dates as date of ringing, sovon_bird_date_begin: bird_one_vang_with_date &lt;- crbirding_birds %&gt;% filter(sovon_bird_reference %in% bird_one_vang$sovon_bird_reference &amp; sovon_bird_reference %in% birds_two_rings$sovon_bird_reference) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(is.na(sovon_bird_date_begin)) %&gt;% select(-sovon_bird_date_begin) %&gt;% ungroup() %&gt;% left_join(bird_one_vang, by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% select(names(crbirding_birds)) crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(bird_one_vang_with_date, by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;) ) %&gt;% bind_rows(bird_one_vang_with_date) %&gt;% arrange(sovon_bird_reference) Examples of date mapping (birds with sovon_bird_reference 11 and 14): crbirding_birds %&gt;% filter(sovon_bird_reference %in% c(11, 14)) Some birds have been catched twice: bird_two_vang &lt;- obs_and_acts %&gt;% filter(sovon_bird_reference %in% birds_two_rings$sovon_bird_reference &amp; (!is.na(vang) | !is.na(vangl))) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 2) %&gt;% rename(sovon_bird_date_begin = Datum) %&gt;% select(-n) %&gt;% arrange(sovon_bird_reference) bird_two_vang %&gt;% select_if(function(x) any(!is.na(x))) In the expert spreadsheet, we can see that the color ring is typically applied during the last vang/vangl action. We will assign the most recent date by default as first step, correcting the exceptions later: bird_two_vang_get_date &lt;- crbirding_birds %&gt;% filter(sovon_bird_reference %in% bird_two_vang$sovon_bird_reference &amp; sovon_bird_reference %in% birds_two_rings$sovon_bird_reference) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(is.na(sovon_bird_date_begin)) %&gt;% select(-sovon_bird_date_begin) %&gt;% left_join(bird_two_vang %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)), by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% select_if(function(x) any(!is.na(x))) bird_two_vang_get_date By consulting the spreadsheet we can find that the following rings have been applied during the earliest vang/vangl action, so they are exceptions: bird_shorthand_exceptions &lt;- c( &quot;NGAP&quot;, &quot;NGAX&quot;, &quot;GVAR&quot;, &quot;KPAZ&quot;, &quot;KAAK&quot;, &quot;KAAN&quot; ) bird_exceptions &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand %in% bird_shorthand_exceptions) We set sovon_bird_date_begin equal to the date of the earliest vang/vangl action: bird_two_vang_get_date &lt;- bird_two_vang %&gt;% filter(sovon_bird_reference %in% bird_exceptions$sovon_bird_reference) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin == min(sovon_bird_date_begin)) %&gt;% ungroup() %&gt;% left_join(bird_exceptions %&gt;% select(-sovon_bird_date_begin), by = &quot;sovon_bird_reference&quot;) %&gt;% select(names(bird_two_vang_get_date)) %&gt;% bind_rows(bird_two_vang_get_date %&gt;% filter(!sovon_bird_shorthand %in% bird_exceptions$sovon_bird_shorthand)) %&gt;% select(names(crbirding_birds)) bird_two_vang_get_date Add this information to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(bird_two_vang_get_date, by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot; ) ) %&gt;% bind_rows(bird_two_vang_get_date) %&gt;% arrange(sovon_bird_reference) crbirding_birds Rings still without date: crbirding_birds %&gt;% mutate(date_is_present = !is.na(sovon_bird_date_begin)) %&gt;% filter(!date_is_present) Based on spreadsheet and observation data, we found that the dates of applying the rings FAAG, YCAF and FHOV are linked to actions ziek, i.e. the ring has been applied while taking care of the birds. The date of applying FAAG: info_faag &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;FAAG&quot;) %&gt;% mutate( sovon_bird_date_begin = obs_and_acts %&gt;% filter( first_Nummer == &quot;ALAU&quot;, !is.na(ziek) ) %&gt;% ## get the second &quot;ziek&quot; action (2006-07-07) filter(Datum == max(Datum)) %&gt;% pull(Datum) ) info_faag The date of applying YCAF: info_ycaf &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;YCAF&quot;) %&gt;% mutate( sovon_bird_date_begin = obs_and_acts %&gt;% filter( first_Nummer == &quot;PLAB&quot;, !is.na(ziek) ) %&gt;% ## there is just one &quot;ziek&quot; action (2013-07-22) pull(Datum) ) info_ycaf The date of applying FHOV: info_fhov &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;FHOV&quot;) %&gt;% mutate( sovon_bird_date_begin = obs_and_acts %&gt;% filter( first_Nummer == &quot;SUAV&quot;, !is.na(ziek) ) %&gt;% ## there is just one &quot;ziek&quot; action (2018-04-26) pull(Datum) ) info_fhov Add this dates to crbirding_birds: crbirding_birds &lt;- bind_rows( crbirding_birds %&gt;% filter(!sovon_bird_shorthand %in% c(&quot;FAAG&quot;, &quot;YCAF&quot;, &quot;FHOV&quot;)), info_faag, info_ycaf, info_fhov ) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) All rings in crbirding_birds have a date: crbirding_birds %&gt;% filter(!is.na(sovon_bird_date_begin)) %&gt;% nrow() == nrow(crbirding_birds) ## [1] TRUE 5.2.3.3 Add intermediate color rings Based on spreadsheet of experts, we have to add new rings, as some birds have been ringed more than twice, so the information contained in first_Nummer and NummerNieuw is not complete, as they map the very first and the very last ring. The intermediate rings are the following: intermediate_rings &lt;- tibble( first_Nummer = c( &quot;E633&quot;, &quot;DJAB&quot;, &quot;BWAD&quot;, &quot;KLAT&quot;, &quot;PR3&quot;, &quot;TY2&quot;, &quot;RTO&quot;, &quot;E099&quot;, &quot;MKAU&quot;, &quot;ASAH&quot;, &quot;ADAF&quot; ), intermediate_ring = c( &quot;BUAG&quot;, &quot;TRAP&quot;, &quot;GTAS&quot;, &quot;UPAB&quot;, &quot;DHAZ&quot;, &quot;GMAJ&quot;, &quot;DGAH&quot;, &quot;GHAT&quot;, &quot;ZVAU&quot;, &quot;HWAX&quot;, &quot;DJAU&quot; ), sovon_bird_date_begin = as.POSIXct(c( &quot;2000-05-08&quot;, ## BUAG &quot;2012-05-25&quot;, ## TRAP &quot;2007-06-01&quot;, ## GTAS &quot;2012-05-29&quot;, ## UPAB &quot;2006-05-26&quot;, ## DHAZ &quot;2007-06-06&quot;, ## GMAJ &quot;2006-05-17&quot;, ## DGAH &quot;2007-06-18&quot;, ## GHAT &quot;2014-05-23&quot;, ## ZVAU &quot;2009-05-18&quot;, ## HWAX &quot;2006-05-26&quot; ## DJAU ), tz = &quot;UTC&quot;) ) intermediate_rings Retrieve sovon_bird_reference: intermediate_rings &lt;- intermediate_rings %&gt;% left_join(crbirding_birds %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_notes), by = c(&quot;first_Nummer&quot; = &quot;sovon_bird_shorthand&quot;) ) %&gt;% select( sovon_bird_reference, first_Nummer, intermediate_ring, sovon_bird_date_begin, sovon_bird_notes ) intermediate_rings Check whether all dates are linked to a valid observation and check whether they are linked to vang/vangl actions: intermediate_rings %&gt;% left_join(obs_and_acts %&gt;% select( sovon_bird_reference, Datum, acts, first_Nummer ), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot;, &quot;first_Nummer&quot; ) ) %&gt;% filter(!is.na(vang) | !is.na(vangl)) %&gt;% select_if(function(x) any(!is.na(x))) We can then add the intermediate rings to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(intermediate_rings %&gt;% select(-first_Nummer) %&gt;% rename(sovon_bird_shorthand = intermediate_ring) %&gt;% mutate(sovon_bird_shorthand_pt = sovon_bird_shorthand)) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) Example of a triplet ring sequence: bird_reference_example_triplet &lt;- crbirding_birds %&gt;% filter(sovon_bird_shorthand == &quot;BUAG&quot;) %&gt;% distinct(sovon_bird_reference) %&gt;% pull() crbirding_birds %&gt;% filter(sovon_bird_reference == bird_reference_example_triplet) At this point all rings should have a sovon_bird_date_begin: crbirding_birds %&gt;% filter(!is.na(sovon_bird_date_begin)) %&gt;% nrow() == nrow(crbirding_birds) ## [1] TRUE 5.2.4 Bird ringing end date For birds ringed more than once, we can assign an end date for the changed rings. This information will be stored in field sovon_bird_date_end. The end date is equal to the date of applying the new ring assign_end_date &lt;- function(data) { if (nrow(data) &gt; 1) { return(c( as_date(data$sovon_bird_date_begin[2:nrow(data)], tz = &quot;UTC&quot;), as_date(NA, tz = &quot;UTC&quot;) )) } else { return(as_date(NA, tz = &quot;UTC&quot;)) } } crbirding_birds &lt;- crbirding_birds %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) %&gt;% group_by(sovon_bird_reference) %&gt;% nest() %&gt;% mutate(sovon_bird_date_end = map(data, assign_end_date)) %&gt;% unnest() %&gt;% mutate(sovon_bird_date_end = as.POSIXct(sovon_bird_date_end)) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes ) %&gt;% ungroup() As example, we show the chronology of color rings for birds ringed thrice: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 3) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) We add end date to the very last ring of dead birds by using the link to observations with action dood: crbirding_birds &lt;- obs_and_acts %&gt;% filter(dood == &quot;dood&quot;) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(bird_dood_datum = Datum) %&gt;% right_join(crbirding_birds, by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% group_by(sovon_bird_reference) %&gt;% mutate(sovon_bird_date_end = case_when( is.na(sovon_bird_date_end) &amp; sovon_bird_date_begin == max(sovon_bird_date_begin) &amp; bird_dood_datum &gt;= sovon_bird_date_begin ~ bird_dood_datum, TRUE ~ sovon_bird_date_end )) %&gt;% select(-bird_dood_datum) Effects of mapping: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin) &amp; !is.na(sovon_bird_date_end)) %&gt;% select(sovon_bird_reference) %&gt;% ungroup() %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, everything() ) Number of rings still in use, i.e. no end date: crbirding_birds %&gt;% filter(is.na(sovon_bird_date_end)) %&gt;% nrow() ## [1] 9920 5.2.5 Add rows for metal rings applied before color rings Sometimes metal rings have been applied before color rings. These cases should be added to crbirding_birds as new rows. We can detect these situtations by comparing the date of actions rngme and rngkl for each bird. rngme_before_rngkl &lt;- obs_and_acts %&gt;% filter(!is.na(rngme) &amp; is.na(rngkl)) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(Datum_rngme = Datum) %&gt;% left_join(obs_and_acts %&gt;% filter(!is.na(rngkl)) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(Datum_rngkl = Datum), by = &quot;sovon_bird_reference&quot; ) %&gt;% filter(Datum_rngme &lt; Datum_rngkl) %&gt;% rename( sovon_bird_date_begin = Datum_rngme, sovon_bird_date_end = Datum_rngkl ) %&gt;% mutate( sovon_bird_shorthand = NA_character_, sovon_bird_shorthand_pt = NA_character_, sovon_bird_notes = &quot;sovon_bird_shorthand not available.&quot; ) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_pt, everything() ) rngme_before_rngkl We add these rows to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rngme_before_rngkl) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) A preview: crbirding_birds %&gt;% filter(sovon_bird_reference %in% (rngme_before_rngkl %&gt;% pull(sovon_bird_reference))) %&gt;% head(n = 50) 5.2.6 Ring number The ring number, or metal ring number, can be found in field MetaalringNummer, which contains the most recent metal ring number. Recoverying the complete chronology of metal rings for each bird is almost impossible as it is: not complete included in texutal description (field Opmerking of tblWaarneming) However, this is not considered a real problem by INBO and SOVON experts as both INBO and SOVON databases focus on color rings. See issue 34 for more details. Just as example, we can show the textual notes of observations linked to action vang and containing 6 or more consecutive numbers in the notes: obs_and_acts %&gt;% filter(str_detect(Opmerking, pattern = &quot;[0-9]{6,}&quot;)) %&gt;% filter(!is.na(vang)) %&gt;% select(Opmerking) A ring number should consist of up to ten alphanumeric characters. At page 7 of the EURING Exchange Code 2000+ document we read the following instructions: Where the ring number consist of fewer than ten numbers/letters, the number is padded with dots. These dots are always inserted to the left of the rightmost row of numbers. Ring number anomalies: birds %&gt;% filter(!str_detect(MetaalringNummer, pattern = regex(&quot;\\\\d+&quot;))) %&gt;% group_by(MetaalringNummer) %&gt;% count() Value none means not metal-ringed bird, while onbekend means that information is no more available. SOVON chooses to leave column sovon_bird_ring_number empty for both cases. However, we will add a note to sovon_bird_notes to still maintain a reference to this slight difference. Value ? is equivalent to onbekend while H???????? and Lxxxxxx are mapped as H-------- and L------ respectively. birds &lt;- birds %&gt;% mutate(sovon_bird_ring_number = recode( MetaalringNummer, &quot;?&quot; = NA_character_, &quot;onbekend&quot; = NA_character_, &quot;none&quot; = NA_character_, &quot;H????????&quot; = &quot;H--------&quot;, &quot;Lxxxxxx&quot; = &quot;L------&quot; )) We separate the birds with special mapping values by all the others: special_values &lt;- c(&quot;H--------&quot;, &quot;L------&quot;) birds_special_values &lt;- birds %&gt;% filter(sovon_bird_ring_number %in% special_values) birds_others &lt;- birds %&gt;% filter(!sovon_bird_ring_number %in% special_values) Some ring numbers contain asterisks: birds_others %&gt;% filter(str_detect(sovon_bird_ring_number, &quot;\\\\*&quot;)) %&gt;% select(sovon_bird_ring_number) We remove the asterisks: birds_others &lt;- birds_others %&gt;% mutate(sovon_bird_ring_number = gsub(&quot;\\\\*&quot;, &quot;&quot;, sovon_bird_ring_number)) Preview: birds_others %&gt;% select(sovon_bird_ring_number) %&gt;% head(n = 50) Add points . where needed: birds_others &lt;- birds_others %&gt;% mutate(reversed = stri_reverse(str = sovon_bird_ring_number)) idx &lt;- as.data.frame(str_locate(birds_others$reversed, pattern = regex(&quot;\\\\d+&quot;)))$end idx &lt;- replace_na(idx, 0) birds_others &lt;- birds_others %&gt;% mutate(sovon_bird_ring_number = stri_reverse(str_c( str_sub(reversed, end = idx ), map_chr(nchar(reversed), function(x) { ifelse(x &lt; 10, str_c(rep(&quot;.&quot;, 10 - x), collapse = &quot;&quot;), &quot;&quot; ) }), str_sub(reversed, start = idx + 1 ) ))) %&gt;% select(-reversed) Merge the two data frames together: birds &lt;- bind_rows(birds_others, birds_special_values) Preivew of the effects the mapping: birds %&gt;% distinct(MetaalringNummer, sovon_bird_ring_number) %&gt;% head(n = 200) We have to be sure that no multiple metal rings are assigned to the same bird (sovon_bird_reference) as this is not allowed by our database. Exceptions: birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) Later we will add value sovon_bird_ring_number to crbirding_birds where metal ring is present. 5.2.7 Initialize sovon_bird_rings_changed column for very first ring In order to better follow the mapping of metal AND color rings, SOVON suggested to add a column called sovon_bird_rings_changed, as shown in this GitHub comment. We initialize the column sovon_bird_rings_changed for the very first ringing by assigning: sovon_bird_rings_changed = 0 if rngme action only sovon_bird_rings_changed = 1 if rngkl action only sovon_bird_rings_changed = 2 if rngkl and rngme If very first bird_shorthand is empty, it means that the bird has been first ringed with a metal ring, sovon_bird_rings_changed = 0: crbirding_birds &lt;- crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% mutate(sovon_bird_rings_changed = if_else( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; is.na(sovon_bird_shorthand), 0, NA_real_ )) %&gt;% ungroup() We proceed now by mapping values 1 (action rngkl only) and 2 (action rngkl and rngme together): crbirding_birds &lt;- crbirding_birds %&gt;% left_join(obs_and_acts %&gt;% filter(rngkl == &quot;rngkl&quot;) %&gt;% mutate(n_rings = if_else(is.na(rngme), 1, 2)) %&gt;% select(sovon_bird_reference, n_rings, Datum), by = &quot;sovon_bird_reference&quot; ) %&gt;% group_by(sovon_bird_reference) %&gt;% mutate(sovon_bird_rings_changed = if_else( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; !is.na(sovon_bird_shorthand), n_rings, sovon_bird_rings_changed )) %&gt;% select(-c(n_rings, Datum)) %&gt;% ungroup() Preview sovon_bird_rings_changed = 1: crbirding_birds %&gt;% filter(sovon_bird_rings_changed == 1) %&gt;% head(n = 10) Preview sovon_bird_rings_changed = 2: crbirding_birds %&gt;% filter(sovon_bird_rings_changed == 2) %&gt;% head(n = 10) 5.2.8 Add help field metal_ring_missing We add also a help column, metal_ring_missing: it will help us later to fill the field sovon_ring_number only where metal ring is present. We initialize it as FALSE except for very first metal rings only (sovon_bird_rings_changed = 1): crbirding_birds &lt;- crbirding_birds %&gt;% mutate(metal_ring_missing = if_else( sovon_bird_rings_changed != 1 | is.na(sovon_bird_rings_changed), FALSE, TRUE )) Preview metal_ring_missing = FALSE: crbirding_birds %&gt;% filter(metal_ring_missing == FALSE) %&gt;% head(n = 50) Preview metal_ring_missing = TRUE: crbirding_birds %&gt;% filter(metal_ring_missing == TRUE) %&gt;% head(n = 50) 5.2.9 Add rows for first metal ring applied after color rings Sometimes metal rings have been applied after color rings. We can detect these situtations by using sovon_bird_rings_changed value 1 (rngkl only) to identify the birds, observations with action rngme to get date of applying metal rings: rngme_after_rngkl &lt;- crbirding_birds %&gt;% filter(sovon_bird_rings_changed == 1) %&gt;% select(sovon_bird_reference) %&gt;% left_join(obs_and_acts %&gt;% filter(rngme == &quot;rngme&quot;) %&gt;% select(sovon_bird_reference, Datum), by = &quot;sovon_bird_reference&quot; ) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(sovon_bird_date_begin = Datum) rngme_after_rngkl If sovon_bird_reference and sovon_bird_date_begin are already present in crbirding_birds means that applying a metal ring occurred while changing color ring during a vang action: no rows should be added then, but sovon_bird_rings_changed = 2: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(rngme_after_rngkl %&gt;% rename(rngme_date = sovon_bird_date_begin), by = &quot;sovon_bird_reference&quot; ) %&gt;% mutate(sovon_bird_rings_changed = case_when( sovon_bird_date_begin == rngme_date ~ 2, TRUE ~ sovon_bird_rings_changed )) %&gt;% select(-rngme_date) Show changes: rngme_after_rngkl %&gt;% inner_join(crbirding_birds, by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot;) ) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, metal_ring_missing, everything() ) On the other side, if sovon_bird_reference and sovon_bird_date_begin are not present in crbirding_birds, we add them as new rows where sovon_bird_rings_changed = 0 and metal_ring_missing is FALSE. Rows to add: rngme_without_change_rngkl &lt;- rngme_after_rngkl %&gt;% anti_join(crbirding_birds, by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot;)) %&gt;% rename(rngme_date = sovon_bird_date_begin) %&gt;% right_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; rngme_date) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate( sovon_bird_rings_changed = 0, metal_ring_missing = FALSE, sovon_bird_date_begin = rngme_date ) %&gt;% select(names(crbirding_birds)) %&gt;% ungroup() rngme_without_change_rngkl Add these new rows: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rngme_without_change_rngkl) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% group_by(sovon_bird_reference, sovon_bird_date_end) %&gt;% mutate(sovon_bird_date_end_updated = case_when( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; sovon_bird_date_begin != max(sovon_bird_date_begin) ~ max(sovon_bird_date_begin), TRUE ~ sovon_bird_date_end )) %&gt;% ungroup() %&gt;% mutate(sovon_bird_date_end = sovon_bird_date_end_updated) %&gt;% select(-sovon_bird_date_end_updated) Show changes: crbirding_birds %&gt;% filter(sovon_bird_reference %in% c(rngme_without_change_rngkl$sovon_bird_reference)) For these birds, we can then assign value 1 to sovon_bird_rings_changed while applying color ring as rngkl occurs after rngme: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_rings_changed = case_when( sovon_bird_reference %in% rngme_before_rngkl$sovon_bird_reference &amp; !is.na(sovon_bird_shorthand) ~ 1, TRUE ~ sovon_bird_rings_changed )) 5.2.10 Add rows for loosing color or metal rings: klweg, meweg We have observations linked to actions klweg and meweg. These actions mean that the bird has been observed without the color ring or metal ring respectively. Number of observations with action klweg: obs_and_acts %&gt;% filter(klweg == &quot;klweg&quot;) %&gt;% nrow() ## [1] 65 Type of action combinations where klweg occurs: obs_and_acts %&gt;% filter(klweg == &quot;klweg&quot;) %&gt;% select(acts) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) Number of observations with action meweg: obs_and_acts %&gt;% filter(meweg == &quot;meweg&quot;) %&gt;% nrow() ## [1] 122 Type of action combinations where meweg occurs: obs_and_acts %&gt;% filter(meweg == &quot;meweg&quot;) %&gt;% select(acts) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) Are there birds linked to both actions klweg and meweg? bird_ref_meweg &lt;- obs_and_acts %&gt;% filter(meweg == &quot;meweg&quot;) %&gt;% pull(sovon_bird_reference) bird_ref_klweg &lt;- (obs_and_acts %&gt;% filter(klweg == &quot;klweg&quot;) %&gt;% pull(sovon_bird_reference)) bird_ref_meweg[which(bird_ref_meweg %in% bird_ref_klweg)] ## [1] 8699 Are there more than one meweg for bird? bird_ref_multiple_meweg &lt;- obs_and_acts %&gt;% filter(meweg == &quot;meweg&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) bird_ref_multiple_meweg Are there more than one klweg for bird? bird_ref_multiple_klweg &lt;- obs_and_acts %&gt;% filter(klweg == &quot;klweg&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) If meweg/klweg occur not in combination with dood or vang/ vangl, then a new row should be added to crbirding_birds as the ring situation changed. We create first new rows based on action meweg. We set sovon_bird_rings_changed = 0 and metal_ring_missing = TRUE: rings_to_add_meweg &lt;- obs_and_acts %&gt;% filter(meweg == &quot;meweg&quot; &amp; is.na(dood) &amp; is.na(vang) &amp; is.na(vangl)) %&gt;% select(sovon_bird_reference, Datum) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; Datum) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate(sovon_bird_date_begin = Datum) %&gt;% select(-Datum) %&gt;% mutate( sovon_bird_rings_changed = 0, metal_ring_missing = TRUE ) %&gt;% ungroup() %&gt;% arrange(sovon_bird_reference) rings_to_add_meweg We add them, paying attention to change bird_date_end of previous rings: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rings_to_add_meweg) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% group_by(sovon_bird_reference, sovon_bird_date_end) %&gt;% mutate(sovon_bird_date_end_updated = case_when( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; sovon_bird_date_begin != max(sovon_bird_date_begin) ~ max(sovon_bird_date_begin), TRUE ~ sovon_bird_date_end )) %&gt;% ungroup() %&gt;% mutate(sovon_bird_date_end = sovon_bird_date_end_updated) %&gt;% select(-sovon_bird_date_end_updated) and setting sovon_bird_rings_changed = 2 for the next ring, if exists: rings_to_update &lt;- rings_to_add_meweg %&gt;% filter(!is.na(sovon_bird_date_end)) %&gt;% left_join( obs_and_acts %&gt;% filter(dood == &quot;dood&quot;) %&gt;% select(sovon_bird_reference, Datum) %&gt;% rename(bird_dood_datum = Datum), by = &quot;sovon_bird_reference&quot; ) %&gt;% filter(is.na(bird_dood_datum)) %&gt;% select(-bird_dood_datum) %&gt;% select(sovon_bird_reference, sovon_bird_date_end) %&gt;% left_join(crbirding_birds %&gt;% select(-sovon_bird_date_end), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_end&quot; = &quot;sovon_bird_date_begin&quot; ) ) %&gt;% rename(sovon_bird_date_begin = sovon_bird_date_end) %&gt;% mutate( sovon_bird_rings_changed = 2, metal_ring_missing = FALSE ) %&gt;% left_join(crbirding_birds %&gt;% select(-c( sovon_bird_rings_changed, metal_ring_missing )), by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot;, &quot;sovon_bird_date_begin&quot;, &quot;sovon_bird_notes&quot; ) ) %&gt;% select(names(crbirding_birds)) crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(rings_to_update, by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot; ) ) %&gt;% bind_rows(rings_to_update) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) Show changes: crbirding_birds %&gt;% filter(sovon_bird_reference %in% rings_to_add_meweg$sovon_bird_reference) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, metal_ring_missing, everything() ) We create now new rows based on action klweg. We set sovon_bird_rings_changed = 1, metal_ring_missing = FALSE and we leave bird_shorthand empty: rings_to_add_klweg &lt;- obs_and_acts %&gt;% filter(klweg == &quot;klweg&quot; &amp; is.na(dood) &amp; is.na(vang) &amp; is.na(vangl)) %&gt;% select(sovon_bird_reference, Datum) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; Datum) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate(sovon_bird_date_begin = Datum) %&gt;% select(-Datum) %&gt;% mutate( sovon_bird_rings_changed = 1, metal_ring_missing = FALSE, sovon_bird_shorthand = NA_character_, sovon_bird_shorthand_pt = NA_character_ ) %&gt;% ungroup() %&gt;% arrange(sovon_bird_reference) rings_to_add_klweg We add then these new rows, paying attention to change bird_date_end of previous rings: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rings_to_add_klweg) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% group_by(sovon_bird_reference, sovon_bird_date_end) %&gt;% mutate(sovon_bird_date_end_updated = case_when( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; sovon_bird_date_begin != max(sovon_bird_date_begin) ~ max(sovon_bird_date_begin), TRUE ~ sovon_bird_date_end )) %&gt;% ungroup() %&gt;% mutate(sovon_bird_date_end = sovon_bird_date_end_updated) %&gt;% select(-sovon_bird_date_end_updated) Show changes: crbirding_birds %&gt;% filter(sovon_bird_reference %in% rings_to_add_klweg$sovon_bird_reference) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, metal_ring_missing, everything() ) 5.2.11 Add rows for found color or metal rings: klgev, megev We have observations linked to actions klgev and megev. These actions mean that a color/metal ring has been found. This means the bird is not waering it anymore: we proceed as in previous section by adding a new row in crbirding_birds. Number of observations with action klgev: obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% nrow() ## [1] 38 Type of action combinations where klgev occurs: obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% select(acts) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) Number of observations with action megev: if (&quot;megev&quot; %in% acts) { obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% nrow() } else { print(&quot;0&quot;) } ## [1] &quot;0&quot; Type of action combinations where megev occurs: if (&quot;megev&quot; %in% acts) { obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% select(acts) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) } else { print(&quot;&#39;megev&#39; is not present.&quot;) } ## [1] &quot;&#39;megev&#39; is not present.&quot; klgev should never occur with other active actions like vang, vangl or action dood: acts_with_klgev &lt;- obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% select(acts) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) %&gt;% names() if (any(c(&quot;vang&quot;, &quot;vangl&quot;, &quot;dood&quot;) %in% acts_with_klgev)) { print(&quot;One of &#39;vang&#39;, &#39;vangl&#39;, &#39;dood&#39; present with &#39;klgev&#39;! To be checked...&quot;) } else { print(&quot;Check: OK. No &#39;vang&#39;, &#39;vangl&#39;, &#39;dood&#39; present with &#39;klgev&#39;&quot;) } ## [1] &quot;Check: OK. No &#39;vang&#39;, &#39;vangl&#39;, &#39;dood&#39; present with &#39;klgev&#39;&quot; Same for megev: if (&quot;megev&quot; %in% acts) { acts_with_megev &lt;- obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% select(acts) %&gt;% distinct() %&gt;% select_if(~ sum(!is.na(.)) &gt; 0) %&gt;% names() if (any(c(&quot;vang&quot;, &quot;vangl&quot;, &quot;dood&quot;) %in% acts_with_megev)) { print(&quot;One of &#39;vang&#39;, &#39;vangl&#39;, &#39;dood&#39; present with &#39;megev&#39;! To be checked...&quot;) } else { print(&quot;Check: OK. No &#39;vang&#39;, &#39;vangl&#39;, &#39;dood&#39; present with &#39;megev&#39;&quot;) } } else { print(&quot;&#39;megev&#39; is not present.&quot;) } ## [1] &quot;&#39;megev&#39; is not present.&quot; Are there observations of birds linked to both actions klgev and megev? bird_ref_klgev &lt;- (obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% pull(sovon_bird_reference)) if (&quot;megev&quot; %in% acts) { bird_ref_megev &lt;- obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% pull(sovon_bird_reference) bird_ref_meweg[which(bird_ref_megev %in% bird_ref_klgev)] } else { print(&quot;&#39;megev&#39; is not present.&quot;) } ## [1] &quot;&#39;megev&#39; is not present.&quot; Are there observations of birds linked to action klgev and klweg? bird_ref_klgev[which(bird_ref_klgev %in% bird_ref_klweg)] ## integer(0) Are there observations of birds linked to action klgev and meweg? bird_ref_klgev[which(bird_ref_klgev %in% bird_ref_meweg)] ## integer(0) Are there more than one megev for bird? if (&quot;megev&quot; %in% acts) { bird_ref_multiple_megev &lt;- obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) bird_ref_multiple_megev } else { print(&quot;&#39;megev&#39; is not present.&quot;) } ## [1] &quot;&#39;megev&#39; is not present.&quot; Are there more than one klgev for bird? bird_ref_multiple_klgev &lt;- obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 1) bird_ref_multiple_klgev We add new rows to crbirding_birds as the ring situation changed at each of these observations/actions. We create first new rows based on action megev. We set sovon_bird_rings_changed = 0 and metal_ring_missing = TRUE: if (&quot;megev&quot; %in% acts) { rings_to_add_megev &lt;- obs_and_acts %&gt;% filter(megev == &quot;megev&quot;) %&gt;% select(sovon_bird_reference, Datum) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; Datum) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate(sovon_bird_date_begin = Datum) %&gt;% select(-Datum) %&gt;% mutate( sovon_bird_rings_changed = 0, metal_ring_missing = TRUE ) %&gt;% ungroup() %&gt;% arrange(sovon_bird_reference) rings_to_add_megev } else { print(&quot;&#39;megev&#39; is not present.&quot;) } ## [1] &quot;&#39;megev&#39; is not present.&quot; We add them, paying attention to change bird_date_end of previous rings: if (&quot;megev&quot; %in% acts) { crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rings_to_add_megev) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% group_by(sovon_bird_reference, sovon_bird_date_end) %&gt;% mutate(sovon_bird_date_end_updated = case_when( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; sovon_bird_date_begin != max(sovon_bird_date_begin) ~ max(sovon_bird_date_begin), TRUE ~ sovon_bird_date_end )) %&gt;% ungroup() %&gt;% mutate(sovon_bird_date_end = sovon_bird_date_end_updated) %&gt;% select(-sovon_bird_date_end_updated) } else { print(&quot;&#39;megev&#39; is not present.&quot;) } ## [1] &quot;&#39;megev&#39; is not present.&quot; Show changes: if (&quot;megev&quot; %in% acts) { crbirding_birds %&gt;% filter(sovon_bird_reference %in% rings_to_add_megev$sovon_bird_reference) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, metal_ring_missing, sovon_bird_date_begin, sovon_bird_date_end, everything() ) } else { print(&quot;&#39;megev&#39; is not present.&quot;) } ## [1] &quot;&#39;megev&#39; is not present.&quot; We create now new rows based on action klgev. We set sovon_bird_rings_changed = 1, metal_ring_missing = FALSE and we leave bird_shorthand empty: rings_to_add_klgev &lt;- obs_and_acts %&gt;% filter(klgev == &quot;klgev&quot;) %&gt;% select(sovon_bird_reference, Datum) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; Datum) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate( sovon_bird_date_begin = Datum, sovon_bird_date_end = case_when( sovon_bird_date_end == sovon_bird_date_begin ~ as.POSIXct.Date(NA), TRUE ~ sovon_bird_date_end ) ) %&gt;% select(-Datum) %&gt;% mutate( sovon_bird_rings_changed = 1, metal_ring_missing = FALSE, sovon_bird_shorthand = NA_character_, sovon_bird_shorthand_pt = NA_character_ ) %&gt;% ungroup() %&gt;% arrange(sovon_bird_reference) rings_to_add_klgev We add then these new rows, paying attention to change bird_date_end of previous rings: crbirding_birds &lt;- crbirding_birds %&gt;% bind_rows(rings_to_add_klgev) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end ) %&gt;% group_by(sovon_bird_reference, sovon_bird_date_end) %&gt;% mutate(sovon_bird_date_end_updated = case_when( sovon_bird_date_begin == min(sovon_bird_date_begin) &amp; sovon_bird_date_begin != max(sovon_bird_date_begin) ~ max(sovon_bird_date_begin), TRUE ~ sovon_bird_date_end )) %&gt;% ungroup() %&gt;% mutate(sovon_bird_date_end = sovon_bird_date_end_updated) %&gt;% select(-sovon_bird_date_end_updated) Show changes: crbirding_birds %&gt;% filter(sovon_bird_reference %in% rings_to_add_klgev$sovon_bird_reference) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_rings_changed, metal_ring_missing, everything() ) 5.2.12 Finalize sovon_bird_rings_changed There are still rings where sovon_bird_rings_changed is empty: crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) Show more details, in particular the actions of observations related to the birds the rings come from and at the same date as sovon_bird_date_begin: crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) %&gt;% select(sovon_bird_reference, sovon_bird_date_begin) %&gt;% left_join(obs_and_acts %&gt;% select(Nummer, sovon_bird_reference, Datum, acts), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot; ) ) %&gt;% select_if(function(x) any(!is.na(x))) As expected most of them are vang only actions linked to applying new color rings. The veld actions only are just field observations occurring the very same date of vang action and will be never used for mapping. There are some ziek only actions: crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) %&gt;% select(sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin) %&gt;% left_join(obs_and_acts %&gt;% select(Nummer, sovon_bird_reference, Datum, acts, Opmerking), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot; ) ) %&gt;% filter(ziek == &quot;ziek&quot; &amp; is.na(vangl)) %&gt;% select_if(function(x) any(!is.na(x))) These three rings have been added before as particular cases of ringing while being sick. Based on notes and previous observations, we can see that FAAG has been applied together with a new metal ring, i.e. sovon_bird_rings_changed = 2, while the other two donâ€™t mention any change of metal ring: sovon_bird_rings_changed = 1: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_rings_changed = case_when( sovon_bird_shorthand == &quot;FAAG&quot; ~ 2, sovon_bird_shorthand %in% c(&quot;YCAF&quot;, &quot;FHOV&quot;) ~ 1, TRUE ~ sovon_bird_rings_changed )) The combination of vang + klweg doesnâ€™t change anything in the mapping, as noticing the absence of color ring happens at the same time of applying a new one. We can assess whether the metal ring is still present by checking the value of metal_ring_missing for the very previous ring. We make now two important assumptions: the ringer applies always a new metal ring if missing the ringer doesnâ€™t change a metal ring if present So, vang after a meweg or vang together with meweg are interpreted as applying a new metal ring, therefore sovon_bird_rings_changed = 2. Again, this is a consequence of the fact that the change of a metal ring is not coded by any action, but only described in informative notes. Effects of this mapping: rings_without_sovon_bird_rings_changed &lt;- crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) %&gt;% select(sovon_bird_reference, sovon_bird_date_begin) %&gt;% rename(date_ringing = sovon_bird_date_begin) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_bird_date_begin &lt; date_ringing) %&gt;% filter(sovon_bird_date_begin == max(sovon_bird_date_begin)) %&gt;% mutate( sovon_bird_rings_changed = case_when( is.na(sovon_bird_shorthand) ~ 1, !is.na(sovon_bird_shorthand) &amp; isTRUE(metal_ring_missing) ~ 2, !is.na(sovon_bird_shorthand) &amp; isFALSE(metal_ring_missing) ~ 1 ), metal_ring_missing = FALSE ) %&gt;% ungroup() %&gt;% select( sovon_bird_reference, sovon_bird_rings_changed, date_ringing, metal_ring_missing ) %&gt;% rename(sovon_bird_date_begin = date_ringing) %&gt;% left_join(crbirding_birds %&gt;% select(-c( sovon_bird_rings_changed, metal_ring_missing )), by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; ) ) %&gt;% select(names(crbirding_birds)) %&gt;% left_join(obs_and_acts %&gt;% filter((vang == &quot;vang&quot; | vangl == &quot;vangl&quot;) &amp; meweg == &quot;meweg&quot;) %&gt;% select(sovon_bird_reference, Datum, meweg), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot; ) ) %&gt;% mutate(sovon_bird_rings_changed = case_when( sovon_bird_rings_changed == 1 &amp; meweg == &quot;meweg&quot; ~ 2, TRUE ~ sovon_bird_rings_changed )) %&gt;% select(names(crbirding_birds)) rings_without_sovon_bird_rings_changed Update crbirding_birds based on the mapping above: crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(rings_without_sovon_bird_rings_changed, by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot;, &quot;sovon_bird_date_begin&quot;, &quot;sovon_bird_date_end&quot; ) ) %&gt;% bind_rows(rings_without_sovon_bird_rings_changed) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) Rings still without sovon_bird_rings_changed: crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) These are intermediate rings of birds which got three color rings: crbirding_birds %&gt;% filter(sovon_bird_reference %in% (crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) %&gt;% pull(sovon_bird_reference))) All of them will get sovon_bird_rings_changed = 1: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_rings_changed = case_when( is.na(sovon_bird_rings_changed) ~ 1, TRUE ~ sovon_bird_rings_changed )) Check that all rings have a valid value (0, 1 or 2) for sovon_bird_rings_changed: crbirding_birds %&gt;% filter(is.na(sovon_bird_rings_changed)) %&gt;% nrow() == 0 &amp; all(unique(crbirding_birds$sovon_bird_rings_changed) %in% c(0, 1, 2)) ## [1] TRUE We show a final overview. Birds getting color and metal ring at the same time and never ringed twice: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(sovon_bird_rings_changed == 2) %&gt;% filter(n == 1) %&gt;% select(-n) %&gt;% head(n = 50) Birds ringed in two different moments: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 2) %&gt;% select(-n) %&gt;% head(n = 50) Birds ringed at three different moments: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n == 3) %&gt;% select(-n) %&gt;% head(n = 50) Birds ringed at four different moments: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% filter(n == 4) %&gt;% select(-n) %&gt;% head(n = 50) 5.2.13 Map color of rings and inscriptions The color of the ring and the color of the inscription should be added, if available, to bird_shorthand. Itâ€™s important to highlight the fact that we have this information only for the most recent color ring of each bird. Following combinations are present: birds %&gt;% group_by(RingKleurCode, InscriptieKleurCode) %&gt;% count() We first map the colors based on the official cr-birding values ( cr-birding.org): color_table &lt;- color_table %&gt;% mutate(crbirding_colors = case_when( Code == &quot;X&quot; ~ &quot;P&quot;, Code == &quot;Z&quot; ~ &quot;N&quot;, TRUE ~ Code )) color_table We map the colors in birds: birds &lt;- birds %&gt;% left_join(color_table %&gt;% select(Code, crbirding_colors), by = c(&quot;RingKleurCode&quot; = &quot;Code&quot;) ) %&gt;% rename(ring_color = crbirding_colors) %&gt;% left_join(color_table %&gt;% select(Code, crbirding_colors), by = c(&quot;InscriptieKleurCode&quot; = &quot;Code&quot;) ) %&gt;% rename(inscription_color = crbirding_colors) Effects of the mapping: birds %&gt;% distinct(ring_color, RingKleurCode, inscription_color, InscriptieKleurCode) The bird_shorthand should be composed of: 1. color of the ring 2. color of the inscription 3. inscription For example: BW(BBAP) is a color ring, with inscription text BBAP, with dark blue ring and white inscription. We add colors to bird_shorthand crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% unite(color_combination, c( ring_color, inscription_color ), sep = &quot;&quot; ) %&gt;% select(sovon_bird_reference, color_combination), by = &quot;sovon_bird_reference&quot; ) %&gt;% group_by(sovon_bird_reference) %&gt;% mutate(color_combination = if_else( sovon_bird_date_begin == max(sovon_bird_date_begin) &amp; color_combination != &quot;NANA&quot;, color_combination, NA_character_ )) %&gt;% mutate( sovon_bird_shorthand_color = case_when( !is.na(sovon_bird_shorthand) &amp; !is.na(color_combination) ~ paste0( color_combination, &quot;(&quot;, sovon_bird_shorthand, &quot;)&quot; ), TRUE ~ sovon_bird_shorthand ), sovon_bird_shorthand_pt_color = case_when( !is.na(sovon_bird_shorthand_pt) &amp; !is.na(color_combination) ~ paste0( color_combination, &quot;(&quot;, sovon_bird_shorthand_pt, &quot;)&quot; ), TRUE ~ sovon_bird_shorthand_pt ) ) %&gt;% ungroup() Some examples from birds ringed thrice or more: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 2) %&gt;% select( sovon_bird_reference, color_combination, sovon_bird_shorthand, sovon_bird_shorthand_color, sovon_bird_shorthand_pt, sovon_bird_shorthand_pt_color, sovon_bird_date_begin, sovon_bird_date_end, everything() ) Based on INBO experts knowledge, we can assign color of rings and inscriptions for a significant number of old, changed rings as well. All rings with a 4-letter long inscription where the third letter is an A are blue rings with white inscription (see https://github.com/inbo/cr-birding/issues/84#issuecomment-478938321). Rings still not mapped satisfying this condition: old_rings_with_A &lt;- crbirding_birds %&gt;% filter( !str_detect(sovon_bird_shorthand_color, &quot;\\\\(&quot;) &amp; str_detect(sovon_bird_shorthand, &quot;[A-Z]&quot;) &amp; str_length(sovon_bird_shorthand) == 4 &amp; str_sub(sovon_bird_shorthand, 3, 3) == &quot;A&quot; ) old_rings_with_A Assign colors: old_rings_with_A &lt;- old_rings_with_A %&gt;% mutate( sovon_bird_shorthand_color = paste0(&quot;BW(&quot;, sovon_bird_shorthand_color, &quot;)&quot;), sovon_bird_shorthand_pt_color = paste0( &quot;BW(&quot;, sovon_bird_shorthand_pt_color, &quot;)&quot; ) ) %&gt;% select( sovon_bird_reference, color_combination, sovon_bird_shorthand, sovon_bird_shorthand_color, sovon_bird_shorthand_pt, sovon_bird_shorthand_pt_color, sovon_bird_date_begin, sovon_bird_date_end, everything() ) old_rings_with_A Apply changes to crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(old_rings_with_A, by = c( &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_date_begin&quot;, &quot;sovon_bird_date_end&quot; ) ) %&gt;% bind_rows(old_rings_with_A) %&gt;% select(names(crbirding_birds)) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) Some examples from birds ringed thrice or more: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% ungroup() %&gt;% filter(n &gt; 2) %&gt;% select( sovon_bird_reference, color_combination, sovon_bird_shorthand, sovon_bird_shorthand_color, sovon_bird_shorthand_pt, sovon_bird_shorthand_pt_color, sovon_bird_date_begin, sovon_bird_date_end, everything() ) Rings still without color: rings_color_still_unknown &lt;- crbirding_birds %&gt;% filter(!str_detect(sovon_bird_shorthand_color, &quot;\\\\)&quot;)) rings_color_still_unknown Some ring inscriptions contain a B at third position: rings_color_still_unknown_with_B_third_pos &lt;- rings_color_still_unknown %&gt;% filter(str_sub(sovon_bird_shorthand, 3, 3) == &quot;B&quot;) rings_color_still_unknown_with_B_third_pos INBO experts explained us that the rings containing a B at third position are virtual rings (see issue #81). Some of them have no sovon_bird_date_end. We assign them sovon_bird_date_end by using the date from observations with action dood or klgev: rings_color_still_unknown_with_B_third_pos &lt;- rings_color_still_unknown_with_B_third_pos %&gt;% left_join(obs_and_acts %&gt;% filter(dood == &quot;dood&quot; | klgev == &quot;klgev&quot; &amp; (sovon_bird_reference %in% rings_color_still_unknown_with_B_third_pos$sovon_bird_reference)) %&gt;% select(dood, klgev, sovon_bird_reference, Datum), by = &quot;sovon_bird_reference&quot; ) %&gt;% mutate(sovon_bird_date_end = Datum) %&gt;% select(-c(dood, klgev, Datum)) %&gt;% left_join(crbirding_birds, by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot;, &quot;sovon_bird_date_begin&quot;, &quot;sovon_bird_date_end&quot;, &quot;sovon_bird_notes&quot;, &quot;color_combination&quot;, &quot;sovon_bird_shorthand_color&quot;, &quot;sovon_bird_shorthand_pt_color&quot;, &quot;sovon_bird_rings_changed&quot;, &quot;metal_ring_missing&quot; ) ) crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(rings_color_still_unknown_with_B_third_pos, by = c( &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_date_begin&quot;, &quot;sovon_bird_date_end&quot; ) ) %&gt;% bind_rows(rings_color_still_unknown_with_B_third_pos) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) We assign them color blue as ring color, color white as inscription color and add note virtual_ring. to sovon_bird_notes as decided here: crbirding_birds &lt;- crbirding_birds %&gt;% mutate( sovon_bird_notes = case_when( sovon_bird_shorthand %in% rings_color_still_unknown_with_B_third_pos$sovon_bird_shorthand ~ ifelse(is.na(sovon_bird_notes), &quot;virtual_color_ring.&quot;, str_c(sovon_bird_notes, &quot;virtual_color_ring.&quot;, sep = &quot; &quot;) ), TRUE ~ sovon_bird_notes ), sovon_bird_shorthand_color = if_else( sovon_bird_shorthand %in% rings_color_still_unknown_with_B_third_pos$sovon_bird_shorthand, paste0(&quot;BW(&quot;, sovon_bird_shorthand_color, &quot;)&quot;), sovon_bird_shorthand_color ), sovon_bird_shorthand_pt_color = if_else( sovon_bird_shorthand %in% rings_color_still_unknown_with_B_third_pos$sovon_bird_shorthand, paste0(&quot;BW(&quot;, sovon_bird_shorthand_pt_color, &quot;)&quot;), sovon_bird_shorthand_pt_color ) ) After mapping: crbirding_birds %&gt;% filter(sovon_bird_reference %in% rings_color_still_unknown_with_B_third_pos$sovon_bird_reference) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, sovon_bird_notes, sovon_bird_date_begin, sovon_bird_date_end, everything() ) The replaced rings left are foreign rings. rings_color_still_unknown_foreign &lt;- crbirding_birds %&gt;% filter(!str_detect(sovon_bird_shorthand_pt_color, &quot;\\\\(&quot;)) rings_color_still_unknown_foreign We assign fictive color to them to ease the submission to cr-birding database. We assign them blue as ring color and white as incription colors (see issue 84): rings_color_still_unknown_foreign &lt;- rings_color_still_unknown_foreign %&gt;% mutate( sovon_bird_notes = ifelse(is.na(sovon_bird_notes), &quot;foreign_color_ring.&quot;, str_c(sovon_bird_notes, &quot;foreign_color_ring.&quot;, sep = &quot; &quot; ) ), sovon_bird_shorthand_color = paste0( &quot;BW(&quot;, sovon_bird_shorthand_color, &quot;)&quot; ), sovon_bird_shorthand_pt_color = paste0( &quot;BW(&quot;, sovon_bird_shorthand_pt_color, &quot;)&quot; ) ) crbirding_birds &lt;- crbirding_birds %&gt;% anti_join(rings_color_still_unknown_foreign, by = c( &quot;sovon_bird_reference&quot;, &quot;sovon_bird_shorthand&quot;, &quot;sovon_bird_shorthand_pt&quot;, &quot;sovon_bird_date_begin&quot;, &quot;sovon_bird_date_end&quot; ) ) %&gt;% bind_rows(rings_color_still_unknown_foreign) %&gt;% arrange( sovon_bird_reference, sovon_bird_date_begin ) After mapping: crbirding_birds %&gt;% filter(sovon_bird_reference %in% rings_color_still_unknown_foreign$sovon_bird_reference) %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_notes, everything() ) Did we assigned a color to all rings? crbirding_birds %&gt;% filter(is.na(sovon_bird_shorthand_color) | (str_sub(sovon_bird_shorthand_color, 3, 3) == &quot;(&quot; &amp; str_sub(sovon_bird_shorthand_pt_color, 3, 3) == &quot;(&quot;)) %&gt;% nrow() == nrow(crbirding_birds) ## [1] TRUE We will overwrite the columns sovon_bird_shorthand and sovon_bird_shorthand_pt and remove the help columns sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color and color_combination at the end of the processing. 5.2.14 Position of the color ring and inscription orientation SOVON allows us to add two columns called position_color_ring and direction_color_ring in order to save: 1. the position of the color ring, left or right leg 2. the direction of the color ringâ€™s inscription, upwards or downwards In case of birds with one color ring only, SOVON doesnâ€™t save these fields. However, INBO experts find them important as it can help a lot when identifying mistakes in reading. For more details, see issue here. As for colors, this informations are only available for the very last ring of each bird. Overview: birds %&gt;% group_by(Plaats) %&gt;% count() We map all values of ring position and inscription reading direction: ring_position_table &lt;- ring_position_table %&gt;% mutate( sovon_bird_ring_position = case_when( str_sub(Code, start = 1, end = 1) == &quot;L&quot; ~ &quot;LB&quot;, str_sub(Code, start = 1, end = 1) == &quot;R&quot; ~ &quot;RB&quot;, TRUE ~ NA_character_ ), sovon_bird_ring_direction = case_when( str_sub(Code, start = -1, end = -1) == &quot;D&quot; ~ &quot;D&quot;, str_sub(Code, start = -1, end = -1) == &quot;U&quot; ~ &quot;U&quot;, TRUE ~ NA_character_ ) ) %&gt;% select( Code, sovon_bird_ring_position, sovon_bird_ring_direction, everything() ) ring_position_table where LB and RB stay for left tarsus and right tarsus respectively. We map the ring position and direction of ring inscription in birds: birds &lt;- birds %&gt;% left_join(ring_position_table %&gt;% select(Code, sovon_bird_ring_position), by = c(&quot;Plaats&quot; = &quot;Code&quot;) ) %&gt;% left_join(ring_position_table %&gt;% select(Code, sovon_bird_ring_direction), by = c(&quot;Plaats&quot; = &quot;Code&quot;) ) Effects of the mapping: birds %&gt;% distinct(Plaats, sovon_bird_ring_position, sovon_bird_ring_direction) Map these values from birds to crbirding_birds, taking into account that the fields sovon_bird_ring_position and sovon_bird_ring_direction are available only for the very last color ring of each bird: crbirding_birds &lt;- crbirding_birds %&gt;% filter(!is.na(sovon_bird_shorthand)) %&gt;% left_join(birds %&gt;% select( sovon_bird_reference, sovon_bird_ring_position, sovon_bird_ring_direction ), by = &quot;sovon_bird_reference&quot; ) %&gt;% group_by(sovon_bird_reference) %&gt;% mutate( sovon_bird_ring_position = if_else( sovon_bird_date_begin == max(sovon_bird_date_begin), sovon_bird_ring_position, NA_character_ ), sovon_bird_ring_direction = if_else( sovon_bird_date_begin == max(sovon_bird_date_begin), sovon_bird_ring_direction, NA_character_ ) ) %&gt;% ungroup() %&gt;% bind_rows(crbirding_birds %&gt;% filter(is.na(sovon_bird_shorthand))) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) Some examples from birds ringed more than twice: crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% add_tally() %&gt;% filter(n &gt; 2) %&gt;% select( sovon_bird_reference, sovon_bird_ring_position, sovon_bird_ring_direction, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_date_end, everything() ) %&gt;% head(n = 100) 5.2.15 Mapping of sovon_bird_ring_number We can now use metal_ring_missing in order to add the metal ring number as sovon_bird_ring_number. Still, note that only the very last metal ring number is saved in our color-oriented database. We will use it in place of older metal rings. We could improve it in crbirding database later. crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, sovon_bird_ring_number) %&gt;% rename(metal_ring_number = sovon_bird_ring_number), by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% group_by(sovon_bird_reference) %&gt;% mutate(sovon_bird_ring_number = case_when( metal_ring_missing == FALSE ~ metal_ring_number, metal_ring_missing == TRUE ~ NA_character_ )) %&gt;% select(-metal_ring_number) %&gt;% ungroup() Show an example by selecting birds wich lost their own metal rings: crbirding_birds %&gt;% filter(metal_ring_missing == TRUE) %&gt;% select(sovon_bird_reference) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot;) %&gt;% select( sovon_bird_reference, sovon_bird_date_begin, sovon_bird_date_end, sovon_bird_ring_number, metal_ring_missing, sovon_bird_rings_changed, everything() ) Add note about absence of metal ring based on original values in column MetaaalringNummer and the fields sovon_bird_reference, sovon_bird_ring_number: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select( sovon_bird_reference, MetaalringNummer ), by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% mutate(sovon_bird_notes = case_when( is.na(sovon_bird_ring_number) &amp; metal_ring_missing == FALSE &amp; (MetaalringNummer %in% c(&quot;?&quot;, &quot;onbekend&quot;) | is.na(MetaalringNummer)) ~ ifelse(is.na(sovon_bird_notes), &quot;bird_ring_number not available.&quot;, str_c(sovon_bird_notes, &quot;bird_ring_number not available.&quot;, sep = &quot; &quot;) ), is.na(sovon_bird_ring_number) &amp; metal_ring_missing == FALSE &amp; MetaalringNummer == &quot;none&quot; ~ ifelse(is.na(sovon_bird_notes), &quot;bird_ring_number not present.&quot;, str_c(sovon_bird_notes, &quot;bird_ring_number not present.&quot;, sep = &quot; &quot;) ), TRUE ~ sovon_bird_notes )) %&gt;% select(-MetaalringNummer) Notice that in these cases the ring number is unknown although we are sure it exists. We left sovon_bird_ring_number empty as suggested by SOVON experts (see comment on issue 100) without modifying the value of bird_rings_changed. This is how sovon_bird_notes has been updated, limited to birds where changes could happen: crbirding_birds %&gt;% filter(is.na(sovon_bird_ring_number)) %&gt;% filter(metal_ring_missing == FALSE) %&gt;% select(sovon_bird_reference) %&gt;% left_join(crbirding_birds, by = &quot;sovon_bird_reference&quot; ) %&gt;% select(-sovon_bird_shorthand) %&gt;% arrange(sovon_bird_reference, sovon_bird_date_begin) 5.2.16 Euring Present values: birds %&gt;% distinct(EuringCode) We assign the euring codes by applying the following mapping: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% distinct(sovon_bird_reference, EuringCode), by = &quot;sovon_bird_reference&quot; ) %&gt;% mutate(sovon_bird_euring = recode(EuringCode, &quot;5920&quot; = &quot;05920&quot;, &quot;5910&quot; = &quot;05910&quot;, &quot;5926&quot; = &quot;05926&quot;, &quot;5922&quot; = &quot;06009&quot;, # 5922 used for hybrid gulls &quot;05922&quot; = &quot;06009&quot;, # 05922 used for hybrid gulls &quot;zz&quot; = &quot;04560&quot;, # pied avocets &quot;zzz&quot; = &quot;00720&quot; # great cormorants )) %&gt;% ungroup() Effects of mapping: crbirding_birds %&gt;% distinct(EuringCode, sovon_bird_euring) We remove the help column EuringCode from crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% select(-EuringCode) 5.2.17 Scheme Actual values: birds %&gt;% distinct(MetaalringLandCode) We apply the following mapping: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, MetaalringLandCode), by = &quot;sovon_bird_reference&quot; ) %&gt;% mutate(sovon_bird_scheme = recode(MetaalringLandCode, &quot;BE&quot; = &quot;BLB&quot;, &quot;FR&quot; = &quot;FRP&quot;, &quot;NL&quot; = &quot;NLA&quot;, &quot;PT&quot; = &quot;POL&quot;, &quot;UK&quot; = &quot;GBT&quot; )) %&gt;% mutate(sovon_bird_scheme = case_when( is.na(sovon_bird_ring_number) ~ NA_character_, TRUE ~ sovon_bird_scheme )) Effects of mapping: crbirding_birds %&gt;% filter(!is.na(sovon_bird_ring_number)) %&gt;% distinct(MetaalringLandCode, sovon_bird_scheme) We remove the help column MetaalringLandCode from crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% select(-MetaalringLandCode) 5.2.18 Bird sex Bird sex is translated to English. Letter M (Dutch word mannetje) will not change so no need to convert it: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(birds %&gt;% select(sovon_bird_reference, GeslachtCode), by = &quot;sovon_bird_reference&quot; ) %&gt;% mutate(sovon_bird_sex = recode(GeslachtCode, &quot;V&quot; = &quot;F&quot;, ## V(rouwtje) -&gt;F(emale) &quot;O&quot; = &quot;U&quot; ## O(nbekend) -&gt; U(nknown) )) Effects of mapping: crbirding_birds %&gt;% distinct(GeslachtCode, sovon_bird_sex) We remove the help column GeslachtCode from crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% select(-GeslachtCode) 5.2.19 Bird age ringing For mapping the age while applying color rings, we have to follow the Euring standard: see online pdf document at page 14. Bird age at the moment of any observation can be found in column LeeftijdCode of obs_and_acts. Values present: obs_and_acts %&gt;% distinct(LeeftijdCode) We apply a recoding in order to standardize INBOâ€™s vocabulary to the EURING standard: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_bird_age_obs = recode(LeeftijdCode, &quot;PU&quot; = &quot;1&quot;, &quot;AD&quot; = &quot;A&quot;, &quot;J1&quot; = &quot;3&quot;, &quot;I4&quot; = &quot;5&quot;, &quot;I3&quot; = &quot;7&quot;, &quot;I2&quot; = &quot;9&quot;, &quot;I5&quot; = &quot;B&quot;, .missing = NA_character_ )) The age can be added to crbirding_birds by matching sovon_bird_date_begin of crbirding_birds and Datum of obs_and_acts for each sovon_bird_reference. First we check that this strategy ends up with a one-to-one relation: crbirding_birds %&gt;% left_join(obs_and_acts %&gt;% ## remove rows with Datum equal to NA or field observations filter(!is.na(sovon_bird_age_obs) &amp; is.na(veld) &amp; is.na(dood) &amp; is.na(br) &amp; (!is.na(vang) | !is.na(vangl) | !is.na(rngkl) | !is.na(rngme) | !is.na(klgev) | !is.na(klweg) | !is.na(meweg) | !is.na(ziek) # for FHOV,YCAF,FAAG )), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot; ) ) %&gt;% nrow() == nrow(crbirding_birds) ## [1] TRUE If TRUE, then we proceed with the mapping: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(obs_and_acts %&gt;% ## remove rows with Datum equal to NA or field observations filter(!is.na(sovon_bird_age_obs) &amp; is.na(veld) &amp; is.na(dood) &amp; is.na(br) &amp; (!is.na(vang) | !is.na(vangl) | !is.na(rngkl) | !is.na(rngme) | !is.na(klgev) | !is.na(klweg) | !is.na(meweg) | !is.na(ziek) # for FHOV,YCAF,FAAG )) %&gt;% select(sovon_bird_reference, Datum, sovon_bird_age_obs), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot; ) ) We rename sovon_bird_age_obs to sovon_bird_age_ringing in crbirding_birds: crbirding_birds &lt;- crbirding_birds %&gt;% rename(sovon_bird_age_ringing = sovon_bird_age_obs) As examples, the bird age mapping of birds (color) ringed thrice or more: bird_reference_triplet &lt;- crbirding_birds %&gt;% group_by(sovon_bird_reference) %&gt;% count() %&gt;% filter(n &gt;= 3) %&gt;% pull(sovon_bird_reference) crbirding_birds %&gt;% select( sovon_bird_reference, sovon_bird_shorthand, sovon_bird_date_begin, sovon_bird_age_ringing ) %&gt;% filter(sovon_bird_reference %in% bird_reference_triplet) 5.2.20 Bird ID Bird identifiers will be provided by SOVON. NA is given: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_id = NA) 5.2.21 Bird BTO Bird BTO will be provided by SOVON. NA is given: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_bto = NA) 5.2.22 Bird name Some birds, the ones with a GPS tracker, have a name saved in this file. The names are saved in column individual_remarks: uvabits_file &lt;- &quot;https://raw.githubusercontent.com/inbo/bird-tracking/master/data/interim/individuals.csv&quot; uvabits_names &lt;- read_csv(uvabits_file, col_types = cols( .default = col_character(), individual_id = col_double(), mass = col_double(), track_session_id = col_double(), device_info_serial = col_double(), tracker_id = col_double(), track_session_start_date = col_datetime(format = &quot;&quot;), track_session_end_date = col_datetime(format = &quot;&quot;), track_session_start_latitude = col_double(), track_session_start_longitude = col_double() ) ) %&gt;% select(individual_id, ring_number, individual_remarks, everything()) head(uvabits_names) We couple the birds to the correspondent names by color ring: bird_ref_uvabits &lt;- crbirding_birds %&gt;% left_join(uvabits_names %&gt;% select(colour_ring, individual_remarks) %&gt;% filter(!is.na(colour_ring)), by = c(&quot;sovon_bird_shorthand&quot; = &quot;colour_ring&quot;) ) %&gt;% rename(sovon_bird_name = individual_remarks) %&gt;% filter(!is.na(sovon_bird_name)) %&gt;% select(sovon_bird_reference, sovon_bird_name) And we assign the names by joining on sovon_bird_reference: crbirding_birds &lt;- crbirding_birds %&gt;% left_join(bird_ref_uvabits, by = &quot;sovon_bird_reference&quot;) Examples: crbirding_birds %&gt;% filter(!is.na(sovon_bird_name)) %&gt;% select(sovon_bird_reference, sovon_bird_name, sovon_bird_shorthand) 5.2.23 Bird birth year This field will be filled by SOVON. NA is given: crbirding_birds &lt;- crbirding_birds %&gt;% mutate(sovon_bird_birth_year = NA) 5.3 Finalize user data We have now sufficient information to define the role of any user in crbirding_users. 5.3.1 Add user role to crbirding_users Based on sovon_bird_date_begin we can retrieve the observations linked to applying rings. We retrieve the ringers by joining crbirding_users and obs_and_acts by WaarnemerNummer: ringers_number &lt;- crbirding_birds %&gt;% select(sovon_bird_reference, sovon_bird_date_begin) %&gt;% left_join(obs_and_acts %&gt;% ## remove rows with Datum equal to NA or field observations filter(!is.na(sovon_bird_age_obs) &amp; is.na(veld) &amp; is.na(dood) &amp; is.na(br) &amp; (!is.na(vang) | !is.na(vangl) | !is.na(rngkl) | !is.na(rngme) | !is.na(klgev) | !is.na(klweg) | !is.na(meweg) | !is.na(ziek) # for FHOV,YCAF,FAAG )) %&gt;% select(sovon_bird_reference, Datum, WaarnemerNummer), by = c(&quot;sovon_bird_reference&quot;, &quot;sovon_bird_date_begin&quot; = &quot;Datum&quot;) ) %&gt;% filter(!is.na(WaarnemerNummer)) %&gt;% distinct(WaarnemerNummer) %&gt;% pull(WaarnemerNummer) print(paste( &quot;Number of ringers:&quot;, length(ringers_number) )) ## [1] &quot;Number of ringers: 36&quot; We assign a R (ringer) to them, O (observer) otherwise: crbirding_users &lt;- crbirding_users %&gt;% mutate(user_role = ifelse(user_reference %in% ringers_number, &quot;R&quot;, &quot;O&quot; )) Number of ringers and observers: crbirding_users %&gt;% group_by(user_role) %&gt;% count() 5.4 Save modified temporary observation data We overwrite the temporary observation data based on the added columns: write_tsv( obs_and_acts, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), na = &quot;&quot;, append = FALSE ) 5.5 Save modified ring position and direction table We save the updated table containing color ring position and inscription direction in data/interim: write_tsv( ring_position_table, path = here::here(&quot;data&quot;, &quot;interim&quot;, &quot;ring_position_table.tsv&quot;), na = &quot;&quot;, append = FALSE ) 5.6 Save final user data The desired order of columns in crbirding_users: cr_users_cols &lt;- c( &quot;user_id&quot;, &quot;user_reference&quot;, &quot;user_email&quot;, &quot;user_first_name&quot;, &quot;user_last_name&quot;, &quot;user_address&quot;, &quot;user_postal_code&quot;, &quot;user_place&quot;, &quot;user_country&quot;, &quot;user_language&quot;, &quot;user_role&quot; ) Are all required columns present? all(cr_users_cols %in% names(crbirding_users)) &amp; length(cr_users_cols) == ncol(crbirding_users) ## [1] TRUE We overwrite crbirding_users.csv with added information: write_csv(crbirding_users, path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.csv&quot;), na = &quot;&quot; ) 5.7 Save final ring data We overwrite the columns sovon_bird_shorthand and sovon_bird_shorthand_pt and remove the help columns metal_ring_missing, sovon_bird_shorthand_color, sovon_bird_shorthand_pt_color and color_combination: crbirding_birds &lt;- crbirding_birds %&gt;% mutate( sovon_bird_shorthand = sovon_bird_shorthand_color, sovon_bird_shorthand_pt = sovon_bird_shorthand_pt_color ) %&gt;% select(-c( ends_with(&quot;color&quot;), starts_with(&quot;color&quot;), metal_ring_missing )) Transform date from ISO standard yyyy-mm-dd to SOVONâ€™s standard dd-mm-yyyy: crbirding_birds &lt;- crbirding_birds %&gt;% mutate( sovon_bird_date_begin = as.character(sovon_bird_date_begin, format = &quot;%d-%m-%Y&quot; ), sovon_bird_date_end = as.character(sovon_bird_date_end, format = &quot;%d-%m-%Y&quot; ) ) Example: crbirding_birds %&gt;% filter(!is.na(sovon_bird_date_end)) %&gt;% select(sovon_bird_date_begin, sovon_bird_date_end) %&gt;% head() SOVON is interested in color ring versions with a dot if dots are present, even if their purpose is just improving readibility. We can overwrite sovon_bird_shorthand with control column sovon_bird_shorthand_pt: crbirding_birds &lt;- crbirding_birds %&gt;% select(-sovon_bird_shorthand) %&gt;% rename(sovon_bird_shorthand = sovon_bird_shorthand_pt) Remove prefix sovon_: names(crbirding_birds) &lt;- str_remove_all(names(crbirding_birds), pattern = &quot;sovon_&quot; ) names(crbirding_birds) ## [1] &quot;bird_reference&quot; &quot;bird_shorthand&quot; &quot;bird_date_begin&quot; ## [4] &quot;bird_date_end&quot; &quot;bird_notes&quot; &quot;bird_rings_changed&quot; ## [7] &quot;bird_ring_position&quot; &quot;bird_ring_direction&quot; &quot;bird_ring_number&quot; ## [10] &quot;bird_euring&quot; &quot;bird_scheme&quot; &quot;bird_sex&quot; ## [13] &quot;bird_age_ringing&quot; &quot;bird_id&quot; &quot;bird_bto&quot; ## [16] &quot;bird_name&quot; &quot;bird_birth_year&quot; The desired order of columns in crbirding_birds: cr_birds_cols &lt;- c( &quot;bird_id&quot;, &quot;bird_reference&quot;, &quot;bird_euring&quot;, &quot;bird_bto&quot;, &quot;bird_shorthand&quot;, &quot;bird_scheme&quot;, &quot;bird_ring_number&quot;, &quot;bird_name&quot;, &quot;bird_sex&quot;, &quot;bird_birth_year&quot;, &quot;bird_date_begin&quot;, &quot;bird_date_end&quot;, &quot;bird_rings_changed&quot;, &quot;bird_age_ringing&quot;, &quot;bird_ring_position&quot;, &quot;bird_ring_direction&quot;, &quot;bird_notes&quot; ) Are all required columns present? all(cr_birds_cols %in% names(crbirding_birds)) &amp; length(cr_birds_cols) == ncol(crbirding_birds) ## [1] TRUE Set column order: crbirding_birds &lt;- crbirding_birds %&gt;% select(all_of(cr_birds_cols)) Preview data: crbirding_birds %&gt;% head(n = 100) Save to text file (comma separated value): write_csv( crbirding_birds, path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_birds.csv&quot;), na = &quot;&quot; ) "],
["4_observations.html", "6 Map observation data 6.1 Read data 6.2 Map color observation data 6.3 Save final observation data", " 6 Map observation data 6.1 Read data 6.1.1 Read temporary observation data We start from the tempoary observation data saved as TSV file in data\\interim: obs_and_acts &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;obs_and_actions.tsv&quot;), col_types = cols( .default = col_character(), sovon_bird_reference = col_double(), Nummer = col_double(), Datum = col_datetime(format = &quot;&quot;), WaarnemerNummer = col_double(), PlaatsLengtegraadGraden = col_double(), PlaatsLengtegraadMinuten = col_double(), PlaatsLengtegraadSeconden = col_double(), PlaatsBreedtegraadGraden = col_double(), PlaatsBreedtegraadMinuten = col_double(), PlaatsBreedtegraadSeconden = col_double(), BevestigingDatum = col_datetime(format = &quot;&quot;), AanmaakDatum = col_datetime(format = &quot;&quot;), WijzigDatum = col_datetime(format = &quot;&quot;) ) ) 6.1.2 Read action data Import action codes and meaning: actions_meaning &lt;- read_tsv(here::here(&quot;data&quot;, &quot;input&quot;, &quot;actions_meaning.tsv&quot;)) 6.1.3 Read processed ring data We import finalized ring data from ./data/processed: crbirding_birds &lt;- read_csv( here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_birds.csv&quot;), col_types = cols( .default = col_character(), bird_id = col_logical(), bird_reference = col_double(), bird_bto = col_logical(), bird_birth_year = col_logical(), bird_date_begin = col_datetime(format = &quot;%d-%m-%Y&quot;), bird_date_end = col_datetime(format = &quot;%d-%m-%Y&quot;) ) ) 6.1.4 Read temporary ring data We will need some columns from original INBO ring data. We import the temporary ring data as well: birds &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;birds.tsv&quot;), col_types = cols( .default = col_character() ) ) 6.1.5 Read ring position data We import mapping of ring position and inscription reading direction: ring_position_table &lt;- read_tsv( here::here(&quot;data&quot;, &quot;interim&quot;, &quot;ring_position_table.tsv&quot;), na = &quot;&quot;, col_types = cols( .default = col_character(), Aktief = col_logical() ) ) 6.1.6 Read processed user data We import finalized user data from ./data/processed: crbirding_users &lt;- read_csv( here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_users.csv&quot;), col_types = cols( .default = col_character(), user_id = col_logical(), user_reference = col_double() ) ) 6.1.7 Read list workers in bird shelters workers_bird_shelters &lt;- read_tsv( here::here(&quot;data&quot;, &quot;input&quot;, &quot;workers_in_bird_shelters.tsv&quot;), col_types = cols( .default = col_character(), user_id = col_logical(), user_reference = col_double() ) ) 6.2 Map color observation data 6.2.1 Extract action codes Actions present in obs_and_acts : acts &lt;- actions_meaning$Code acts &lt;- acts[acts %in% names(obs_and_acts)] acts ## [1] &quot;rngkl&quot; &quot;rngme&quot; &quot;klgev&quot; &quot;br&quot; &quot;vang&quot; &quot;dood&quot; &quot;klweg&quot; &quot;veld&quot; ## [9] &quot;meweg&quot; &quot;me&quot; &quot;vangl&quot; &quot;ziek&quot; Combinations of actions present in observations: action_combinations &lt;- obs_and_acts %&gt;% select(acts) %&gt;% distinct() action_combinations 6.2.2 Observation ID The field sovon_observation_id is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_id = NA) 6.2.3 Observation reference The observation reference is an unique identifier assigned to each observation. This field exists already: Nummer. obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_reference = Nummer) 6.2.4 Observation date The date is saved in column Datum. We copy it in required column sovon_observation_date: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_date = Datum) 6.2.5 Observation time There is no observation time in obs_and_acts. NA is given to sovon_observation_time: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_time = NA) 6.2.6 Observation latitude Observations with missing or partially missing latitude information: obs_missing_latitude_longitude &lt;- obs_and_acts %&gt;% filter(is.na(PlaatsBreedtegraadGraden) | is.na(PlaatsBreedtegraadMinuten) | is.na(PlaatsBreedtegraadSeconden) | is.na(PlaatsLengtegraadGraden) | is.na(PlaatsLengtegraadMinuten) | is.na(PlaatsLengtegraadSeconden)) %&gt;% select( Nummer, KleurringNummer, Datum, starts_with(&quot;PlaatsBreedtegraad&quot;), starts_with(&quot;PlaatsLengtegraad&quot;), PlaatsGemeente, PlaatsToponym ) obs_missing_latitude_longitude %&gt;% write_csv(&quot;missing_latitude_longitude_info.txt&quot;, na = &quot;&quot;, quote_escape = &quot;double&quot; ) obs_missing_latitude_longitude The absolute observation latitude should be converted to decimal degrees: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_lat = case_when( !is.na(PlaatsBreedtegraadGraden) &amp; !is.na(PlaatsBreedtegraadMinuten) &amp; !is.na(PlaatsBreedtegraadSeconden) ~ conv_unit( str_c(PlaatsBreedtegraadGraden, PlaatsBreedtegraadMinuten, PlaatsBreedtegraadSeconden, sep = &quot; &quot; ), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), !is.na(PlaatsBreedtegraadGraden) &amp; !is.na(PlaatsBreedtegraadMinuten) &amp; is.na(PlaatsBreedtegraadSeconden) ~ conv_unit( str_c(PlaatsBreedtegraadGraden, PlaatsBreedtegraadMinuten, 0, sep = &quot; &quot; ), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), !is.na(PlaatsBreedtegraadGraden) &amp; is.na(PlaatsBreedtegraadMinuten) &amp; is.na(PlaatsBreedtegraadSeconden) ~ conv_unit( str_c(PlaatsBreedtegraadGraden, 0, 0, sep = &quot; &quot;), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), TRUE ~ NA_character_ ) ) By field PlaatsBreedtegraadRichtingCode we can know whether the observation took place in the northern or southern emisphere. In case of southern emisphere, the latitude value should be negative. Values of PlaatsBreedtegraadRichtingCode and number of observations: obs_and_acts %&gt;% group_by(PlaatsBreedtegraadRichtingCode) %&gt;% count() If present, the observations with valid PlaatsBreedtegraadGraden but without PlaatsBreedtegraadRichtingCode should be further evaluated: obs_and_acts %&gt;% filter(is.na(PlaatsBreedtegraadRichtingCode) &amp; !is.na(PlaatsBreedtegraadGraden)) %&gt;% select(Nummer, starts_with(&quot;PlaatsBreedte&quot;), PlaatsGemeente, PlaatsToponym) Assign negative latitude if PlaatsBreedtegraadRichtingCode is equal to S: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_lat = case_when( PlaatsBreedtegraadRichtingCode == &quot;N&quot; ~ sovon_observation_lat, PlaatsBreedtegraadRichtingCode == &quot;S&quot; &amp; !is.na(sovon_observation_lat) ~ paste0(&quot;-&quot;, sovon_observation_lat), TRUE ~ sovon_observation_lat ) ) 6.2.7 Observation longitude Absolute value of the observation longitude should be converted to decimal degrees: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_lng = case_when( !is.na(PlaatsLengtegraadGraden) &amp; !is.na(PlaatsLengtegraadMinuten) &amp; !is.na(PlaatsLengtegraadSeconden) ~ conv_unit( str_c(PlaatsLengtegraadGraden, PlaatsLengtegraadMinuten, PlaatsLengtegraadSeconden, sep = &quot; &quot; ), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), !is.na(PlaatsLengtegraadGraden) &amp; !is.na(PlaatsLengtegraadMinuten) &amp; is.na(PlaatsLengtegraadSeconden) ~ conv_unit( str_c(PlaatsLengtegraadGraden, PlaatsLengtegraadMinuten, 0, sep = &quot; &quot; ), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), !is.na(PlaatsLengtegraadGraden) &amp; is.na(PlaatsLengtegraadMinuten) &amp; is.na(PlaatsLengtegraadSeconden) ~ conv_unit( str_c(PlaatsLengtegraadGraden, 0, 0, sep = &quot; &quot;), from = &quot;deg_min_sec&quot;, to = &quot;dec_deg&quot; ), TRUE ~ NA_character_ ) ) By field PlaatsLengtegraadRichtingCode we can know whether the observation took place in the western or eastern emisphere. In case of western emisphere, the longitude value should be negative. Values of PlaatsLengtegraadRichtingCode and number of observations: obs_and_acts %&gt;% group_by(PlaatsLengtegraadRichtingCode) %&gt;% count() If present, the observations with valid PlaatsLengtegraadRichtingCode but without PlaatsLengtegraadRichtingCode should be further evaluated: obs_and_acts %&gt;% filter(is.na(PlaatsLengtegraadRichtingCode) &amp; !is.na(PlaatsLengtegraadGraden)) %&gt;% select(Nummer, starts_with(&quot;PlaatsLengte&quot;), PlaatsGemeente, PlaatsToponym) Assign negative longitude if PlaatsLengtegraadRichtingCode is equal to W: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_lng2 = case_when( PlaatsLengtegraadRichtingCode == &quot;E&quot; ~ sovon_observation_lng, PlaatsLengtegraadRichtingCode == &quot;W&quot; &amp; is.na(sovon_observation_lng) ~ paste0(&quot;-&quot;, sovon_observation_lng), TRUE ~ sovon_observation_lng ) ) 6.2.8 Observation location Aggregate information about observation location. We follow the following structure: PlaatsGemeente [+ , + PlaatsToponym [+ : + PlaatsToponymDetail]]: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_location = ifelse(!is.na(PlaatsToponym), str_c(PlaatsGemeente, PlaatsToponym, sep = &quot;, &quot; ), paste(PlaatsGemeente) ) ) %&gt;% mutate( sovon_observation_location = ifelse(!is.na(PlaatsToponymDetail), str_c(sovon_observation_location, PlaatsToponymDetail, sep = &quot;: &quot; ), paste(sovon_observation_location) ) ) 6.2.9 Check bird The field sovon_check_bird is provided by SOVON. NA is given: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_check_bird = NA) 6.2.10 User ID The field sovon_user_id is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_user_id = NA) 6.2.11 User reference The field sovon_user_reference links observations to users and it is equal to field user_reference in user data: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_user_reference = WaarnemerNummer) 6.2.12 Observer The field sovon_melder is equal to user_first_name and user_last_name in users: obs_and_acts &lt;- obs_and_acts %&gt;% left_join( crbirding_users %&gt;% select(user_reference, user_first_name, user_last_name), by = c(&quot;WaarnemerNummer&quot; = &quot;user_reference&quot;) ) %&gt;% mutate(sovon_melder = case_when( is.na(user_first_name) &amp; !is.na(user_last_name) ~ user_last_name, !is.na(user_first_name) &amp; is.na(user_last_name) ~ user_first_name, !is.na(user_first_name) &amp; !is.na(user_last_name) ~ str_c(user_first_name, user_last_name, sep = &quot; &quot;), is.na(user_first_name) &amp; is.na(user_last_name) ~ NA_character_ )) %&gt;% select(-c(user_first_name, user_last_name)) 6.2.13 Observer e-mail The field sovon_melder_email is equal to user_email in users: obs_and_acts &lt;- obs_and_acts %&gt;% left_join( crbirding_users %&gt;% select(user_reference, user_email), by = c(&quot;WaarnemerNummer&quot; = &quot;user_reference&quot;) ) %&gt;% mutate(sovon_melder_email = user_email) 6.2.14 Reporter - ringer number The field sovon_melder_ringersnummer is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_melder_ringersnummer = NA) 6.2.15 Ring number The field sovon_ring_number contains information about the metal ring number, in the same format as in field bird_ring_number of crbirding_birds. As explained in the mapping of field bird_ring_number of crbirding_birds, INBO database is a color ring database. This field is not accurately mapped and we will leave it empty. obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_ring_number = NA_character_) 6.2.16 Observation status Adding the EURING status information arises by the need of mapping the observations with action code br and vang: actions_meaning %&gt;% filter(Code %in% c(&quot;br&quot;, &quot;vang&quot;)) The actions br and vang refer to status breeding in EURING system. Based on the scheme at page 16 of EURING Exchange Code 2000+ document, we define the following mapping: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_status = case_when( !is.na(br) | !is.na(vang) ~ &quot;N&quot;, LeeftijdCode == &quot;PU&quot; ~ &quot;-&quot;, TRUE ~ &quot;U&quot; )) 6.2.17 Condition The SOVON field condition is mapped following the scheme at page 22 of EURING Exchange Code 2000+ document. The following actions are mapped as follows in order of priority: dood: condition = 1 ziek: condition = 4 rngkl, rngme, vang, vangl: condition = 8 veld, me, meweg, klweg, br: condition = 7 obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_condition = case_when( dood == &quot;dood&quot; ~ 1, klgev == &quot;klgev&quot; ~ 1, ziek == &quot;ziek&quot; ~ 4, !is.na(rngkl) | !is.na(rngme) | !is.na(vang) | !is.na(vangl) ~ 8, !is.na(veld) | !is.na(me) | !is.na(meweg) | !is.na(klweg) | !is.na(br) ~ 7 )) The observations of sick birds not anymore released should get condition equal to 5. These observations are linked to the very last ziek action and followed by an observation with action dood. Not only, the observer should be a worker of a bird shelter, in workers_bird_shelters. Reference number of observations with condition 5: last_sick_df &lt;- obs_and_acts %&gt;% filter(sovon_user_reference %in% workers_bird_shelters$user_reference) %&gt;% filter(ziek == &quot;ziek&quot;) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_observation_date == max(sovon_observation_date)) %&gt;% ungroup() %&gt;% select(sovon_observation_reference, sovon_bird_reference, sovon_observation_date) %&gt;% rename( last_sick_date = sovon_observation_date, obs_ref = sovon_observation_reference ) dead_df &lt;- obs_and_acts %&gt;% filter(dood == &quot;dood&quot;) %&gt;% select(sovon_bird_reference, sovon_observation_date) %&gt;% rename(dead_date = sovon_observation_date) last_sick_before_dead_df &lt;- last_sick_df %&gt;% filter(sovon_bird_reference %in% dead_df$sovon_bird_reference) %&gt;% left_join(dead_df, by = &quot;sovon_bird_reference&quot;) condition_5_obs_ref &lt;- obs_and_acts %&gt;% filter(sovon_bird_reference %in% last_sick_before_dead_df$sovon_bird_reference) %&gt;% left_join(last_sick_before_dead_df, by = &quot;sovon_bird_reference&quot; ) %&gt;% group_by(sovon_bird_reference) %&gt;% filter(sovon_observation_date &gt;= last_sick_date &amp; sovon_observation_date &lt; dead_date) %&gt;% count() %&gt;% ## only one ziek action present -&gt; no obs possible if not released filter(n == 1) %&gt;% left_join(last_sick_before_dead_df, by = c(&quot;sovon_bird_reference&quot;) ) %&gt;% pull(obs_ref) Number of observations selected to get condition code 5: length(condition_5_obs_ref) ## [1] 1 Assign condition value 5 to these observations: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_condition = if_else( sovon_observation_reference %in% condition_5_obs_ref, 5, sovon_condition ) ) Observations with sovon_condition= 5: obs_and_acts %&gt;% filter(sovon_condition == 5) %&gt;% select( sovon_observation_reference, sovon_bird_reference, sovon_observation_date, sovon_condition, acts ) Mapping of sovon_condition: obs_and_acts %&gt;% select( sovon_observation_reference, sovon_bird_reference, sovon_observation_date, sovon_condition, acts ) %&gt;% head(n = 100) 6.2.18 MRI: metal ring information Metal ring information is an integer between 0 and 9. A table can be found at page 8 of EURING Exchange Code 2000+ document. However, SOVON uses this field to map the observations referring to the applying of any kind of ring, either color or metal, as their database is purely focussed on color rings and due to a missing field in the EURING Exchange Code 2000+ specific for color rings. INBO experts explained us that all color rings are applied on tarsus, MRI: 2, while metal ring position is on tarsus or above or unknown, MRI: 1. However, the value 2 is not allowed by SOVON (see comment in issue 47). Values allowed: 1, 4 and 5, where 4 is used for adding a color and/or metal ring, while 5 for changing Mapping decision rules: Default: MRI 4 Very first ringing of a bird (no matter if rngme only, rngkl only or rngme + rngkl): MRI 1 Changing a metal and/or color ring: MRI 5 This last condition holds true even if the color ring is changed while adding a metal ring or viceversa. We initialize sovon_MRI by assigning default value 4: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_MRI = 4) Very first ringing gets sovon_MRI = 1: obs_and_acts &lt;- obs_and_acts %&gt;% group_by(sovon_bird_reference) %&gt;% mutate(sovon_MRI = if_else( Datum == min(Datum) &amp; (rngkl == &quot;rngkl&quot; | rngme == &quot;rngme&quot;), 1, sovon_MRI )) %&gt;% arrange(sovon_bird_reference, Datum) %&gt;% ungroup() Preview: obs_and_acts %&gt;% filter(sovon_MRI == 1) %&gt;% select( sovon_observation_reference, sovon_bird_reference, sovon_observation_date, sovon_MRI, acts ) %&gt;% select_if(function(x) any(!is.na(x))) %&gt;% head(n = 100) Adding a color ring while metal ring is alrady present is mapped as 4, which is the default value. Same for adding a metal ring while color ring already present. Based on crbirding_birds MRI is 5 if previous bird_shorthand is not empty and different from actual bird_shorthand and no klweg action is coupled to the observation. As said in previous chapter while mapping ring data, we donâ€™t have track of changing metal rings, only loosing it (actions meweg). We then assume to add a new one at next cathcing action. But adding a metal ring while not changing color ring mean MRI equal to 4, default value, if color ring is changed then it is 5: this demonstrates that MRI value 5 depends only on value of bird_shorthand as only color rings can be changed in our mapping. If the ringer, while catching, realizes the absence of color ring (klweg), then the color ring is added, not changed, i.e. MRI equal 4 as metal ring is still present.If metal ring is absent as well, then it would be imposible to identify the bird and it would count as a new bird with an obseration coupled to rngkl + rngme actions. MRI_5_bird_ref_and_dates &lt;- crbirding_birds %&gt;% group_by(bird_reference) %&gt;% mutate(previous_bird_shorthand = lag(bird_shorthand)) %&gt;% filter(!is.na(previous_bird_shorthand) &amp; previous_bird_shorthand != bird_shorthand) %&gt;% select(bird_reference, bird_date_begin) %&gt;% ungroup() %&gt;% mutate(set_MRI_5 = 5) obs_and_acts &lt;- obs_and_acts %&gt;% left_join(MRI_5_bird_ref_and_dates, by = c( &quot;sovon_bird_reference&quot; = &quot;bird_reference&quot;, &quot;Datum&quot; = &quot;bird_date_begin&quot; ) ) %&gt;% mutate(sovon_MRI = if_else(!is.na(set_MRI_5) &amp; is.na(klweg) &amp; is.na(veld), set_MRI_5, sovon_MRI )) Preview changes: obs_and_acts %&gt;% filter(sovon_MRI == 5) %&gt;% select( sovon_observation_reference, sovon_bird_reference, sovon_observation_date, sovon_MRI, acts ) %&gt;% select_if(function(x) any(!is.na(x))) The presence of action ziek in combination with sovon_MRI 5 is due to the three rings discussed in previous chapter: FHOV, YCAF, FAAG. 6.2.19 Bird age The field sovon_bird_age_obs should be filled with the age of the bird as mentioned by the observer. This field has been created in previous chapter: obs_and_acts %&gt;% distinct(sovon_bird_age_obs) 6.2.20 Bird sex The field sovon_bird_sex should be filled with the sex of the bird as mentioned by the observer. This field is not present in obs_and_acts, so we assign value U (unknown): obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_bird_sex = &quot;U&quot;) 6.2.21 Capture The field sovon_observation_is_capture can be filled by evaluating the link of observations to actions vang, vangl, rngkl or rngme: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_is_capture = if_else( !is.na(vang) | !is.na(vangl) | !is.na(rngkl) | !is.na(rngme), &quot;Y&quot;, &quot;N&quot; )) 6.2.22 Bird ID The field sovon_bird_id is left to SOVON: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_bird_id = NA) 6.2.23 Bird ring position and inscription direction Similarly to the mapping in ring data, we map the ring position and inscription reading direction in observations: obs_and_acts &lt;- obs_and_acts %&gt;% left_join(ring_position_table %&gt;% select(Code, sovon_bird_ring_position), by = c(&quot;KleurringPlaats&quot; = &quot;Code&quot;) ) %&gt;% left_join(ring_position_table %&gt;% select(Code, sovon_bird_ring_direction), by = c(&quot;KleurringPlaats&quot; = &quot;Code&quot;) ) Effects of the mapping: obs_and_acts %&gt;% distinct(KleurringPlaats, sovon_bird_ring_position, sovon_bird_ring_direction) 6.2.24 Observation notes We copy the notes in Opmerking to SOVON field sovon_observation_notes: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_notes = Opmerking) We add a dot at the end of the notes if not present already: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( !is.na(sovon_observation_notes) &amp; str_length(sovon_observation_notes) &gt; 0, if_else(str_sub(sovon_observation_notes, -1) != &quot;.&quot;, str_c(sovon_observation_notes, &quot;.&quot;, sep = &quot;&quot;), sovon_observation_notes ), sovon_observation_notes ) ) We also add the prefix &quot;INBO original notes: &quot;: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( !is.na(sovon_observation_notes) &amp; str_length(sovon_observation_notes) &gt; 0, str_c(&quot;INBO original notes: &quot;, sovon_observation_notes, sep = &quot; &quot;), sovon_observation_notes ) ) We add the note no_color_ring. to observations linked to action klweg and/or me: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( klweg == &quot;klweg&quot; | me == &quot;me&quot;, if_else(is.na(sovon_observation_notes), &quot;no_color_ring.&quot;, paste(&quot;no_color_ring.&quot;, sovon_observation_notes, sep = &quot; &quot;) ), sovon_observation_notes ) ) Preview: obs_and_acts %&gt;% filter(!is.na(klweg)) %&gt;% select(sovon_observation_notes) %&gt;% head() We add the note no_metal_ring. to observations linked to action meweg: obs_and_acts &lt;- obs_and_acts %&gt;% mutate( sovon_observation_notes = if_else( !is.na(meweg), if_else(is.na(sovon_observation_notes), &quot;no_metal_ring.&quot;, paste(&quot;no_metal_ring.&quot;, sovon_observation_notes, sep = &quot; &quot;) ), sovon_observation_notes ) ) Preview: obs_and_acts %&gt;% filter(!is.na(meweg)) %&gt;% select(sovon_observation_notes) %&gt;% distinct() %&gt;% head() 6.3 Save final observation data Transform date from ISO standard yyyy-mm-dd to SOVONâ€™s standard dd-mm-yyyy: obs_and_acts &lt;- obs_and_acts %&gt;% mutate(sovon_observation_date = as.character(sovon_observation_date, format = &quot;%d-%m-%Y&quot; )) Select the required columns, starting with prefix sovon_: crbirding_observations &lt;- obs_and_acts %&gt;% select(starts_with(&quot;sovon&quot;)) Remove prefix sovon_: names(crbirding_observations) &lt;- str_remove_all(names(crbirding_observations), pattern = &quot;sovon_&quot;) The desired order of columns in crbirding_observations: cr_obs_cols &lt;- c( &quot;user_id&quot;, &quot;user_reference&quot;, &quot;bird_id&quot;, &quot;bird_reference&quot;, &quot;observation_id&quot;, &quot;observation_reference&quot;, &quot;observation_date&quot;, &quot;observation_time&quot;, &quot;observation_lat&quot;, &quot;observation_lng&quot;, &quot;observation_location&quot;, &quot;observation_is_capture&quot;, &quot;observation_notes&quot;, &quot;check_bird&quot;, &quot;MRI&quot;, &quot;melder&quot;, &quot;melder_email&quot;, &quot;melder_ringersnummer&quot;, &quot;ring_number&quot;, &quot;condition&quot;, &quot;status&quot;, &quot;bird_age_obs&quot;, &quot;bird_sex&quot;, &quot;bird_ring_position&quot;, &quot;bird_ring_direction&quot; ) Are all required columns present? all(cr_obs_cols %in% names(crbirding_observations)) &amp; length(cr_obs_cols) == ncol(crbirding_observations) ## [1] FALSE Set column order: crbirding_observations &lt;- crbirding_observations %&gt;% select(all_of(cr_obs_cols)) Preview data (without personal observer data for privcay reasons): crbirding_observations %&gt;% select(-c(melder, melder_email)) %&gt;% head(n = 10) Save to text file (comma separated value): write_csv( crbirding_observations, path = here::here(&quot;data&quot;, &quot;processed&quot;, &quot;crbirding_observations.csv&quot;), na = &quot;&quot; ) "]
]
